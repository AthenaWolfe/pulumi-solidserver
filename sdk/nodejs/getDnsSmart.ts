// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * DNS SMART data-source allows to retrieve information about DNS SMART architectures.
 * SMART(s) are abstratc containers managing several DNS servers as a unique entity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const dnsSMARTData = solidserver.getDnsSmart({
 *     name: ssmart.local,
 * });
 * ```
 */
export function getDnsSmart(args: GetDnsSmartArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsSmartResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solidserver:index/getDnsSmart:getDnsSmart", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsSmart.
 */
export interface GetDnsSmartArgs {
    /**
     * The name of the DNS SMART.
     */
    name: string;
}

/**
 * A collection of values returned by getDnsSmart.
 */
export interface GetDnsSmartResult {
    /**
     * A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).
     */
    readonly allowQueries: string[];
    /**
     * A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).
     */
    readonly allowRecursions: string[];
    /**
     * A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).
     */
    readonly allowTransfers: string[];
    /**
     * The SMART architecture type (masterslave|stealth|multimaster|single|farm).
     */
    readonly arch: string;
    /**
     * The class associated to the DNS server.
     */
    readonly class: string;
    /**
     * The class parameters associated to the DNS SMART
     */
    readonly classParameters: {[key: string]: any};
    /**
     * Custom information about the DNS SMART.
     */
    readonly comment: string;
    /**
     * The forwarding mode of the DNS SMART (Disabled if empty).
     */
    readonly forward: string;
    /**
     * The IP address list of the forwarder(s) configured on the DNS SMART.
     */
    readonly forwarders: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the DNS SMART members.
     */
    readonly members: string[];
    /**
     * The name of the DNS SMART.
     */
    readonly name: string;
    /**
     * The recursion status of the DNS SMART.
     */
    readonly recursion: boolean;
}
/**
 * DNS SMART data-source allows to retrieve information about DNS SMART architectures.
 * SMART(s) are abstratc containers managing several DNS servers as a unique entity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const dnsSMARTData = solidserver.getDnsSmart({
 *     name: ssmart.local,
 * });
 * ```
 */
export function getDnsSmartOutput(args: GetDnsSmartOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsSmartResult> {
    return pulumi.output(args).apply((a: any) => getDnsSmart(a, opts))
}

/**
 * A collection of arguments for invoking getDnsSmart.
 */
export interface GetDnsSmartOutputArgs {
    /**
     * The name of the DNS SMART.
     */
    name: pulumi.Input<string>;
}
