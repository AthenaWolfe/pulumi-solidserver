// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * IP subnet data-source allows to retrieve information about reserved IPv4 subnets, including meta-data.
 * IP Subnet are key to organize the IP space, they can be blocks or subnets. Blocks reflect assigned IP
 * ranges (RFC1918 or public prefixes). Subnets reflect the internal sub-division of your network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstIPSubnetData = solidserver.getIpSubnet({
 *     name: solidserver_ip_subnet.myFirstIPSubnet.name,
 *     space: solidserver_ip_subnet.myFirstIPSubnet.space,
 * });
 * ```
 */
export function getIpSubnet(args: GetIpSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetIpSubnetResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solidserver:index/getIpSubnet:getIpSubnet", {
        "name": args.name,
        "space": args.space,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpSubnet.
 */
export interface GetIpSubnetArgs {
    /**
     * The name of the IP subnet.
     */
    name: string;
    /**
     * The space associated to the IP subnet.
     */
    space: string;
}

/**
 * A collection of values returned by getIpSubnet.
 */
export interface GetIpSubnetResult {
    /**
     * The IP subnet address.
     */
    readonly address: string;
    /**
     * The class associated to the IP subnet.
     */
    readonly class: string;
    /**
     * The class parameters associated to IP subnet.
     */
    readonly classParameters: {[key: string]: string};
    /**
     * The subnet's computed gateway.
     */
    readonly gateway: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the IP subnet.
     */
    readonly name: string;
    /**
     * The IP subnet netmask.
     */
    readonly netmask: string;
    /**
     * The IP subnet prefix.
     */
    readonly prefix: string;
    /**
     * The IP subnet's prefix length (ex: 24 for a '/24').
     */
    readonly prefixSize: number;
    /**
     * The space associated to the IP subnet.
     */
    readonly space: string;
    /**
     * The terminal property of the IP subnet.
     */
    readonly terminal: boolean;
    /**
     * The optional vlan ID associated with the subnet.
     */
    readonly vlanId: number;
}
/**
 * IP subnet data-source allows to retrieve information about reserved IPv4 subnets, including meta-data.
 * IP Subnet are key to organize the IP space, they can be blocks or subnets. Blocks reflect assigned IP
 * ranges (RFC1918 or public prefixes). Subnets reflect the internal sub-division of your network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstIPSubnetData = solidserver.getIpSubnet({
 *     name: solidserver_ip_subnet.myFirstIPSubnet.name,
 *     space: solidserver_ip_subnet.myFirstIPSubnet.space,
 * });
 * ```
 */
export function getIpSubnetOutput(args: GetIpSubnetOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetIpSubnetResult> {
    return pulumi.output(args).apply((a: any) => getIpSubnet(a, opts))
}

/**
 * A collection of arguments for invoking getIpSubnet.
 */
export interface GetIpSubnetOutputArgs {
    /**
     * The name of the IP subnet.
     */
    name: pulumi.Input<string>;
    /**
     * The space associated to the IP subnet.
     */
    space: pulumi.Input<string>;
}
