// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * DNS SMART resource allows to create and manage DNS SMART architectures,
 * SMART(s) are abstratc containers managing several DNS servers as a unique entity.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstDnsSMART = new solidserver.DnsSmart("myFirstDnsSMART", {
 *     allowQueries: [
 *         "172.16.0.0/12",
 *         "10.0.0.0/8",
 *         "192.168.0.0/24",
 *     ],
 *     allowRecursions: [
 *         "172.16.0.0/12",
 *         "10.0.0.0/8",
 *         "192.168.0.0/24",
 *     ],
 *     arch: "multimaster",
 *     comment: "My First DNS SMART Autmatically created",
 *     forward: "first",
 *     forwarders: [
 *         "10.0.0.42",
 *         "10.0.0.43",
 *     ],
 *     recursion: true,
 * });
 * ```
 */
export class DnsSmart extends pulumi.CustomResource {
    /**
     * Get an existing DnsSmart resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsSmartState, opts?: pulumi.CustomResourceOptions): DnsSmart {
        return new DnsSmart(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solidserver:index/dnsSmart:DnsSmart';

    /**
     * Returns true if the given object is an instance of DnsSmart.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsSmart {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsSmart.__pulumiType;
    }

    /**
     * A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    public readonly allowQueries!: pulumi.Output<string[] | undefined>;
    /**
     * A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    public readonly allowRecursions!: pulumi.Output<string[] | undefined>;
    /**
     * A list of network prefixes allowed to query the DNS erver for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    public readonly allowTransfers!: pulumi.Output<string[] | undefined>;
    /**
     * The DNS SMART architecture (Suported: multimaster, masterslave, single; Default: masterslave).
     */
    public readonly arch!: pulumi.Output<string | undefined>;
    /**
     * The class associated to the DNS SMART.
     */
    public readonly class!: pulumi.Output<string | undefined>;
    /**
     * The class parameters associated to the DNS SMART.
     */
    public readonly classParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Custom information about the DNS SMART.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
     */
    public readonly forward!: pulumi.Output<string | undefined>;
    /**
     * The IP address list of the forwarder(s) configured to configure on the DNS SMART.
     */
    public readonly forwarders!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the DNS SMART members.
     */
    public /*out*/ readonly members!: pulumi.Output<string[]>;
    /**
     * The name of the DNS SMART to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The recursion mode of the DNS SMART (Default: true).
     */
    public readonly recursion!: pulumi.Output<boolean | undefined>;

    /**
     * Create a DnsSmart resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DnsSmartArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsSmartArgs | DnsSmartState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsSmartState | undefined;
            resourceInputs["allowQueries"] = state ? state.allowQueries : undefined;
            resourceInputs["allowRecursions"] = state ? state.allowRecursions : undefined;
            resourceInputs["allowTransfers"] = state ? state.allowTransfers : undefined;
            resourceInputs["arch"] = state ? state.arch : undefined;
            resourceInputs["class"] = state ? state.class : undefined;
            resourceInputs["classParameters"] = state ? state.classParameters : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["forward"] = state ? state.forward : undefined;
            resourceInputs["forwarders"] = state ? state.forwarders : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["recursion"] = state ? state.recursion : undefined;
        } else {
            const args = argsOrState as DnsSmartArgs | undefined;
            resourceInputs["allowQueries"] = args ? args.allowQueries : undefined;
            resourceInputs["allowRecursions"] = args ? args.allowRecursions : undefined;
            resourceInputs["allowTransfers"] = args ? args.allowTransfers : undefined;
            resourceInputs["arch"] = args ? args.arch : undefined;
            resourceInputs["class"] = args ? args.class : undefined;
            resourceInputs["classParameters"] = args ? args.classParameters : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["forward"] = args ? args.forward : undefined;
            resourceInputs["forwarders"] = args ? args.forwarders : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["recursion"] = args ? args.recursion : undefined;
            resourceInputs["members"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsSmart.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsSmart resources.
 */
export interface DnsSmartState {
    /**
     * A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    allowQueries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    allowRecursions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of network prefixes allowed to query the DNS erver for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    allowTransfers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DNS SMART architecture (Suported: multimaster, masterslave, single; Default: masterslave).
     */
    arch?: pulumi.Input<string>;
    /**
     * The class associated to the DNS SMART.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the DNS SMART.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom information about the DNS SMART.
     */
    comment?: pulumi.Input<string>;
    /**
     * The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
     */
    forward?: pulumi.Input<string>;
    /**
     * The IP address list of the forwarder(s) configured to configure on the DNS SMART.
     */
    forwarders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the DNS SMART members.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the DNS SMART to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The recursion mode of the DNS SMART (Default: true).
     */
    recursion?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DnsSmart resource.
 */
export interface DnsSmartArgs {
    /**
     * A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    allowQueries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    allowRecursions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of network prefixes allowed to query the DNS erver for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
     */
    allowTransfers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DNS SMART architecture (Suported: multimaster, masterslave, single; Default: masterslave).
     */
    arch?: pulumi.Input<string>;
    /**
     * The class associated to the DNS SMART.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the DNS SMART.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Custom information about the DNS SMART.
     */
    comment?: pulumi.Input<string>;
    /**
     * The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
     */
    forward?: pulumi.Input<string>;
    /**
     * The IP address list of the forwarder(s) configured to configure on the DNS SMART.
     */
    forwarders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the DNS SMART to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The recursion mode of the DNS SMART (Default: true).
     */
    recursion?: pulumi.Input<boolean>;
}
