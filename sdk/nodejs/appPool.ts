// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Application Pool resource allows to create and manage a pool that implement a traffic policy.
 * Application Pools are groups of nodes serving the same application and monitored by the GSLB(s) DNS servers
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstPool = new solidserver.AppPool("myFirstPool", {
 *     application: solidserver_app_application.myFirstApplicaton.name,
 *     fqdn: solidserver_app_application.myFirstApplicaton.fqdn,
 *     lbMode: latency,
 *     affinity: true,
 *     affinitySessionDuration: 300,
 * });
 * ```
 */
export class AppPool extends pulumi.CustomResource {
    /**
     * Get an existing AppPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppPoolState, opts?: pulumi.CustomResourceOptions): AppPool {
        return new AppPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solidserver:index/appPool:AppPool';

    /**
     * Returns true if the given object is an instance of AppPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppPool.__pulumiType;
    }

    /**
     * Enable session affinity for the application pool.
     */
    public readonly affinity!: pulumi.Output<boolean | undefined>;
    /**
     * The time each session is maintained in sec (Default: 300).
     */
    public readonly affinitySessionDuration!: pulumi.Output<number | undefined>;
    /**
     * The name of the application associated to the pool.
     */
    public readonly application!: pulumi.Output<string>;
    /**
     * Number of best active nodes when lbMode is set to latency.
     */
    public readonly bestActiveNodes!: pulumi.Output<number | undefined>;
    /**
     * The fqdn of the application associated to the pool.
     */
    public readonly fqdn!: pulumi.Output<string>;
    /**
     * The IP protocol version used by the application pool to create (Supported: ipv4, ipv6; Default: ipv4).
     */
    public readonly ipVersion!: pulumi.Output<string | undefined>;
    /**
     * The load balancing mode of the application pool to create (Supported: weighted,round-robin,latency; Default: round-robin).
     */
    public readonly lbMode!: pulumi.Output<string | undefined>;
    /**
     * The name of the application pool to create.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a AppPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppPoolArgs | AppPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppPoolState | undefined;
            resourceInputs["affinity"] = state ? state.affinity : undefined;
            resourceInputs["affinitySessionDuration"] = state ? state.affinitySessionDuration : undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["bestActiveNodes"] = state ? state.bestActiveNodes : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["ipVersion"] = state ? state.ipVersion : undefined;
            resourceInputs["lbMode"] = state ? state.lbMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as AppPoolArgs | undefined;
            if ((!args || args.application === undefined) && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            resourceInputs["affinity"] = args ? args.affinity : undefined;
            resourceInputs["affinitySessionDuration"] = args ? args.affinitySessionDuration : undefined;
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["bestActiveNodes"] = args ? args.bestActiveNodes : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["ipVersion"] = args ? args.ipVersion : undefined;
            resourceInputs["lbMode"] = args ? args.lbMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppPool resources.
 */
export interface AppPoolState {
    /**
     * Enable session affinity for the application pool.
     */
    affinity?: pulumi.Input<boolean>;
    /**
     * The time each session is maintained in sec (Default: 300).
     */
    affinitySessionDuration?: pulumi.Input<number>;
    /**
     * The name of the application associated to the pool.
     */
    application?: pulumi.Input<string>;
    /**
     * Number of best active nodes when lbMode is set to latency.
     */
    bestActiveNodes?: pulumi.Input<number>;
    /**
     * The fqdn of the application associated to the pool.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * The IP protocol version used by the application pool to create (Supported: ipv4, ipv6; Default: ipv4).
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * The load balancing mode of the application pool to create (Supported: weighted,round-robin,latency; Default: round-robin).
     */
    lbMode?: pulumi.Input<string>;
    /**
     * The name of the application pool to create.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AppPool resource.
 */
export interface AppPoolArgs {
    /**
     * Enable session affinity for the application pool.
     */
    affinity?: pulumi.Input<boolean>;
    /**
     * The time each session is maintained in sec (Default: 300).
     */
    affinitySessionDuration?: pulumi.Input<number>;
    /**
     * The name of the application associated to the pool.
     */
    application: pulumi.Input<string>;
    /**
     * Number of best active nodes when lbMode is set to latency.
     */
    bestActiveNodes?: pulumi.Input<number>;
    /**
     * The fqdn of the application associated to the pool.
     */
    fqdn: pulumi.Input<string>;
    /**
     * The IP protocol version used by the application pool to create (Supported: ipv4, ipv6; Default: ipv4).
     */
    ipVersion?: pulumi.Input<string>;
    /**
     * The load balancing mode of the application pool to create (Supported: weighted,round-robin,latency; Default: round-robin).
     */
    lbMode?: pulumi.Input<string>;
    /**
     * The name of the application pool to create.
     */
    name?: pulumi.Input<string>;
}
