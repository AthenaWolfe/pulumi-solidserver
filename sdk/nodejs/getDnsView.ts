// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * DNS view data-source allows to retrieve information about DNS views.
 * View(s) are virutal containers mostly used to implement DNS split horizon
 * providing different answers depending on matching criterias.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const dnsViewData = solidserver.getDnsView({
 *     dnsserver: "ns.local",
 *     name: "testview",
 * });
 * ```
 */
export function getDnsView(args: GetDnsViewArgs, opts?: pulumi.InvokeOptions): Promise<GetDnsViewResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("solidserver:index/getDnsView:getDnsView", {
        "dnsserver": args.dnsserver,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDnsView.
 */
export interface GetDnsViewArgs {
    /**
     * The name of DNS server or DNS SMART hosting the DNS view to create.
     */
    dnsserver: string;
    /**
     * The name of the DNS view.
     */
    name: string;
}

/**
 * A collection of values returned by getDnsView.
 */
export interface GetDnsViewResult {
    /**
     * A list of network prefixes allowed to query the DNS view (named ACL(s) are not supported using this provider).
     */
    readonly allowQueries: string[];
    /**
     * A list of network prefixes allowed to query the DNS view for recursion (named ACL(s) are not supported using this provider).
     */
    readonly allowRecursions: string[];
    /**
     * A list of network prefixes allowed to query the DNS view for zone transfert (named ACL(s) are not supported using this provider).
     */
    readonly allowTransfers: string[];
    /**
     * The class associated to the DNS view.
     */
    readonly class: string;
    /**
     * The class parameters associated to the DNS view.
     */
    readonly classParameters: {[key: string]: any};
    /**
     * The name of DNS server or DNS SMART hosting the DNS view to create.
     */
    readonly dnsserver: string;
    /**
     * The forwarding mode of the DNS view (disabled if empty).
     */
    readonly forward: string;
    /**
     * The IP address list of the forwarder(s) configured on the DNS view.
     */
    readonly forwarders: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).
     */
    readonly matchClients: string[];
    /**
     * A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).
     */
    readonly matchTos: string[];
    /**
     * The name of the DNS view.
     */
    readonly name: string;
    /**
     * The level of the DNS view, where 0 represents the highest level in the views hierarchy.
     */
    readonly order: string;
    /**
     * The recursion status of the DNS view.
     */
    readonly recursion: boolean;
}
/**
 * DNS view data-source allows to retrieve information about DNS views.
 * View(s) are virutal containers mostly used to implement DNS split horizon
 * providing different answers depending on matching criterias.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const dnsViewData = solidserver.getDnsView({
 *     dnsserver: "ns.local",
 *     name: "testview",
 * });
 * ```
 */
export function getDnsViewOutput(args: GetDnsViewOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDnsViewResult> {
    return pulumi.output(args).apply((a: any) => getDnsView(a, opts))
}

/**
 * A collection of arguments for invoking getDnsView.
 */
export interface GetDnsViewOutputArgs {
    /**
     * The name of DNS server or DNS SMART hosting the DNS view to create.
     */
    dnsserver: pulumi.Input<string>;
    /**
     * The name of the DNS view.
     */
    name: pulumi.Input<string>;
}
