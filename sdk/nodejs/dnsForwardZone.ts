// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * DNS Forward Zone resource allows to create and manage DNS forward zones.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstForwardZone = new solidserver.DnsForwardZone("myFirstForwardZone", {
 *     dnsserver: "ns.priv",
 *     forward: "first",
 *     forwarders: [
 *         "10.10.8.8",
 *         "10.10.4.4",
 *     ],
 * });
 * ```
 */
export class DnsForwardZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsForwardZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsForwardZoneState, opts?: pulumi.CustomResourceOptions): DnsForwardZone {
        return new DnsForwardZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solidserver:index/dnsForwardZone:DnsForwardZone';

    /**
     * Returns true if the given object is an instance of DnsForwardZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsForwardZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsForwardZone.__pulumiType;
    }

    /**
     * The class associated to the forward zone.
     */
    public readonly class!: pulumi.Output<string | undefined>;
    /**
     * The class parameters associated to the forward zone.
     */
    public readonly classParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The managed SMART DNS server name, or DNS server name hosting the forward zone.
     */
    public readonly dnsserver!: pulumi.Output<string>;
    /**
     * The DNS view name hosting the forward zone.
     */
    public readonly dnsview!: pulumi.Output<string | undefined>;
    /**
     * The forwarding mode of the forward zone (Supported: only, first; Default: only).
     */
    public readonly forward!: pulumi.Output<string | undefined>;
    /**
     * The IP address list of the forwarder(s) to use for the forward zone.
     */
    public readonly forwarders!: pulumi.Output<string[] | undefined>;
    /**
     * The Domain Name served by the forward zone.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a DnsForwardZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsForwardZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsForwardZoneArgs | DnsForwardZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsForwardZoneState | undefined;
            resourceInputs["class"] = state ? state.class : undefined;
            resourceInputs["classParameters"] = state ? state.classParameters : undefined;
            resourceInputs["dnsserver"] = state ? state.dnsserver : undefined;
            resourceInputs["dnsview"] = state ? state.dnsview : undefined;
            resourceInputs["forward"] = state ? state.forward : undefined;
            resourceInputs["forwarders"] = state ? state.forwarders : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DnsForwardZoneArgs | undefined;
            if ((!args || args.dnsserver === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsserver'");
            }
            resourceInputs["class"] = args ? args.class : undefined;
            resourceInputs["classParameters"] = args ? args.classParameters : undefined;
            resourceInputs["dnsserver"] = args ? args.dnsserver : undefined;
            resourceInputs["dnsview"] = args ? args.dnsview : undefined;
            resourceInputs["forward"] = args ? args.forward : undefined;
            resourceInputs["forwarders"] = args ? args.forwarders : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsForwardZone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsForwardZone resources.
 */
export interface DnsForwardZoneState {
    /**
     * The class associated to the forward zone.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the forward zone.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The managed SMART DNS server name, or DNS server name hosting the forward zone.
     */
    dnsserver?: pulumi.Input<string>;
    /**
     * The DNS view name hosting the forward zone.
     */
    dnsview?: pulumi.Input<string>;
    /**
     * The forwarding mode of the forward zone (Supported: only, first; Default: only).
     */
    forward?: pulumi.Input<string>;
    /**
     * The IP address list of the forwarder(s) to use for the forward zone.
     */
    forwarders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Domain Name served by the forward zone.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsForwardZone resource.
 */
export interface DnsForwardZoneArgs {
    /**
     * The class associated to the forward zone.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the forward zone.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The managed SMART DNS server name, or DNS server name hosting the forward zone.
     */
    dnsserver: pulumi.Input<string>;
    /**
     * The DNS view name hosting the forward zone.
     */
    dnsview?: pulumi.Input<string>;
    /**
     * The forwarding mode of the forward zone (Supported: only, first; Default: only).
     */
    forward?: pulumi.Input<string>;
    /**
     * The IP address list of the forwarder(s) to use for the forward zone.
     */
    forwarders?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Domain Name served by the forward zone.
     */
    name?: pulumi.Input<string>;
}
