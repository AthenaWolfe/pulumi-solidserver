// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AppApplicationArgs, AppApplicationState } from "./appApplication";
export type AppApplication = import("./appApplication").AppApplication;
export const AppApplication: typeof import("./appApplication").AppApplication = null as any;
utilities.lazyLoad(exports, ["AppApplication"], () => require("./appApplication"));

export { AppNodeArgs, AppNodeState } from "./appNode";
export type AppNode = import("./appNode").AppNode;
export const AppNode: typeof import("./appNode").AppNode = null as any;
utilities.lazyLoad(exports, ["AppNode"], () => require("./appNode"));

export { AppPoolArgs, AppPoolState } from "./appPool";
export type AppPool = import("./appPool").AppPool;
export const AppPool: typeof import("./appPool").AppPool = null as any;
utilities.lazyLoad(exports, ["AppPool"], () => require("./appPool"));

export { CdbArgs, CdbState } from "./cdb";
export type Cdb = import("./cdb").Cdb;
export const Cdb: typeof import("./cdb").Cdb = null as any;
utilities.lazyLoad(exports, ["Cdb"], () => require("./cdb"));

export { CdbDataArgs, CdbDataState } from "./cdbData";
export type CdbData = import("./cdbData").CdbData;
export const CdbData: typeof import("./cdbData").CdbData = null as any;
utilities.lazyLoad(exports, ["CdbData"], () => require("./cdbData"));

export { DeviceArgs, DeviceState } from "./device";
export type Device = import("./device").Device;
export const Device: typeof import("./device").Device = null as any;
utilities.lazyLoad(exports, ["Device"], () => require("./device"));

export { DnsForwardZoneArgs, DnsForwardZoneState } from "./dnsForwardZone";
export type DnsForwardZone = import("./dnsForwardZone").DnsForwardZone;
export const DnsForwardZone: typeof import("./dnsForwardZone").DnsForwardZone = null as any;
utilities.lazyLoad(exports, ["DnsForwardZone"], () => require("./dnsForwardZone"));

export { DnsRrArgs, DnsRrState } from "./dnsRr";
export type DnsRr = import("./dnsRr").DnsRr;
export const DnsRr: typeof import("./dnsRr").DnsRr = null as any;
utilities.lazyLoad(exports, ["DnsRr"], () => require("./dnsRr"));

export { DnsServerArgs, DnsServerState } from "./dnsServer";
export type DnsServer = import("./dnsServer").DnsServer;
export const DnsServer: typeof import("./dnsServer").DnsServer = null as any;
utilities.lazyLoad(exports, ["DnsServer"], () => require("./dnsServer"));

export { DnsSmartArgs, DnsSmartState } from "./dnsSmart";
export type DnsSmart = import("./dnsSmart").DnsSmart;
export const DnsSmart: typeof import("./dnsSmart").DnsSmart = null as any;
utilities.lazyLoad(exports, ["DnsSmart"], () => require("./dnsSmart"));

export { DnsViewArgs, DnsViewState } from "./dnsView";
export type DnsView = import("./dnsView").DnsView;
export const DnsView: typeof import("./dnsView").DnsView = null as any;
utilities.lazyLoad(exports, ["DnsView"], () => require("./dnsView"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { GetCdbArgs, GetCdbResult, GetCdbOutputArgs } from "./getCdb";
export const getCdb: typeof import("./getCdb").getCdb = null as any;
export const getCdbOutput: typeof import("./getCdb").getCdbOutput = null as any;
utilities.lazyLoad(exports, ["getCdb","getCdbOutput"], () => require("./getCdb"));

export { GetCdbDataArgs, GetCdbDataResult, GetCdbDataOutputArgs } from "./getCdbData";
export const getCdbData: typeof import("./getCdbData").getCdbData = null as any;
export const getCdbDataOutput: typeof import("./getCdbData").getCdbDataOutput = null as any;
utilities.lazyLoad(exports, ["getCdbData","getCdbDataOutput"], () => require("./getCdbData"));

export { GetDnsServerArgs, GetDnsServerResult, GetDnsServerOutputArgs } from "./getDnsServer";
export const getDnsServer: typeof import("./getDnsServer").getDnsServer = null as any;
export const getDnsServerOutput: typeof import("./getDnsServer").getDnsServerOutput = null as any;
utilities.lazyLoad(exports, ["getDnsServer","getDnsServerOutput"], () => require("./getDnsServer"));

export { GetDnsSmartArgs, GetDnsSmartResult, GetDnsSmartOutputArgs } from "./getDnsSmart";
export const getDnsSmart: typeof import("./getDnsSmart").getDnsSmart = null as any;
export const getDnsSmartOutput: typeof import("./getDnsSmart").getDnsSmartOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSmart","getDnsSmartOutput"], () => require("./getDnsSmart"));

export { GetDnsViewArgs, GetDnsViewResult, GetDnsViewOutputArgs } from "./getDnsView";
export const getDnsView: typeof import("./getDnsView").getDnsView = null as any;
export const getDnsViewOutput: typeof import("./getDnsView").getDnsViewOutput = null as any;
utilities.lazyLoad(exports, ["getDnsView","getDnsViewOutput"], () => require("./getDnsView"));

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));

export { GetIp6AddressArgs, GetIp6AddressResult, GetIp6AddressOutputArgs } from "./getIp6Address";
export const getIp6Address: typeof import("./getIp6Address").getIp6Address = null as any;
export const getIp6AddressOutput: typeof import("./getIp6Address").getIp6AddressOutput = null as any;
utilities.lazyLoad(exports, ["getIp6Address","getIp6AddressOutput"], () => require("./getIp6Address"));

export { GetIp6PoolArgs, GetIp6PoolResult, GetIp6PoolOutputArgs } from "./getIp6Pool";
export const getIp6Pool: typeof import("./getIp6Pool").getIp6Pool = null as any;
export const getIp6PoolOutput: typeof import("./getIp6Pool").getIp6PoolOutput = null as any;
utilities.lazyLoad(exports, ["getIp6Pool","getIp6PoolOutput"], () => require("./getIp6Pool"));

export { GetIp6PtrArgs, GetIp6PtrResult, GetIp6PtrOutputArgs } from "./getIp6Ptr";
export const getIp6Ptr: typeof import("./getIp6Ptr").getIp6Ptr = null as any;
export const getIp6PtrOutput: typeof import("./getIp6Ptr").getIp6PtrOutput = null as any;
utilities.lazyLoad(exports, ["getIp6Ptr","getIp6PtrOutput"], () => require("./getIp6Ptr"));

export { GetIp6SubnetArgs, GetIp6SubnetResult, GetIp6SubnetOutputArgs } from "./getIp6Subnet";
export const getIp6Subnet: typeof import("./getIp6Subnet").getIp6Subnet = null as any;
export const getIp6SubnetOutput: typeof import("./getIp6Subnet").getIp6SubnetOutput = null as any;
utilities.lazyLoad(exports, ["getIp6Subnet","getIp6SubnetOutput"], () => require("./getIp6Subnet"));

export { GetIp6SubnetQueryArgs, GetIp6SubnetQueryResult, GetIp6SubnetQueryOutputArgs } from "./getIp6SubnetQuery";
export const getIp6SubnetQuery: typeof import("./getIp6SubnetQuery").getIp6SubnetQuery = null as any;
export const getIp6SubnetQueryOutput: typeof import("./getIp6SubnetQuery").getIp6SubnetQueryOutput = null as any;
utilities.lazyLoad(exports, ["getIp6SubnetQuery","getIp6SubnetQueryOutput"], () => require("./getIp6SubnetQuery"));

export { GetIpAddressArgs, GetIpAddressResult, GetIpAddressOutputArgs } from "./getIpAddress";
export const getIpAddress: typeof import("./getIpAddress").getIpAddress = null as any;
export const getIpAddressOutput: typeof import("./getIpAddress").getIpAddressOutput = null as any;
utilities.lazyLoad(exports, ["getIpAddress","getIpAddressOutput"], () => require("./getIpAddress"));

export { GetIpPoolArgs, GetIpPoolResult, GetIpPoolOutputArgs } from "./getIpPool";
export const getIpPool: typeof import("./getIpPool").getIpPool = null as any;
export const getIpPoolOutput: typeof import("./getIpPool").getIpPoolOutput = null as any;
utilities.lazyLoad(exports, ["getIpPool","getIpPoolOutput"], () => require("./getIpPool"));

export { GetIpPtrArgs, GetIpPtrResult, GetIpPtrOutputArgs } from "./getIpPtr";
export const getIpPtr: typeof import("./getIpPtr").getIpPtr = null as any;
export const getIpPtrOutput: typeof import("./getIpPtr").getIpPtrOutput = null as any;
utilities.lazyLoad(exports, ["getIpPtr","getIpPtrOutput"], () => require("./getIpPtr"));

export { GetIpSpaceArgs, GetIpSpaceResult, GetIpSpaceOutputArgs } from "./getIpSpace";
export const getIpSpace: typeof import("./getIpSpace").getIpSpace = null as any;
export const getIpSpaceOutput: typeof import("./getIpSpace").getIpSpaceOutput = null as any;
utilities.lazyLoad(exports, ["getIpSpace","getIpSpaceOutput"], () => require("./getIpSpace"));

export { GetIpSubnetArgs, GetIpSubnetResult, GetIpSubnetOutputArgs } from "./getIpSubnet";
export const getIpSubnet: typeof import("./getIpSubnet").getIpSubnet = null as any;
export const getIpSubnetOutput: typeof import("./getIpSubnet").getIpSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getIpSubnet","getIpSubnetOutput"], () => require("./getIpSubnet"));

export { GetIpSubnetQueryArgs, GetIpSubnetQueryResult, GetIpSubnetQueryOutputArgs } from "./getIpSubnetQuery";
export const getIpSubnetQuery: typeof import("./getIpSubnetQuery").getIpSubnetQuery = null as any;
export const getIpSubnetQueryOutput: typeof import("./getIpSubnetQuery").getIpSubnetQueryOutput = null as any;
utilities.lazyLoad(exports, ["getIpSubnetQuery","getIpSubnetQueryOutput"], () => require("./getIpSubnetQuery"));

export { GetUsergroupArgs, GetUsergroupResult, GetUsergroupOutputArgs } from "./getUsergroup";
export const getUsergroup: typeof import("./getUsergroup").getUsergroup = null as any;
export const getUsergroupOutput: typeof import("./getUsergroup").getUsergroupOutput = null as any;
utilities.lazyLoad(exports, ["getUsergroup","getUsergroupOutput"], () => require("./getUsergroup"));

export { GetVlanArgs, GetVlanResult, GetVlanOutputArgs } from "./getVlan";
export const getVlan: typeof import("./getVlan").getVlan = null as any;
export const getVlanOutput: typeof import("./getVlan").getVlanOutput = null as any;
utilities.lazyLoad(exports, ["getVlan","getVlanOutput"], () => require("./getVlan"));

export { GetVlanDomainArgs, GetVlanDomainResult, GetVlanDomainOutputArgs } from "./getVlanDomain";
export const getVlanDomain: typeof import("./getVlanDomain").getVlanDomain = null as any;
export const getVlanDomainOutput: typeof import("./getVlanDomain").getVlanDomainOutput = null as any;
utilities.lazyLoad(exports, ["getVlanDomain","getVlanDomainOutput"], () => require("./getVlanDomain"));

export { GetVlanRangeArgs, GetVlanRangeResult, GetVlanRangeOutputArgs } from "./getVlanRange";
export const getVlanRange: typeof import("./getVlanRange").getVlanRange = null as any;
export const getVlanRangeOutput: typeof import("./getVlanRange").getVlanRangeOutput = null as any;
utilities.lazyLoad(exports, ["getVlanRange","getVlanRangeOutput"], () => require("./getVlanRange"));

export { Ip6AddressArgs, Ip6AddressState } from "./ip6Address";
export type Ip6Address = import("./ip6Address").Ip6Address;
export const Ip6Address: typeof import("./ip6Address").Ip6Address = null as any;
utilities.lazyLoad(exports, ["Ip6Address"], () => require("./ip6Address"));

export { Ip6AliasArgs, Ip6AliasState } from "./ip6Alias";
export type Ip6Alias = import("./ip6Alias").Ip6Alias;
export const Ip6Alias: typeof import("./ip6Alias").Ip6Alias = null as any;
utilities.lazyLoad(exports, ["Ip6Alias"], () => require("./ip6Alias"));

export { Ip6MacArgs, Ip6MacState } from "./ip6Mac";
export type Ip6Mac = import("./ip6Mac").Ip6Mac;
export const Ip6Mac: typeof import("./ip6Mac").Ip6Mac = null as any;
utilities.lazyLoad(exports, ["Ip6Mac"], () => require("./ip6Mac"));

export { Ip6PoolArgs, Ip6PoolState } from "./ip6Pool";
export type Ip6Pool = import("./ip6Pool").Ip6Pool;
export const Ip6Pool: typeof import("./ip6Pool").Ip6Pool = null as any;
utilities.lazyLoad(exports, ["Ip6Pool"], () => require("./ip6Pool"));

export { Ip6SubnetArgs, Ip6SubnetState } from "./ip6Subnet";
export type Ip6Subnet = import("./ip6Subnet").Ip6Subnet;
export const Ip6Subnet: typeof import("./ip6Subnet").Ip6Subnet = null as any;
utilities.lazyLoad(exports, ["Ip6Subnet"], () => require("./ip6Subnet"));

export { IpAddressArgs, IpAddressState } from "./ipAddress";
export type IpAddress = import("./ipAddress").IpAddress;
export const IpAddress: typeof import("./ipAddress").IpAddress = null as any;
utilities.lazyLoad(exports, ["IpAddress"], () => require("./ipAddress"));

export { IpAliasArgs, IpAliasState } from "./ipAlias";
export type IpAlias = import("./ipAlias").IpAlias;
export const IpAlias: typeof import("./ipAlias").IpAlias = null as any;
utilities.lazyLoad(exports, ["IpAlias"], () => require("./ipAlias"));

export { IpMacArgs, IpMacState } from "./ipMac";
export type IpMac = import("./ipMac").IpMac;
export const IpMac: typeof import("./ipMac").IpMac = null as any;
utilities.lazyLoad(exports, ["IpMac"], () => require("./ipMac"));

export { IpPoolArgs, IpPoolState } from "./ipPool";
export type IpPool = import("./ipPool").IpPool;
export const IpPool: typeof import("./ipPool").IpPool = null as any;
utilities.lazyLoad(exports, ["IpPool"], () => require("./ipPool"));

export { IpSpaceArgs, IpSpaceState } from "./ipSpace";
export type IpSpace = import("./ipSpace").IpSpace;
export const IpSpace: typeof import("./ipSpace").IpSpace = null as any;
utilities.lazyLoad(exports, ["IpSpace"], () => require("./ipSpace"));

export { IpSubnetArgs, IpSubnetState } from "./ipSubnet";
export type IpSubnet = import("./ipSubnet").IpSubnet;
export const IpSubnet: typeof import("./ipSubnet").IpSubnet = null as any;
utilities.lazyLoad(exports, ["IpSubnet"], () => require("./ipSubnet"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UsergroupArgs, UsergroupState } from "./usergroup";
export type Usergroup = import("./usergroup").Usergroup;
export const Usergroup: typeof import("./usergroup").Usergroup = null as any;
utilities.lazyLoad(exports, ["Usergroup"], () => require("./usergroup"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VlanDomainArgs, VlanDomainState } from "./vlanDomain";
export type VlanDomain = import("./vlanDomain").VlanDomain;
export const VlanDomain: typeof import("./vlanDomain").VlanDomain = null as any;
utilities.lazyLoad(exports, ["VlanDomain"], () => require("./vlanDomain"));

export { VlanRangeArgs, VlanRangeState } from "./vlanRange";
export type VlanRange = import("./vlanRange").VlanRange;
export const VlanRange: typeof import("./vlanRange").VlanRange = null as any;
utilities.lazyLoad(exports, ["VlanRange"], () => require("./vlanRange"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "solidserver:index/appApplication:AppApplication":
                return new AppApplication(name, <any>undefined, { urn })
            case "solidserver:index/appNode:AppNode":
                return new AppNode(name, <any>undefined, { urn })
            case "solidserver:index/appPool:AppPool":
                return new AppPool(name, <any>undefined, { urn })
            case "solidserver:index/cdb:Cdb":
                return new Cdb(name, <any>undefined, { urn })
            case "solidserver:index/cdbData:CdbData":
                return new CdbData(name, <any>undefined, { urn })
            case "solidserver:index/device:Device":
                return new Device(name, <any>undefined, { urn })
            case "solidserver:index/dnsForwardZone:DnsForwardZone":
                return new DnsForwardZone(name, <any>undefined, { urn })
            case "solidserver:index/dnsRr:DnsRr":
                return new DnsRr(name, <any>undefined, { urn })
            case "solidserver:index/dnsServer:DnsServer":
                return new DnsServer(name, <any>undefined, { urn })
            case "solidserver:index/dnsSmart:DnsSmart":
                return new DnsSmart(name, <any>undefined, { urn })
            case "solidserver:index/dnsView:DnsView":
                return new DnsView(name, <any>undefined, { urn })
            case "solidserver:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "solidserver:index/ip6Address:Ip6Address":
                return new Ip6Address(name, <any>undefined, { urn })
            case "solidserver:index/ip6Alias:Ip6Alias":
                return new Ip6Alias(name, <any>undefined, { urn })
            case "solidserver:index/ip6Mac:Ip6Mac":
                return new Ip6Mac(name, <any>undefined, { urn })
            case "solidserver:index/ip6Pool:Ip6Pool":
                return new Ip6Pool(name, <any>undefined, { urn })
            case "solidserver:index/ip6Subnet:Ip6Subnet":
                return new Ip6Subnet(name, <any>undefined, { urn })
            case "solidserver:index/ipAddress:IpAddress":
                return new IpAddress(name, <any>undefined, { urn })
            case "solidserver:index/ipAlias:IpAlias":
                return new IpAlias(name, <any>undefined, { urn })
            case "solidserver:index/ipMac:IpMac":
                return new IpMac(name, <any>undefined, { urn })
            case "solidserver:index/ipPool:IpPool":
                return new IpPool(name, <any>undefined, { urn })
            case "solidserver:index/ipSpace:IpSpace":
                return new IpSpace(name, <any>undefined, { urn })
            case "solidserver:index/ipSubnet:IpSubnet":
                return new IpSubnet(name, <any>undefined, { urn })
            case "solidserver:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "solidserver:index/usergroup:Usergroup":
                return new Usergroup(name, <any>undefined, { urn })
            case "solidserver:index/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "solidserver:index/vlanDomain:VlanDomain":
                return new VlanDomain(name, <any>undefined, { urn })
            case "solidserver:index/vlanRange:VlanRange":
                return new VlanRange(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("solidserver", "index/appApplication", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/appNode", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/appPool", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/cdb", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/cdbData", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/device", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/dnsForwardZone", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/dnsRr", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/dnsServer", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/dnsSmart", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/dnsView", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ip6Address", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ip6Alias", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ip6Mac", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ip6Pool", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ip6Subnet", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ipAddress", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ipAlias", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ipMac", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ipPool", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ipSpace", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/ipSubnet", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/user", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/usergroup", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/vlan", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/vlanDomain", _module)
pulumi.runtime.registerResourceModule("solidserver", "index/vlanRange", _module)
pulumi.runtime.registerResourcePackage("solidserver", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:solidserver") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
