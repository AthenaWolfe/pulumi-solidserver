// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Application Node resource allow to create and manage application endpoints that are monitored by the GSLB DNS servers
 * associated with the application, in order to route related traffic according to the selected loadbalancing strategy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstNode = new solidserver.AppNode("myFirstNode", {
 *     address: "127.0.0.1",
 *     application: solidserver_app_application.myFirstApplicaton.name,
 *     fqdn: solidserver_app_application.myFirstApplicaton.fqdn,
 *     healthcheck: "tcp",
 *     healthcheckParameters: {
 *         tcp_port: "443",
 *     },
 *     pool: solidserver_app_pool.myFirstPool.name,
 *     weight: 1,
 * });
 * ```
 * ## Supported HealthCheck(s)
 *
 * |Healtcheck|Parameter|Supported Values|
 * |----------|---------|----------------|
 * |tcp|tcp_port|Any value between 1 and 65535.|
 * |http|http_host|The SNI hostname to look for.|
 * |http|http_port|Any value between 1 and 65535.|
 * |http|http_path|The URL path to look for.|
 * |http|http_ssl|Use 0 (disable) or 1 (enable) for HTTPS connection.|
 * |http|http_status_code|The HTTP status code to expect.|
 * |http|http_lookup_string|A string the must be included in the answer payload.|
 * |http|http_basic_auth|HTTP basic auth header (user:password).|
 * |http|http_ssl_verify|Use 0 or 1 to activate ssl certificate checks.|
 */
export class AppNode extends pulumi.CustomResource {
    /**
     * Get an existing AppNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppNodeState, opts?: pulumi.CustomResourceOptions): AppNode {
        return new AppNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solidserver:index/appNode:AppNode';

    /**
     * Returns true if the given object is an instance of AppNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppNode.__pulumiType;
    }

    /**
     * The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * The name of the application associated to the node.
     */
    public readonly application!: pulumi.Output<string>;
    /**
     * The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
     */
    public readonly failbackThreshold!: pulumi.Output<number | undefined>;
    /**
     * The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
     */
    public readonly failureThreshold!: pulumi.Output<number | undefined>;
    /**
     * The fqdn of the application associated to the node.
     */
    public readonly fqdn!: pulumi.Output<string>;
    /**
     * The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
     */
    public readonly healthcheck!: pulumi.Output<string | undefined>;
    /**
     * The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
     */
    public readonly healthcheckFrequency!: pulumi.Output<number | undefined>;
    /**
     * The healthcheck parameters.
     */
    public readonly healthcheckParameters!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
     */
    public readonly healthcheckTimeout!: pulumi.Output<number | undefined>;
    /**
     * The name of the application node to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the application pool associated to the node.
     */
    public readonly pool!: pulumi.Output<string>;
    /**
     * The weight of the application node to create.
     */
    public readonly weight!: pulumi.Output<number | undefined>;

    /**
     * Create a AppNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AppNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppNodeArgs | AppNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppNodeState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["application"] = state ? state.application : undefined;
            resourceInputs["failbackThreshold"] = state ? state.failbackThreshold : undefined;
            resourceInputs["failureThreshold"] = state ? state.failureThreshold : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["healthcheck"] = state ? state.healthcheck : undefined;
            resourceInputs["healthcheckFrequency"] = state ? state.healthcheckFrequency : undefined;
            resourceInputs["healthcheckParameters"] = state ? state.healthcheckParameters : undefined;
            resourceInputs["healthcheckTimeout"] = state ? state.healthcheckTimeout : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pool"] = state ? state.pool : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        } else {
            const args = argsOrState as AppNodeArgs | undefined;
            if ((!args || args.application === undefined) && !opts.urn) {
                throw new Error("Missing required property 'application'");
            }
            if ((!args || args.fqdn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fqdn'");
            }
            if ((!args || args.pool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pool'");
            }
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["application"] = args ? args.application : undefined;
            resourceInputs["failbackThreshold"] = args ? args.failbackThreshold : undefined;
            resourceInputs["failureThreshold"] = args ? args.failureThreshold : undefined;
            resourceInputs["fqdn"] = args ? args.fqdn : undefined;
            resourceInputs["healthcheck"] = args ? args.healthcheck : undefined;
            resourceInputs["healthcheckFrequency"] = args ? args.healthcheckFrequency : undefined;
            resourceInputs["healthcheckParameters"] = args ? args.healthcheckParameters : undefined;
            resourceInputs["healthcheckTimeout"] = args ? args.healthcheckTimeout : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pool"] = args ? args.pool : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppNode resources.
 */
export interface AppNodeState {
    /**
     * The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the application associated to the node.
     */
    application?: pulumi.Input<string>;
    /**
     * The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
     */
    failbackThreshold?: pulumi.Input<number>;
    /**
     * The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * The fqdn of the application associated to the node.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
     */
    healthcheck?: pulumi.Input<string>;
    /**
     * The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
     */
    healthcheckFrequency?: pulumi.Input<number>;
    /**
     * The healthcheck parameters.
     */
    healthcheckParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
     */
    healthcheckTimeout?: pulumi.Input<number>;
    /**
     * The name of the application node to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the application pool associated to the node.
     */
    pool?: pulumi.Input<string>;
    /**
     * The weight of the application node to create.
     */
    weight?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AppNode resource.
 */
export interface AppNodeArgs {
    /**
     * The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the application associated to the node.
     */
    application: pulumi.Input<string>;
    /**
     * The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
     */
    failbackThreshold?: pulumi.Input<number>;
    /**
     * The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
     */
    failureThreshold?: pulumi.Input<number>;
    /**
     * The fqdn of the application associated to the node.
     */
    fqdn: pulumi.Input<string>;
    /**
     * The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
     */
    healthcheck?: pulumi.Input<string>;
    /**
     * The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
     */
    healthcheckFrequency?: pulumi.Input<number>;
    /**
     * The healthcheck parameters.
     */
    healthcheckParameters?: pulumi.Input<{[key: string]: any}>;
    /**
     * The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
     */
    healthcheckTimeout?: pulumi.Input<number>;
    /**
     * The name of the application node to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the application pool associated to the node.
     */
    pool: pulumi.Input<string>;
    /**
     * The weight of the application node to create.
     */
    weight?: pulumi.Input<number>;
}
