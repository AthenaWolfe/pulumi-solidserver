// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * IP Subnet resource allows to create and manage IPAM networks that are key to organize the IP space
 * Subnet can be blocks or subnets. Blocks reflect the assigned IP ranges (RFC1918 or public prefixes).
 * Subnets reflect the internal sub-division of your network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstIPBlock = new solidserver.IpSubnet("myFirstIPBlock", {
 *     prefixSize: 8,
 *     requestIp: "10.0.0.0",
 *     space: solidserver_ip_space.myFirstSpace.name,
 *     terminal: false,
 * });
 * const myFirstIPSubnet = new solidserver.IpSubnet("myFirstIPSubnet", {
 *     block: myFirstIPBlock.name,
 *     "class": "VIRTUAL",
 *     classParameters: {
 *         vnid: "12666",
 *     },
 *     gatewayOffset: -1,
 *     prefixSize: 24,
 *     space: solidserver_ip_space.myFirstSpace.name,
 * });
 * ```
 */
export class IpSubnet extends pulumi.CustomResource {
    /**
     * Get an existing IpSubnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpSubnetState, opts?: pulumi.CustomResourceOptions): IpSubnet {
        return new IpSubnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solidserver:index/ipSubnet:IpSubnet';

    /**
     * Returns true if the given object is an instance of IpSubnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpSubnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpSubnet.__pulumiType;
    }

    /**
     * The provisionned IP network address.
     */
    public /*out*/ readonly address!: pulumi.Output<string>;
    /**
     * The name of the parent IP block/subnet into which creating the IP subnet.
     */
    public readonly block!: pulumi.Output<string | undefined>;
    /**
     * The class associated to the IP subnet.
     */
    public readonly class!: pulumi.Output<string | undefined>;
    /**
     * The class parameters associated to the IP subnet.
     */
    public readonly classParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The subnet's computed gateway.
     */
    public /*out*/ readonly gateway!: pulumi.Output<string>;
    /**
     * Offset for creating the gateway. Default is 0 (No gateway).
     */
    public readonly gatewayOffset!: pulumi.Output<number | undefined>;
    /**
     * The name of the IP subnet to create.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The provisionned IP address netmask.
     */
    public /*out*/ readonly netmask!: pulumi.Output<string>;
    /**
     * The provisionned IP prefix.
     */
    public /*out*/ readonly prefix!: pulumi.Output<string>;
    /**
     * The expected IP subnet's prefix length (ex: 24 for a '/24').
     */
    public readonly prefixSize!: pulumi.Output<number>;
    /**
     * The optionally requested subnet IP address.
     */
    public readonly requestIp!: pulumi.Output<string | undefined>;
    /**
     * The name of the space into which creating the subnet.
     */
    public readonly space!: pulumi.Output<string>;
    /**
     * The terminal property of the IP subnet.
     */
    public readonly terminal!: pulumi.Output<boolean | undefined>;

    /**
     * Create a IpSubnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpSubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpSubnetArgs | IpSubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpSubnetState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["block"] = state ? state.block : undefined;
            resourceInputs["class"] = state ? state.class : undefined;
            resourceInputs["classParameters"] = state ? state.classParameters : undefined;
            resourceInputs["gateway"] = state ? state.gateway : undefined;
            resourceInputs["gatewayOffset"] = state ? state.gatewayOffset : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netmask"] = state ? state.netmask : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["prefixSize"] = state ? state.prefixSize : undefined;
            resourceInputs["requestIp"] = state ? state.requestIp : undefined;
            resourceInputs["space"] = state ? state.space : undefined;
            resourceInputs["terminal"] = state ? state.terminal : undefined;
        } else {
            const args = argsOrState as IpSubnetArgs | undefined;
            if ((!args || args.prefixSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'prefixSize'");
            }
            if ((!args || args.space === undefined) && !opts.urn) {
                throw new Error("Missing required property 'space'");
            }
            resourceInputs["block"] = args ? args.block : undefined;
            resourceInputs["class"] = args ? args.class : undefined;
            resourceInputs["classParameters"] = args ? args.classParameters : undefined;
            resourceInputs["gatewayOffset"] = args ? args.gatewayOffset : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["prefixSize"] = args ? args.prefixSize : undefined;
            resourceInputs["requestIp"] = args ? args.requestIp : undefined;
            resourceInputs["space"] = args ? args.space : undefined;
            resourceInputs["terminal"] = args ? args.terminal : undefined;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["gateway"] = undefined /*out*/;
            resourceInputs["netmask"] = undefined /*out*/;
            resourceInputs["prefix"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpSubnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpSubnet resources.
 */
export interface IpSubnetState {
    /**
     * The provisionned IP network address.
     */
    address?: pulumi.Input<string>;
    /**
     * The name of the parent IP block/subnet into which creating the IP subnet.
     */
    block?: pulumi.Input<string>;
    /**
     * The class associated to the IP subnet.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the IP subnet.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The subnet's computed gateway.
     */
    gateway?: pulumi.Input<string>;
    /**
     * Offset for creating the gateway. Default is 0 (No gateway).
     */
    gatewayOffset?: pulumi.Input<number>;
    /**
     * The name of the IP subnet to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The provisionned IP address netmask.
     */
    netmask?: pulumi.Input<string>;
    /**
     * The provisionned IP prefix.
     */
    prefix?: pulumi.Input<string>;
    /**
     * The expected IP subnet's prefix length (ex: 24 for a '/24').
     */
    prefixSize?: pulumi.Input<number>;
    /**
     * The optionally requested subnet IP address.
     */
    requestIp?: pulumi.Input<string>;
    /**
     * The name of the space into which creating the subnet.
     */
    space?: pulumi.Input<string>;
    /**
     * The terminal property of the IP subnet.
     */
    terminal?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a IpSubnet resource.
 */
export interface IpSubnetArgs {
    /**
     * The name of the parent IP block/subnet into which creating the IP subnet.
     */
    block?: pulumi.Input<string>;
    /**
     * The class associated to the IP subnet.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the IP subnet.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Offset for creating the gateway. Default is 0 (No gateway).
     */
    gatewayOffset?: pulumi.Input<number>;
    /**
     * The name of the IP subnet to create.
     */
    name?: pulumi.Input<string>;
    /**
     * The expected IP subnet's prefix length (ex: 24 for a '/24').
     */
    prefixSize: pulumi.Input<number>;
    /**
     * The optionally requested subnet IP address.
     */
    requestIp?: pulumi.Input<string>;
    /**
     * The name of the space into which creating the subnet.
     */
    space: pulumi.Input<string>;
    /**
     * The terminal property of the IP subnet.
     */
    terminal?: pulumi.Input<boolean>;
}
