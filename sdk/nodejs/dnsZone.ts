// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * DNS Zone resource allows to create and configure DNS zones.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as solidserver from "@pulumi/solidserver";
 *
 * const myFirstZone = new solidserver.DnsZone("myFirstZone", {
 *     createptr: false,
 *     dnsserver: "ns.priv",
 *     space: solidserver_ip_space.myFirstSpace.name,
 *     type: "master",
 * });
 * ```
 */
export class DnsZone extends pulumi.CustomResource {
    /**
     * Get an existing DnsZone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DnsZoneState, opts?: pulumi.CustomResourceOptions): DnsZone {
        return new DnsZone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'solidserver:index/dnsZone:DnsZone';

    /**
     * Returns true if the given object is an instance of DnsZone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DnsZone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DnsZone.__pulumiType;
    }

    /**
     * The list of IP addresses (Format \n\n:\n\n) that will receive zone change notifications in addition to the NS listed in the SOA
     */
    public readonly alsoNotifies!: pulumi.Output<string[] | undefined>;
    /**
     * The class associated to the zone.
     */
    public readonly class!: pulumi.Output<string | undefined>;
    /**
     * The class parameters associated to the zone.
     */
    public readonly classParameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Automaticaly create PTR records for the zone.
     */
    public readonly createptr!: pulumi.Output<boolean | undefined>;
    /**
     * The name of DNS server or DNS SMART hosting the DNS zone to create.
     */
    public readonly dnsserver!: pulumi.Output<string>;
    /**
     * The name of DNS view hosting the DNS zone to create.
     */
    public readonly dnsview!: pulumi.Output<string | undefined>;
    /**
     * The Domain Name to be hosted by the zone.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The expected notify behavior (Supported: empty (Inherited), Yes, No, Explicit; Default: empty (Inherited).
     */
    public readonly notify!: pulumi.Output<string | undefined>;
    /**
     * The name of a space associated to the zone.
     */
    public readonly space!: pulumi.Output<string | undefined>;
    /**
     * The type of the zone to create (Supported: Master).
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a DnsZone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DnsZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DnsZoneArgs | DnsZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DnsZoneState | undefined;
            resourceInputs["alsoNotifies"] = state ? state.alsoNotifies : undefined;
            resourceInputs["class"] = state ? state.class : undefined;
            resourceInputs["classParameters"] = state ? state.classParameters : undefined;
            resourceInputs["createptr"] = state ? state.createptr : undefined;
            resourceInputs["dnsserver"] = state ? state.dnsserver : undefined;
            resourceInputs["dnsview"] = state ? state.dnsview : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notify"] = state ? state.notify : undefined;
            resourceInputs["space"] = state ? state.space : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DnsZoneArgs | undefined;
            if ((!args || args.dnsserver === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsserver'");
            }
            resourceInputs["alsoNotifies"] = args ? args.alsoNotifies : undefined;
            resourceInputs["class"] = args ? args.class : undefined;
            resourceInputs["classParameters"] = args ? args.classParameters : undefined;
            resourceInputs["createptr"] = args ? args.createptr : undefined;
            resourceInputs["dnsserver"] = args ? args.dnsserver : undefined;
            resourceInputs["dnsview"] = args ? args.dnsview : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notify"] = args ? args.notify : undefined;
            resourceInputs["space"] = args ? args.space : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DnsZone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DnsZone resources.
 */
export interface DnsZoneState {
    /**
     * The list of IP addresses (Format \n\n:\n\n) that will receive zone change notifications in addition to the NS listed in the SOA
     */
    alsoNotifies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The class associated to the zone.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the zone.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Automaticaly create PTR records for the zone.
     */
    createptr?: pulumi.Input<boolean>;
    /**
     * The name of DNS server or DNS SMART hosting the DNS zone to create.
     */
    dnsserver?: pulumi.Input<string>;
    /**
     * The name of DNS view hosting the DNS zone to create.
     */
    dnsview?: pulumi.Input<string>;
    /**
     * The Domain Name to be hosted by the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The expected notify behavior (Supported: empty (Inherited), Yes, No, Explicit; Default: empty (Inherited).
     */
    notify?: pulumi.Input<string>;
    /**
     * The name of a space associated to the zone.
     */
    space?: pulumi.Input<string>;
    /**
     * The type of the zone to create (Supported: Master).
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DnsZone resource.
 */
export interface DnsZoneArgs {
    /**
     * The list of IP addresses (Format \n\n:\n\n) that will receive zone change notifications in addition to the NS listed in the SOA
     */
    alsoNotifies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The class associated to the zone.
     */
    class?: pulumi.Input<string>;
    /**
     * The class parameters associated to the zone.
     */
    classParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Automaticaly create PTR records for the zone.
     */
    createptr?: pulumi.Input<boolean>;
    /**
     * The name of DNS server or DNS SMART hosting the DNS zone to create.
     */
    dnsserver: pulumi.Input<string>;
    /**
     * The name of DNS view hosting the DNS zone to create.
     */
    dnsview?: pulumi.Input<string>;
    /**
     * The Domain Name to be hosted by the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The expected notify behavior (Supported: empty (Inherited), Yes, No, Explicit; Default: empty (Inherited).
     */
    notify?: pulumi.Input<string>;
    /**
     * The name of a space associated to the zone.
     */
    space?: pulumi.Input<string>;
    /**
     * The type of the zone to create (Supported: Master).
     */
    type?: pulumi.Input<string>;
}
