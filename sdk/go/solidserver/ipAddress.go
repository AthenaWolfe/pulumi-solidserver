// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IP address resource allows to create and manage reserved addresses for specific devices, apps or users.
// More importantly it allows to store useful meta-data for both tracking and automation purposes.
type IpAddress struct {
	pulumi.CustomResourceState

	// The provisionned IP address.
	Address pulumi.StringOutput `pulumi:"address"`
	// The class associated to the IP address.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the IP address.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// Device Name to associate with the IP address (Require a 'Device Manager' license).
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The MAC Address of the IP address to create.
	Mac pulumi.StringPtrOutput `pulumi:"mac"`
	// The short name or FQDN of the IP address to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the pool into which creating the IP address.
	Pool pulumi.StringPtrOutput `pulumi:"pool"`
	// The optionally requested IP address.
	RequestIp pulumi.StringPtrOutput `pulumi:"requestIp"`
	// The name of the space into which creating the IP address.
	Space pulumi.StringOutput `pulumi:"space"`
	// The name of the subnet into which creating the IP address.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
}

// NewIpAddress registers a new resource with the given unique name, arguments, and options.
func NewIpAddress(ctx *pulumi.Context,
	name string, args *IpAddressArgs, opts ...pulumi.ResourceOption) (*IpAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpAddress
	err := ctx.RegisterResource("solidserver:index/ipAddress:IpAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpAddress gets an existing IpAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpAddressState, opts ...pulumi.ResourceOption) (*IpAddress, error) {
	var resource IpAddress
	err := ctx.ReadResource("solidserver:index/ipAddress:IpAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpAddress resources.
type ipAddressState struct {
	// The provisionned IP address.
	Address *string `pulumi:"address"`
	// The class associated to the IP address.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IP address.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Device Name to associate with the IP address (Require a 'Device Manager' license).
	Device *string `pulumi:"device"`
	// The MAC Address of the IP address to create.
	Mac *string `pulumi:"mac"`
	// The short name or FQDN of the IP address to create.
	Name *string `pulumi:"name"`
	// The name of the pool into which creating the IP address.
	Pool *string `pulumi:"pool"`
	// The optionally requested IP address.
	RequestIp *string `pulumi:"requestIp"`
	// The name of the space into which creating the IP address.
	Space *string `pulumi:"space"`
	// The name of the subnet into which creating the IP address.
	Subnet *string `pulumi:"subnet"`
}

type IpAddressState struct {
	// The provisionned IP address.
	Address pulumi.StringPtrInput
	// The class associated to the IP address.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IP address.
	ClassParameters pulumi.StringMapInput
	// Device Name to associate with the IP address (Require a 'Device Manager' license).
	Device pulumi.StringPtrInput
	// The MAC Address of the IP address to create.
	Mac pulumi.StringPtrInput
	// The short name or FQDN of the IP address to create.
	Name pulumi.StringPtrInput
	// The name of the pool into which creating the IP address.
	Pool pulumi.StringPtrInput
	// The optionally requested IP address.
	RequestIp pulumi.StringPtrInput
	// The name of the space into which creating the IP address.
	Space pulumi.StringPtrInput
	// The name of the subnet into which creating the IP address.
	Subnet pulumi.StringPtrInput
}

func (IpAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAddressState)(nil)).Elem()
}

type ipAddressArgs struct {
	// The class associated to the IP address.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IP address.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Device Name to associate with the IP address (Require a 'Device Manager' license).
	Device *string `pulumi:"device"`
	// The MAC Address of the IP address to create.
	Mac *string `pulumi:"mac"`
	// The short name or FQDN of the IP address to create.
	Name *string `pulumi:"name"`
	// The name of the pool into which creating the IP address.
	Pool *string `pulumi:"pool"`
	// The optionally requested IP address.
	RequestIp *string `pulumi:"requestIp"`
	// The name of the space into which creating the IP address.
	Space string `pulumi:"space"`
	// The name of the subnet into which creating the IP address.
	Subnet string `pulumi:"subnet"`
}

// The set of arguments for constructing a IpAddress resource.
type IpAddressArgs struct {
	// The class associated to the IP address.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IP address.
	ClassParameters pulumi.StringMapInput
	// Device Name to associate with the IP address (Require a 'Device Manager' license).
	Device pulumi.StringPtrInput
	// The MAC Address of the IP address to create.
	Mac pulumi.StringPtrInput
	// The short name or FQDN of the IP address to create.
	Name pulumi.StringPtrInput
	// The name of the pool into which creating the IP address.
	Pool pulumi.StringPtrInput
	// The optionally requested IP address.
	RequestIp pulumi.StringPtrInput
	// The name of the space into which creating the IP address.
	Space pulumi.StringInput
	// The name of the subnet into which creating the IP address.
	Subnet pulumi.StringInput
}

func (IpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAddressArgs)(nil)).Elem()
}

type IpAddressInput interface {
	pulumi.Input

	ToIpAddressOutput() IpAddressOutput
	ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput
}

func (*IpAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (i *IpAddress) ToIpAddressOutput() IpAddressOutput {
	return i.ToIpAddressOutputWithContext(context.Background())
}

func (i *IpAddress) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressOutput)
}

// IpAddressArrayInput is an input type that accepts IpAddressArray and IpAddressArrayOutput values.
// You can construct a concrete instance of `IpAddressArrayInput` via:
//
//	IpAddressArray{ IpAddressArgs{...} }
type IpAddressArrayInput interface {
	pulumi.Input

	ToIpAddressArrayOutput() IpAddressArrayOutput
	ToIpAddressArrayOutputWithContext(context.Context) IpAddressArrayOutput
}

type IpAddressArray []IpAddressInput

func (IpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAddress)(nil)).Elem()
}

func (i IpAddressArray) ToIpAddressArrayOutput() IpAddressArrayOutput {
	return i.ToIpAddressArrayOutputWithContext(context.Background())
}

func (i IpAddressArray) ToIpAddressArrayOutputWithContext(ctx context.Context) IpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressArrayOutput)
}

// IpAddressMapInput is an input type that accepts IpAddressMap and IpAddressMapOutput values.
// You can construct a concrete instance of `IpAddressMapInput` via:
//
//	IpAddressMap{ "key": IpAddressArgs{...} }
type IpAddressMapInput interface {
	pulumi.Input

	ToIpAddressMapOutput() IpAddressMapOutput
	ToIpAddressMapOutputWithContext(context.Context) IpAddressMapOutput
}

type IpAddressMap map[string]IpAddressInput

func (IpAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAddress)(nil)).Elem()
}

func (i IpAddressMap) ToIpAddressMapOutput() IpAddressMapOutput {
	return i.ToIpAddressMapOutputWithContext(context.Background())
}

func (i IpAddressMap) ToIpAddressMapOutputWithContext(ctx context.Context) IpAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAddressMapOutput)
}

type IpAddressOutput struct{ *pulumi.OutputState }

func (IpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAddress)(nil)).Elem()
}

func (o IpAddressOutput) ToIpAddressOutput() IpAddressOutput {
	return o
}

func (o IpAddressOutput) ToIpAddressOutputWithContext(ctx context.Context) IpAddressOutput {
	return o
}

// The provisionned IP address.
func (o IpAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The class associated to the IP address.
func (o IpAddressOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the IP address.
func (o IpAddressOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// Device Name to associate with the IP address (Require a 'Device Manager' license).
func (o IpAddressOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The MAC Address of the IP address to create.
func (o IpAddressOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.Mac }).(pulumi.StringPtrOutput)
}

// The short name or FQDN of the IP address to create.
func (o IpAddressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the pool into which creating the IP address.
func (o IpAddressOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.Pool }).(pulumi.StringPtrOutput)
}

// The optionally requested IP address.
func (o IpAddressOutput) RequestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringPtrOutput { return v.RequestIp }).(pulumi.StringPtrOutput)
}

// The name of the space into which creating the IP address.
func (o IpAddressOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// The name of the subnet into which creating the IP address.
func (o IpAddressOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAddress) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

type IpAddressArrayOutput struct{ *pulumi.OutputState }

func (IpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAddress)(nil)).Elem()
}

func (o IpAddressArrayOutput) ToIpAddressArrayOutput() IpAddressArrayOutput {
	return o
}

func (o IpAddressArrayOutput) ToIpAddressArrayOutputWithContext(ctx context.Context) IpAddressArrayOutput {
	return o
}

func (o IpAddressArrayOutput) Index(i pulumi.IntInput) IpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpAddress {
		return vs[0].([]*IpAddress)[vs[1].(int)]
	}).(IpAddressOutput)
}

type IpAddressMapOutput struct{ *pulumi.OutputState }

func (IpAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAddress)(nil)).Elem()
}

func (o IpAddressMapOutput) ToIpAddressMapOutput() IpAddressMapOutput {
	return o
}

func (o IpAddressMapOutput) ToIpAddressMapOutputWithContext(ctx context.Context) IpAddressMapOutput {
	return o
}

func (o IpAddressMapOutput) MapIndex(k pulumi.StringInput) IpAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpAddress {
		return vs[0].(map[string]*IpAddress)[vs[1].(string)]
	}).(IpAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressInput)(nil)).Elem(), &IpAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressArrayInput)(nil)).Elem(), IpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAddressMapInput)(nil)).Elem(), IpAddressMap{})
	pulumi.RegisterOutputType(IpAddressOutput{})
	pulumi.RegisterOutputType(IpAddressArrayOutput{})
	pulumi.RegisterOutputType(IpAddressMapOutput{})
}
