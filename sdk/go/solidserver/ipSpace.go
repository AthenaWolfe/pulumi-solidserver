// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Space resource allows to create and manage the highest level objets in the SOLIDserver's IPAM module
// organization, the entry point of any IPv4 or IPv6 addressing plan. Spaces allow to manage unique ranges
// of IP addresses.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewIpSpace(ctx, "myFirstSpace", &solidserver.IpSpaceArgs{
//				Class: pulumi.String("CUSTOM_SPACE"),
//				ClassParameters: pulumi.StringMap{
//					"LOCATION": pulumi.String("PARIS"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpSpace struct {
	pulumi.CustomResourceState

	// The class associated to the IP space.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to IP space.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// The name of the IP space to create.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIpSpace registers a new resource with the given unique name, arguments, and options.
func NewIpSpace(ctx *pulumi.Context,
	name string, args *IpSpaceArgs, opts ...pulumi.ResourceOption) (*IpSpace, error) {
	if args == nil {
		args = &IpSpaceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpSpace
	err := ctx.RegisterResource("solidserver:index/ipSpace:IpSpace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpSpace gets an existing IpSpace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpSpace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpSpaceState, opts ...pulumi.ResourceOption) (*IpSpace, error) {
	var resource IpSpace
	err := ctx.ReadResource("solidserver:index/ipSpace:IpSpace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpSpace resources.
type ipSpaceState struct {
	// The class associated to the IP space.
	Class *string `pulumi:"class"`
	// The class parameters associated to IP space.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The name of the IP space to create.
	Name *string `pulumi:"name"`
}

type IpSpaceState struct {
	// The class associated to the IP space.
	Class pulumi.StringPtrInput
	// The class parameters associated to IP space.
	ClassParameters pulumi.StringMapInput
	// The name of the IP space to create.
	Name pulumi.StringPtrInput
}

func (IpSpaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceState)(nil)).Elem()
}

type ipSpaceArgs struct {
	// The class associated to the IP space.
	Class *string `pulumi:"class"`
	// The class parameters associated to IP space.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The name of the IP space to create.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IpSpace resource.
type IpSpaceArgs struct {
	// The class associated to the IP space.
	Class pulumi.StringPtrInput
	// The class parameters associated to IP space.
	ClassParameters pulumi.StringMapInput
	// The name of the IP space to create.
	Name pulumi.StringPtrInput
}

func (IpSpaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipSpaceArgs)(nil)).Elem()
}

type IpSpaceInput interface {
	pulumi.Input

	ToIpSpaceOutput() IpSpaceOutput
	ToIpSpaceOutputWithContext(ctx context.Context) IpSpaceOutput
}

func (*IpSpace) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpace)(nil)).Elem()
}

func (i *IpSpace) ToIpSpaceOutput() IpSpaceOutput {
	return i.ToIpSpaceOutputWithContext(context.Background())
}

func (i *IpSpace) ToIpSpaceOutputWithContext(ctx context.Context) IpSpaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceOutput)
}

// IpSpaceArrayInput is an input type that accepts IpSpaceArray and IpSpaceArrayOutput values.
// You can construct a concrete instance of `IpSpaceArrayInput` via:
//
//	IpSpaceArray{ IpSpaceArgs{...} }
type IpSpaceArrayInput interface {
	pulumi.Input

	ToIpSpaceArrayOutput() IpSpaceArrayOutput
	ToIpSpaceArrayOutputWithContext(context.Context) IpSpaceArrayOutput
}

type IpSpaceArray []IpSpaceInput

func (IpSpaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpace)(nil)).Elem()
}

func (i IpSpaceArray) ToIpSpaceArrayOutput() IpSpaceArrayOutput {
	return i.ToIpSpaceArrayOutputWithContext(context.Background())
}

func (i IpSpaceArray) ToIpSpaceArrayOutputWithContext(ctx context.Context) IpSpaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceArrayOutput)
}

// IpSpaceMapInput is an input type that accepts IpSpaceMap and IpSpaceMapOutput values.
// You can construct a concrete instance of `IpSpaceMapInput` via:
//
//	IpSpaceMap{ "key": IpSpaceArgs{...} }
type IpSpaceMapInput interface {
	pulumi.Input

	ToIpSpaceMapOutput() IpSpaceMapOutput
	ToIpSpaceMapOutputWithContext(context.Context) IpSpaceMapOutput
}

type IpSpaceMap map[string]IpSpaceInput

func (IpSpaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpace)(nil)).Elem()
}

func (i IpSpaceMap) ToIpSpaceMapOutput() IpSpaceMapOutput {
	return i.ToIpSpaceMapOutputWithContext(context.Background())
}

func (i IpSpaceMap) ToIpSpaceMapOutputWithContext(ctx context.Context) IpSpaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpSpaceMapOutput)
}

type IpSpaceOutput struct{ *pulumi.OutputState }

func (IpSpaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpSpace)(nil)).Elem()
}

func (o IpSpaceOutput) ToIpSpaceOutput() IpSpaceOutput {
	return o
}

func (o IpSpaceOutput) ToIpSpaceOutputWithContext(ctx context.Context) IpSpaceOutput {
	return o
}

// The class associated to the IP space.
func (o IpSpaceOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to IP space.
func (o IpSpaceOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// The name of the IP space to create.
func (o IpSpaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpSpace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IpSpaceArrayOutput struct{ *pulumi.OutputState }

func (IpSpaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpSpace)(nil)).Elem()
}

func (o IpSpaceArrayOutput) ToIpSpaceArrayOutput() IpSpaceArrayOutput {
	return o
}

func (o IpSpaceArrayOutput) ToIpSpaceArrayOutputWithContext(ctx context.Context) IpSpaceArrayOutput {
	return o
}

func (o IpSpaceArrayOutput) Index(i pulumi.IntInput) IpSpaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpSpace {
		return vs[0].([]*IpSpace)[vs[1].(int)]
	}).(IpSpaceOutput)
}

type IpSpaceMapOutput struct{ *pulumi.OutputState }

func (IpSpaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpSpace)(nil)).Elem()
}

func (o IpSpaceMapOutput) ToIpSpaceMapOutput() IpSpaceMapOutput {
	return o
}

func (o IpSpaceMapOutput) ToIpSpaceMapOutputWithContext(ctx context.Context) IpSpaceMapOutput {
	return o
}

func (o IpSpaceMapOutput) MapIndex(k pulumi.StringInput) IpSpaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpSpace {
		return vs[0].(map[string]*IpSpace)[vs[1].(string)]
	}).(IpSpaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceInput)(nil)).Elem(), &IpSpace{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceArrayInput)(nil)).Elem(), IpSpaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpSpaceMapInput)(nil)).Elem(), IpSpaceMap{})
	pulumi.RegisterOutputType(IpSpaceOutput{})
	pulumi.RegisterOutputType(IpSpaceArrayOutput{})
	pulumi.RegisterOutputType(IpSpaceMapOutput{})
}
