// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IPv6 Pool resource allows to create and manage ranges of IPv6 addresses for specific usage such as: provisioning,
// planning or migrations. IPv6 Pools can also be used to delegate one or several ranges of IPv6 addresses to groups
// of administrators or to restrict access to some users.
type Ip6Pool struct {
	pulumi.CustomResourceState

	// The class associated to the IPv6 pool.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the IPv6 pool.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// Specify wether to create the equivalent DHCP v6 range, or not (Default: false).
	DhcpRange pulumi.BoolPtrOutput `pulumi:"dhcpRange"`
	// The IPv6 pool's higher IPv6 address.
	End pulumi.StringOutput `pulumi:"end"`
	// The name of the IPv6 pool to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The prefix of the parent subnet of the pool.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// The size prefix of the parent subnet of the pool.
	PrefixSize pulumi.IntOutput `pulumi:"prefixSize"`
	// The name of the space into which creating the IPv6 pool.
	Space pulumi.StringOutput `pulumi:"space"`
	// The IPv6 pool's lower IPv6 address.
	Start pulumi.StringOutput `pulumi:"start"`
	// The name of the parent IP subnet into which creating the IPv6 pool.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
}

// NewIp6Pool registers a new resource with the given unique name, arguments, and options.
func NewIp6Pool(ctx *pulumi.Context,
	name string, args *Ip6PoolArgs, opts ...pulumi.ResourceOption) (*Ip6Pool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.End == nil {
		return nil, errors.New("invalid value for required argument 'End'")
	}
	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	if args.Start == nil {
		return nil, errors.New("invalid value for required argument 'Start'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ip6Pool
	err := ctx.RegisterResource("solidserver:index/ip6Pool:Ip6Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIp6Pool gets an existing Ip6Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIp6Pool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ip6PoolState, opts ...pulumi.ResourceOption) (*Ip6Pool, error) {
	var resource Ip6Pool
	err := ctx.ReadResource("solidserver:index/ip6Pool:Ip6Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ip6Pool resources.
type ip6PoolState struct {
	// The class associated to the IPv6 pool.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IPv6 pool.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Specify wether to create the equivalent DHCP v6 range, or not (Default: false).
	DhcpRange *bool `pulumi:"dhcpRange"`
	// The IPv6 pool's higher IPv6 address.
	End *string `pulumi:"end"`
	// The name of the IPv6 pool to create.
	Name *string `pulumi:"name"`
	// The prefix of the parent subnet of the pool.
	Prefix *string `pulumi:"prefix"`
	// The size prefix of the parent subnet of the pool.
	PrefixSize *int `pulumi:"prefixSize"`
	// The name of the space into which creating the IPv6 pool.
	Space *string `pulumi:"space"`
	// The IPv6 pool's lower IPv6 address.
	Start *string `pulumi:"start"`
	// The name of the parent IP subnet into which creating the IPv6 pool.
	Subnet *string `pulumi:"subnet"`
}

type Ip6PoolState struct {
	// The class associated to the IPv6 pool.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IPv6 pool.
	ClassParameters pulumi.StringMapInput
	// Specify wether to create the equivalent DHCP v6 range, or not (Default: false).
	DhcpRange pulumi.BoolPtrInput
	// The IPv6 pool's higher IPv6 address.
	End pulumi.StringPtrInput
	// The name of the IPv6 pool to create.
	Name pulumi.StringPtrInput
	// The prefix of the parent subnet of the pool.
	Prefix pulumi.StringPtrInput
	// The size prefix of the parent subnet of the pool.
	PrefixSize pulumi.IntPtrInput
	// The name of the space into which creating the IPv6 pool.
	Space pulumi.StringPtrInput
	// The IPv6 pool's lower IPv6 address.
	Start pulumi.StringPtrInput
	// The name of the parent IP subnet into which creating the IPv6 pool.
	Subnet pulumi.StringPtrInput
}

func (Ip6PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*ip6PoolState)(nil)).Elem()
}

type ip6PoolArgs struct {
	// The class associated to the IPv6 pool.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IPv6 pool.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Specify wether to create the equivalent DHCP v6 range, or not (Default: false).
	DhcpRange *bool `pulumi:"dhcpRange"`
	// The IPv6 pool's higher IPv6 address.
	End string `pulumi:"end"`
	// The name of the IPv6 pool to create.
	Name *string `pulumi:"name"`
	// The name of the space into which creating the IPv6 pool.
	Space string `pulumi:"space"`
	// The IPv6 pool's lower IPv6 address.
	Start string `pulumi:"start"`
	// The name of the parent IP subnet into which creating the IPv6 pool.
	Subnet string `pulumi:"subnet"`
}

// The set of arguments for constructing a Ip6Pool resource.
type Ip6PoolArgs struct {
	// The class associated to the IPv6 pool.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IPv6 pool.
	ClassParameters pulumi.StringMapInput
	// Specify wether to create the equivalent DHCP v6 range, or not (Default: false).
	DhcpRange pulumi.BoolPtrInput
	// The IPv6 pool's higher IPv6 address.
	End pulumi.StringInput
	// The name of the IPv6 pool to create.
	Name pulumi.StringPtrInput
	// The name of the space into which creating the IPv6 pool.
	Space pulumi.StringInput
	// The IPv6 pool's lower IPv6 address.
	Start pulumi.StringInput
	// The name of the parent IP subnet into which creating the IPv6 pool.
	Subnet pulumi.StringInput
}

func (Ip6PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ip6PoolArgs)(nil)).Elem()
}

type Ip6PoolInput interface {
	pulumi.Input

	ToIp6PoolOutput() Ip6PoolOutput
	ToIp6PoolOutputWithContext(ctx context.Context) Ip6PoolOutput
}

func (*Ip6Pool) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip6Pool)(nil)).Elem()
}

func (i *Ip6Pool) ToIp6PoolOutput() Ip6PoolOutput {
	return i.ToIp6PoolOutputWithContext(context.Background())
}

func (i *Ip6Pool) ToIp6PoolOutputWithContext(ctx context.Context) Ip6PoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6PoolOutput)
}

// Ip6PoolArrayInput is an input type that accepts Ip6PoolArray and Ip6PoolArrayOutput values.
// You can construct a concrete instance of `Ip6PoolArrayInput` via:
//
//	Ip6PoolArray{ Ip6PoolArgs{...} }
type Ip6PoolArrayInput interface {
	pulumi.Input

	ToIp6PoolArrayOutput() Ip6PoolArrayOutput
	ToIp6PoolArrayOutputWithContext(context.Context) Ip6PoolArrayOutput
}

type Ip6PoolArray []Ip6PoolInput

func (Ip6PoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip6Pool)(nil)).Elem()
}

func (i Ip6PoolArray) ToIp6PoolArrayOutput() Ip6PoolArrayOutput {
	return i.ToIp6PoolArrayOutputWithContext(context.Background())
}

func (i Ip6PoolArray) ToIp6PoolArrayOutputWithContext(ctx context.Context) Ip6PoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6PoolArrayOutput)
}

// Ip6PoolMapInput is an input type that accepts Ip6PoolMap and Ip6PoolMapOutput values.
// You can construct a concrete instance of `Ip6PoolMapInput` via:
//
//	Ip6PoolMap{ "key": Ip6PoolArgs{...} }
type Ip6PoolMapInput interface {
	pulumi.Input

	ToIp6PoolMapOutput() Ip6PoolMapOutput
	ToIp6PoolMapOutputWithContext(context.Context) Ip6PoolMapOutput
}

type Ip6PoolMap map[string]Ip6PoolInput

func (Ip6PoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip6Pool)(nil)).Elem()
}

func (i Ip6PoolMap) ToIp6PoolMapOutput() Ip6PoolMapOutput {
	return i.ToIp6PoolMapOutputWithContext(context.Background())
}

func (i Ip6PoolMap) ToIp6PoolMapOutputWithContext(ctx context.Context) Ip6PoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6PoolMapOutput)
}

type Ip6PoolOutput struct{ *pulumi.OutputState }

func (Ip6PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip6Pool)(nil)).Elem()
}

func (o Ip6PoolOutput) ToIp6PoolOutput() Ip6PoolOutput {
	return o
}

func (o Ip6PoolOutput) ToIp6PoolOutputWithContext(ctx context.Context) Ip6PoolOutput {
	return o
}

// The class associated to the IPv6 pool.
func (o Ip6PoolOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the IPv6 pool.
func (o Ip6PoolOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// Specify wether to create the equivalent DHCP v6 range, or not (Default: false).
func (o Ip6PoolOutput) DhcpRange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.BoolPtrOutput { return v.DhcpRange }).(pulumi.BoolPtrOutput)
}

// The IPv6 pool's higher IPv6 address.
func (o Ip6PoolOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringOutput { return v.End }).(pulumi.StringOutput)
}

// The name of the IPv6 pool to create.
func (o Ip6PoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The prefix of the parent subnet of the pool.
func (o Ip6PoolOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// The size prefix of the parent subnet of the pool.
func (o Ip6PoolOutput) PrefixSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.IntOutput { return v.PrefixSize }).(pulumi.IntOutput)
}

// The name of the space into which creating the IPv6 pool.
func (o Ip6PoolOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// The IPv6 pool's lower IPv6 address.
func (o Ip6PoolOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringOutput { return v.Start }).(pulumi.StringOutput)
}

// The name of the parent IP subnet into which creating the IPv6 pool.
func (o Ip6PoolOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Pool) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

type Ip6PoolArrayOutput struct{ *pulumi.OutputState }

func (Ip6PoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip6Pool)(nil)).Elem()
}

func (o Ip6PoolArrayOutput) ToIp6PoolArrayOutput() Ip6PoolArrayOutput {
	return o
}

func (o Ip6PoolArrayOutput) ToIp6PoolArrayOutputWithContext(ctx context.Context) Ip6PoolArrayOutput {
	return o
}

func (o Ip6PoolArrayOutput) Index(i pulumi.IntInput) Ip6PoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ip6Pool {
		return vs[0].([]*Ip6Pool)[vs[1].(int)]
	}).(Ip6PoolOutput)
}

type Ip6PoolMapOutput struct{ *pulumi.OutputState }

func (Ip6PoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip6Pool)(nil)).Elem()
}

func (o Ip6PoolMapOutput) ToIp6PoolMapOutput() Ip6PoolMapOutput {
	return o
}

func (o Ip6PoolMapOutput) ToIp6PoolMapOutputWithContext(ctx context.Context) Ip6PoolMapOutput {
	return o
}

func (o Ip6PoolMapOutput) MapIndex(k pulumi.StringInput) Ip6PoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ip6Pool {
		return vs[0].(map[string]*Ip6Pool)[vs[1].(string)]
	}).(Ip6PoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6PoolInput)(nil)).Elem(), &Ip6Pool{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6PoolArrayInput)(nil)).Elem(), Ip6PoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6PoolMapInput)(nil)).Elem(), Ip6PoolMap{})
	pulumi.RegisterOutputType(Ip6PoolOutput{})
	pulumi.RegisterOutputType(Ip6PoolArrayOutput{})
	pulumi.RegisterOutputType(Ip6PoolMapOutput{})
}
