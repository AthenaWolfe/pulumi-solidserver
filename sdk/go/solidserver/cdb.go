// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Custom DB resource allows to create and manage custom database(s) stored within SOLIDserver.
// This custom databases can be leveraged within object classes and wizards in order to store custom meta-data.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewCdb(ctx, "myFirstCustomDB", &solidserver.CdbArgs{
//				Label1: pulumi.String("Country Code"),
//				Label2: pulumi.String("Country Name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Cdb struct {
	pulumi.CustomResourceState

	// The name of the label 1
	Label1 pulumi.StringPtrOutput `pulumi:"label1"`
	// The name of the label 10
	Label10 pulumi.StringPtrOutput `pulumi:"label10"`
	// The name of the label 2
	Label2 pulumi.StringPtrOutput `pulumi:"label2"`
	// The name of the label 3
	Label3 pulumi.StringPtrOutput `pulumi:"label3"`
	// The name of the label 4
	Label4 pulumi.StringPtrOutput `pulumi:"label4"`
	// The name of the label 5
	Label5 pulumi.StringPtrOutput `pulumi:"label5"`
	// The name of the label 6
	Label6 pulumi.StringPtrOutput `pulumi:"label6"`
	// The name of the label 7
	Label7 pulumi.StringPtrOutput `pulumi:"label7"`
	// The name of the label 8
	Label8 pulumi.StringPtrOutput `pulumi:"label8"`
	// The name of the label 9
	Label9 pulumi.StringPtrOutput `pulumi:"label9"`
	// The name of the custom DB.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCdb registers a new resource with the given unique name, arguments, and options.
func NewCdb(ctx *pulumi.Context,
	name string, args *CdbArgs, opts ...pulumi.ResourceOption) (*Cdb, error) {
	if args == nil {
		args = &CdbArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cdb
	err := ctx.RegisterResource("solidserver:index/cdb:Cdb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdb gets an existing Cdb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdbState, opts ...pulumi.ResourceOption) (*Cdb, error) {
	var resource Cdb
	err := ctx.ReadResource("solidserver:index/cdb:Cdb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cdb resources.
type cdbState struct {
	// The name of the label 1
	Label1 *string `pulumi:"label1"`
	// The name of the label 10
	Label10 *string `pulumi:"label10"`
	// The name of the label 2
	Label2 *string `pulumi:"label2"`
	// The name of the label 3
	Label3 *string `pulumi:"label3"`
	// The name of the label 4
	Label4 *string `pulumi:"label4"`
	// The name of the label 5
	Label5 *string `pulumi:"label5"`
	// The name of the label 6
	Label6 *string `pulumi:"label6"`
	// The name of the label 7
	Label7 *string `pulumi:"label7"`
	// The name of the label 8
	Label8 *string `pulumi:"label8"`
	// The name of the label 9
	Label9 *string `pulumi:"label9"`
	// The name of the custom DB.
	Name *string `pulumi:"name"`
}

type CdbState struct {
	// The name of the label 1
	Label1 pulumi.StringPtrInput
	// The name of the label 10
	Label10 pulumi.StringPtrInput
	// The name of the label 2
	Label2 pulumi.StringPtrInput
	// The name of the label 3
	Label3 pulumi.StringPtrInput
	// The name of the label 4
	Label4 pulumi.StringPtrInput
	// The name of the label 5
	Label5 pulumi.StringPtrInput
	// The name of the label 6
	Label6 pulumi.StringPtrInput
	// The name of the label 7
	Label7 pulumi.StringPtrInput
	// The name of the label 8
	Label8 pulumi.StringPtrInput
	// The name of the label 9
	Label9 pulumi.StringPtrInput
	// The name of the custom DB.
	Name pulumi.StringPtrInput
}

func (CdbState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdbState)(nil)).Elem()
}

type cdbArgs struct {
	// The name of the label 1
	Label1 *string `pulumi:"label1"`
	// The name of the label 10
	Label10 *string `pulumi:"label10"`
	// The name of the label 2
	Label2 *string `pulumi:"label2"`
	// The name of the label 3
	Label3 *string `pulumi:"label3"`
	// The name of the label 4
	Label4 *string `pulumi:"label4"`
	// The name of the label 5
	Label5 *string `pulumi:"label5"`
	// The name of the label 6
	Label6 *string `pulumi:"label6"`
	// The name of the label 7
	Label7 *string `pulumi:"label7"`
	// The name of the label 8
	Label8 *string `pulumi:"label8"`
	// The name of the label 9
	Label9 *string `pulumi:"label9"`
	// The name of the custom DB.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Cdb resource.
type CdbArgs struct {
	// The name of the label 1
	Label1 pulumi.StringPtrInput
	// The name of the label 10
	Label10 pulumi.StringPtrInput
	// The name of the label 2
	Label2 pulumi.StringPtrInput
	// The name of the label 3
	Label3 pulumi.StringPtrInput
	// The name of the label 4
	Label4 pulumi.StringPtrInput
	// The name of the label 5
	Label5 pulumi.StringPtrInput
	// The name of the label 6
	Label6 pulumi.StringPtrInput
	// The name of the label 7
	Label7 pulumi.StringPtrInput
	// The name of the label 8
	Label8 pulumi.StringPtrInput
	// The name of the label 9
	Label9 pulumi.StringPtrInput
	// The name of the custom DB.
	Name pulumi.StringPtrInput
}

func (CdbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdbArgs)(nil)).Elem()
}

type CdbInput interface {
	pulumi.Input

	ToCdbOutput() CdbOutput
	ToCdbOutputWithContext(ctx context.Context) CdbOutput
}

func (*Cdb) ElementType() reflect.Type {
	return reflect.TypeOf((**Cdb)(nil)).Elem()
}

func (i *Cdb) ToCdbOutput() CdbOutput {
	return i.ToCdbOutputWithContext(context.Background())
}

func (i *Cdb) ToCdbOutputWithContext(ctx context.Context) CdbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdbOutput)
}

// CdbArrayInput is an input type that accepts CdbArray and CdbArrayOutput values.
// You can construct a concrete instance of `CdbArrayInput` via:
//
//	CdbArray{ CdbArgs{...} }
type CdbArrayInput interface {
	pulumi.Input

	ToCdbArrayOutput() CdbArrayOutput
	ToCdbArrayOutputWithContext(context.Context) CdbArrayOutput
}

type CdbArray []CdbInput

func (CdbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cdb)(nil)).Elem()
}

func (i CdbArray) ToCdbArrayOutput() CdbArrayOutput {
	return i.ToCdbArrayOutputWithContext(context.Background())
}

func (i CdbArray) ToCdbArrayOutputWithContext(ctx context.Context) CdbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdbArrayOutput)
}

// CdbMapInput is an input type that accepts CdbMap and CdbMapOutput values.
// You can construct a concrete instance of `CdbMapInput` via:
//
//	CdbMap{ "key": CdbArgs{...} }
type CdbMapInput interface {
	pulumi.Input

	ToCdbMapOutput() CdbMapOutput
	ToCdbMapOutputWithContext(context.Context) CdbMapOutput
}

type CdbMap map[string]CdbInput

func (CdbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cdb)(nil)).Elem()
}

func (i CdbMap) ToCdbMapOutput() CdbMapOutput {
	return i.ToCdbMapOutputWithContext(context.Background())
}

func (i CdbMap) ToCdbMapOutputWithContext(ctx context.Context) CdbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdbMapOutput)
}

type CdbOutput struct{ *pulumi.OutputState }

func (CdbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cdb)(nil)).Elem()
}

func (o CdbOutput) ToCdbOutput() CdbOutput {
	return o
}

func (o CdbOutput) ToCdbOutputWithContext(ctx context.Context) CdbOutput {
	return o
}

// The name of the label 1
func (o CdbOutput) Label1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label1 }).(pulumi.StringPtrOutput)
}

// The name of the label 10
func (o CdbOutput) Label10() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label10 }).(pulumi.StringPtrOutput)
}

// The name of the label 2
func (o CdbOutput) Label2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label2 }).(pulumi.StringPtrOutput)
}

// The name of the label 3
func (o CdbOutput) Label3() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label3 }).(pulumi.StringPtrOutput)
}

// The name of the label 4
func (o CdbOutput) Label4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label4 }).(pulumi.StringPtrOutput)
}

// The name of the label 5
func (o CdbOutput) Label5() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label5 }).(pulumi.StringPtrOutput)
}

// The name of the label 6
func (o CdbOutput) Label6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label6 }).(pulumi.StringPtrOutput)
}

// The name of the label 7
func (o CdbOutput) Label7() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label7 }).(pulumi.StringPtrOutput)
}

// The name of the label 8
func (o CdbOutput) Label8() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label8 }).(pulumi.StringPtrOutput)
}

// The name of the label 9
func (o CdbOutput) Label9() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringPtrOutput { return v.Label9 }).(pulumi.StringPtrOutput)
}

// The name of the custom DB.
func (o CdbOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cdb) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CdbArrayOutput struct{ *pulumi.OutputState }

func (CdbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cdb)(nil)).Elem()
}

func (o CdbArrayOutput) ToCdbArrayOutput() CdbArrayOutput {
	return o
}

func (o CdbArrayOutput) ToCdbArrayOutputWithContext(ctx context.Context) CdbArrayOutput {
	return o
}

func (o CdbArrayOutput) Index(i pulumi.IntInput) CdbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cdb {
		return vs[0].([]*Cdb)[vs[1].(int)]
	}).(CdbOutput)
}

type CdbMapOutput struct{ *pulumi.OutputState }

func (CdbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cdb)(nil)).Elem()
}

func (o CdbMapOutput) ToCdbMapOutput() CdbMapOutput {
	return o
}

func (o CdbMapOutput) ToCdbMapOutputWithContext(ctx context.Context) CdbMapOutput {
	return o
}

func (o CdbMapOutput) MapIndex(k pulumi.StringInput) CdbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cdb {
		return vs[0].(map[string]*Cdb)[vs[1].(string)]
	}).(CdbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdbInput)(nil)).Elem(), &Cdb{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdbArrayInput)(nil)).Elem(), CdbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdbMapInput)(nil)).Elem(), CdbMap{})
	pulumi.RegisterOutputType(CdbOutput{})
	pulumi.RegisterOutputType(CdbArrayOutput{})
	pulumi.RegisterOutputType(CdbMapOutput{})
}
