// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IP Pool resource allows to create and manage ranges of IP addresses for specific usage such as: provisioning,
// planning or migrations. IP Pools can also be used to delegate one or several ranges of IPv6 addresses to groups
// of administrators or to restrict access to some users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewIpPool(ctx, "myFirstIPPool", &solidserver.IpPoolArgs{
//				Size:   pulumi.Int(2),
//				Space:  pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),
//				Start:  pulumi.Any(solidserver_ip_subnet.MySecondIPSubnet.Address),
//				Subnet: pulumi.Any(solidserver_ip_subnet.MySecondIPSubnet.Name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpPool struct {
	pulumi.CustomResourceState

	// The class associated to the IP pool.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the IP pool.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// Specify wether to create the equivalent DHCP range, or not (Default: false).
	DhcpRange pulumi.BoolPtrOutput `pulumi:"dhcpRange"`
	// The name of the IP pool to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The prefix of the parent subnet of the pool.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// The size prefix of the parent subnet of the pool.
	PrefixSize pulumi.IntOutput `pulumi:"prefixSize"`
	// The size of the IP pool to create.
	Size pulumi.IntOutput `pulumi:"size"`
	// The name of the space into which creating the IP pool.
	Space pulumi.StringOutput `pulumi:"space"`
	// The IP pool lower IP address.
	Start pulumi.StringOutput `pulumi:"start"`
	// The name of the parent IP subnet into which creating the IP pool.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
}

// NewIpPool registers a new resource with the given unique name, arguments, and options.
func NewIpPool(ctx *pulumi.Context,
	name string, args *IpPoolArgs, opts ...pulumi.ResourceOption) (*IpPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	if args.Start == nil {
		return nil, errors.New("invalid value for required argument 'Start'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpPool
	err := ctx.RegisterResource("solidserver:index/ipPool:IpPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpPool gets an existing IpPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpPoolState, opts ...pulumi.ResourceOption) (*IpPool, error) {
	var resource IpPool
	err := ctx.ReadResource("solidserver:index/ipPool:IpPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpPool resources.
type ipPoolState struct {
	// The class associated to the IP pool.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IP pool.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Specify wether to create the equivalent DHCP range, or not (Default: false).
	DhcpRange *bool `pulumi:"dhcpRange"`
	// The name of the IP pool to create.
	Name *string `pulumi:"name"`
	// The prefix of the parent subnet of the pool.
	Prefix *string `pulumi:"prefix"`
	// The size prefix of the parent subnet of the pool.
	PrefixSize *int `pulumi:"prefixSize"`
	// The size of the IP pool to create.
	Size *int `pulumi:"size"`
	// The name of the space into which creating the IP pool.
	Space *string `pulumi:"space"`
	// The IP pool lower IP address.
	Start *string `pulumi:"start"`
	// The name of the parent IP subnet into which creating the IP pool.
	Subnet *string `pulumi:"subnet"`
}

type IpPoolState struct {
	// The class associated to the IP pool.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IP pool.
	ClassParameters pulumi.StringMapInput
	// Specify wether to create the equivalent DHCP range, or not (Default: false).
	DhcpRange pulumi.BoolPtrInput
	// The name of the IP pool to create.
	Name pulumi.StringPtrInput
	// The prefix of the parent subnet of the pool.
	Prefix pulumi.StringPtrInput
	// The size prefix of the parent subnet of the pool.
	PrefixSize pulumi.IntPtrInput
	// The size of the IP pool to create.
	Size pulumi.IntPtrInput
	// The name of the space into which creating the IP pool.
	Space pulumi.StringPtrInput
	// The IP pool lower IP address.
	Start pulumi.StringPtrInput
	// The name of the parent IP subnet into which creating the IP pool.
	Subnet pulumi.StringPtrInput
}

func (IpPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipPoolState)(nil)).Elem()
}

type ipPoolArgs struct {
	// The class associated to the IP pool.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IP pool.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Specify wether to create the equivalent DHCP range, or not (Default: false).
	DhcpRange *bool `pulumi:"dhcpRange"`
	// The name of the IP pool to create.
	Name *string `pulumi:"name"`
	// The size of the IP pool to create.
	Size int `pulumi:"size"`
	// The name of the space into which creating the IP pool.
	Space string `pulumi:"space"`
	// The IP pool lower IP address.
	Start string `pulumi:"start"`
	// The name of the parent IP subnet into which creating the IP pool.
	Subnet string `pulumi:"subnet"`
}

// The set of arguments for constructing a IpPool resource.
type IpPoolArgs struct {
	// The class associated to the IP pool.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IP pool.
	ClassParameters pulumi.StringMapInput
	// Specify wether to create the equivalent DHCP range, or not (Default: false).
	DhcpRange pulumi.BoolPtrInput
	// The name of the IP pool to create.
	Name pulumi.StringPtrInput
	// The size of the IP pool to create.
	Size pulumi.IntInput
	// The name of the space into which creating the IP pool.
	Space pulumi.StringInput
	// The IP pool lower IP address.
	Start pulumi.StringInput
	// The name of the parent IP subnet into which creating the IP pool.
	Subnet pulumi.StringInput
}

func (IpPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipPoolArgs)(nil)).Elem()
}

type IpPoolInput interface {
	pulumi.Input

	ToIpPoolOutput() IpPoolOutput
	ToIpPoolOutputWithContext(ctx context.Context) IpPoolOutput
}

func (*IpPool) ElementType() reflect.Type {
	return reflect.TypeOf((**IpPool)(nil)).Elem()
}

func (i *IpPool) ToIpPoolOutput() IpPoolOutput {
	return i.ToIpPoolOutputWithContext(context.Background())
}

func (i *IpPool) ToIpPoolOutputWithContext(ctx context.Context) IpPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPoolOutput)
}

// IpPoolArrayInput is an input type that accepts IpPoolArray and IpPoolArrayOutput values.
// You can construct a concrete instance of `IpPoolArrayInput` via:
//
//	IpPoolArray{ IpPoolArgs{...} }
type IpPoolArrayInput interface {
	pulumi.Input

	ToIpPoolArrayOutput() IpPoolArrayOutput
	ToIpPoolArrayOutputWithContext(context.Context) IpPoolArrayOutput
}

type IpPoolArray []IpPoolInput

func (IpPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpPool)(nil)).Elem()
}

func (i IpPoolArray) ToIpPoolArrayOutput() IpPoolArrayOutput {
	return i.ToIpPoolArrayOutputWithContext(context.Background())
}

func (i IpPoolArray) ToIpPoolArrayOutputWithContext(ctx context.Context) IpPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPoolArrayOutput)
}

// IpPoolMapInput is an input type that accepts IpPoolMap and IpPoolMapOutput values.
// You can construct a concrete instance of `IpPoolMapInput` via:
//
//	IpPoolMap{ "key": IpPoolArgs{...} }
type IpPoolMapInput interface {
	pulumi.Input

	ToIpPoolMapOutput() IpPoolMapOutput
	ToIpPoolMapOutputWithContext(context.Context) IpPoolMapOutput
}

type IpPoolMap map[string]IpPoolInput

func (IpPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpPool)(nil)).Elem()
}

func (i IpPoolMap) ToIpPoolMapOutput() IpPoolMapOutput {
	return i.ToIpPoolMapOutputWithContext(context.Background())
}

func (i IpPoolMap) ToIpPoolMapOutputWithContext(ctx context.Context) IpPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpPoolMapOutput)
}

type IpPoolOutput struct{ *pulumi.OutputState }

func (IpPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpPool)(nil)).Elem()
}

func (o IpPoolOutput) ToIpPoolOutput() IpPoolOutput {
	return o
}

func (o IpPoolOutput) ToIpPoolOutputWithContext(ctx context.Context) IpPoolOutput {
	return o
}

// The class associated to the IP pool.
func (o IpPoolOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpPool) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the IP pool.
func (o IpPoolOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *IpPool) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// Specify wether to create the equivalent DHCP range, or not (Default: false).
func (o IpPoolOutput) DhcpRange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IpPool) pulumi.BoolPtrOutput { return v.DhcpRange }).(pulumi.BoolPtrOutput)
}

// The name of the IP pool to create.
func (o IpPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The prefix of the parent subnet of the pool.
func (o IpPoolOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPool) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// The size prefix of the parent subnet of the pool.
func (o IpPoolOutput) PrefixSize() pulumi.IntOutput {
	return o.ApplyT(func(v *IpPool) pulumi.IntOutput { return v.PrefixSize }).(pulumi.IntOutput)
}

// The size of the IP pool to create.
func (o IpPoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *IpPool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The name of the space into which creating the IP pool.
func (o IpPoolOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPool) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// The IP pool lower IP address.
func (o IpPoolOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPool) pulumi.StringOutput { return v.Start }).(pulumi.StringOutput)
}

// The name of the parent IP subnet into which creating the IP pool.
func (o IpPoolOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *IpPool) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

type IpPoolArrayOutput struct{ *pulumi.OutputState }

func (IpPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpPool)(nil)).Elem()
}

func (o IpPoolArrayOutput) ToIpPoolArrayOutput() IpPoolArrayOutput {
	return o
}

func (o IpPoolArrayOutput) ToIpPoolArrayOutputWithContext(ctx context.Context) IpPoolArrayOutput {
	return o
}

func (o IpPoolArrayOutput) Index(i pulumi.IntInput) IpPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpPool {
		return vs[0].([]*IpPool)[vs[1].(int)]
	}).(IpPoolOutput)
}

type IpPoolMapOutput struct{ *pulumi.OutputState }

func (IpPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpPool)(nil)).Elem()
}

func (o IpPoolMapOutput) ToIpPoolMapOutput() IpPoolMapOutput {
	return o
}

func (o IpPoolMapOutput) ToIpPoolMapOutputWithContext(ctx context.Context) IpPoolMapOutput {
	return o
}

func (o IpPoolMapOutput) MapIndex(k pulumi.StringInput) IpPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpPool {
		return vs[0].(map[string]*IpPool)[vs[1].(string)]
	}).(IpPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpPoolInput)(nil)).Elem(), &IpPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpPoolArrayInput)(nil)).Elem(), IpPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpPoolMapInput)(nil)).Elem(), IpPoolMap{})
	pulumi.RegisterOutputType(IpPoolOutput{})
	pulumi.RegisterOutputType(IpPoolArrayOutput{})
	pulumi.RegisterOutputType(IpPoolMapOutput{})
}
