// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS view data-source allows to retrieve information about DNS views.
// View(s) are virutal containers mostly used to implement DNS split horizon
// providing different answers depending on matching criterias.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.LookupDnsView(ctx, &solidserver.LookupDnsViewArgs{
//				Dnsserver: "ns.local",
//				Name:      "testview",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsView(ctx *pulumi.Context, args *LookupDnsViewArgs, opts ...pulumi.InvokeOption) (*LookupDnsViewResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsViewResult
	err := ctx.Invoke("solidserver:index/getDnsView:getDnsView", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsView.
type LookupDnsViewArgs struct {
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver string `pulumi:"dnsserver"`
	// The name of the DNS view.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDnsView.
type LookupDnsViewResult struct {
	// A list of network prefixes allowed to query the DNS view (named ACL(s) are not supported using this provider).
	AllowQueries []string `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the DNS view for recursion (named ACL(s) are not supported using this provider).
	AllowRecursions []string `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the DNS view for zone transfert (named ACL(s) are not supported using this provider).
	AllowTransfers []string `pulumi:"allowTransfers"`
	// The class associated to the DNS view.
	Class string `pulumi:"class"`
	// The class parameters associated to the DNS view.
	ClassParameters map[string]interface{} `pulumi:"classParameters"`
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver string `pulumi:"dnsserver"`
	// The forwarding mode of the DNS view (disabled if empty).
	Forward string `pulumi:"forward"`
	// The IP address list of the forwarder(s) configured on the DNS view.
	Forwarders []string `pulumi:"forwarders"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).
	MatchClients []string `pulumi:"matchClients"`
	// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).
	MatchTos []string `pulumi:"matchTos"`
	// The name of the DNS view.
	Name string `pulumi:"name"`
	// The level of the DNS view, where 0 represents the highest level in the views hierarchy.
	Order string `pulumi:"order"`
	// The recursion status of the DNS view.
	Recursion bool `pulumi:"recursion"`
}

func LookupDnsViewOutput(ctx *pulumi.Context, args LookupDnsViewOutputArgs, opts ...pulumi.InvokeOption) LookupDnsViewResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsViewResult, error) {
			args := v.(LookupDnsViewArgs)
			r, err := LookupDnsView(ctx, &args, opts...)
			var s LookupDnsViewResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDnsViewResultOutput)
}

// A collection of arguments for invoking getDnsView.
type LookupDnsViewOutputArgs struct {
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver pulumi.StringInput `pulumi:"dnsserver"`
	// The name of the DNS view.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDnsViewOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsViewArgs)(nil)).Elem()
}

// A collection of values returned by getDnsView.
type LookupDnsViewResultOutput struct{ *pulumi.OutputState }

func (LookupDnsViewResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsViewResult)(nil)).Elem()
}

func (o LookupDnsViewResultOutput) ToLookupDnsViewResultOutput() LookupDnsViewResultOutput {
	return o
}

func (o LookupDnsViewResultOutput) ToLookupDnsViewResultOutputWithContext(ctx context.Context) LookupDnsViewResultOutput {
	return o
}

// A list of network prefixes allowed to query the DNS view (named ACL(s) are not supported using this provider).
func (o LookupDnsViewResultOutput) AllowQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsViewResult) []string { return v.AllowQueries }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS view for recursion (named ACL(s) are not supported using this provider).
func (o LookupDnsViewResultOutput) AllowRecursions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsViewResult) []string { return v.AllowRecursions }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS view for zone transfert (named ACL(s) are not supported using this provider).
func (o LookupDnsViewResultOutput) AllowTransfers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsViewResult) []string { return v.AllowTransfers }).(pulumi.StringArrayOutput)
}

// The class associated to the DNS view.
func (o LookupDnsViewResultOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsViewResult) string { return v.Class }).(pulumi.StringOutput)
}

// The class parameters associated to the DNS view.
func (o LookupDnsViewResultOutput) ClassParameters() pulumi.MapOutput {
	return o.ApplyT(func(v LookupDnsViewResult) map[string]interface{} { return v.ClassParameters }).(pulumi.MapOutput)
}

// The name of DNS server or DNS SMART hosting the DNS view to create.
func (o LookupDnsViewResultOutput) Dnsserver() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsViewResult) string { return v.Dnsserver }).(pulumi.StringOutput)
}

// The forwarding mode of the DNS view (disabled if empty).
func (o LookupDnsViewResultOutput) Forward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsViewResult) string { return v.Forward }).(pulumi.StringOutput)
}

// The IP address list of the forwarder(s) configured on the DNS view.
func (o LookupDnsViewResultOutput) Forwarders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsViewResult) []string { return v.Forwarders }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDnsViewResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsViewResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).
func (o LookupDnsViewResultOutput) MatchClients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsViewResult) []string { return v.MatchClients }).(pulumi.StringArrayOutput)
}

// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).
func (o LookupDnsViewResultOutput) MatchTos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsViewResult) []string { return v.MatchTos }).(pulumi.StringArrayOutput)
}

// The name of the DNS view.
func (o LookupDnsViewResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsViewResult) string { return v.Name }).(pulumi.StringOutput)
}

// The level of the DNS view, where 0 represents the highest level in the views hierarchy.
func (o LookupDnsViewResultOutput) Order() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsViewResult) string { return v.Order }).(pulumi.StringOutput)
}

// The recursion status of the DNS view.
func (o LookupDnsViewResultOutput) Recursion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsViewResult) bool { return v.Recursion }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsViewResultOutput{})
}
