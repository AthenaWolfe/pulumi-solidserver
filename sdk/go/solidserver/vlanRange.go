// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VLAN Range resource allows to create and manage VLAN and VxLAN ranges.
type VlanRange struct {
	pulumi.CustomResourceState

	// The class associated to the VLAN Range.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to VLAN Range.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// The vlan range's higher vlan ID.
	End pulumi.IntOutput `pulumi:"end"`
	// The name of the VLAN Range to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The vlan range's lower vlan ID.
	Start pulumi.IntOutput `pulumi:"start"`
	// The name of the vlan Domain.
	VlanDomain pulumi.StringOutput `pulumi:"vlanDomain"`
}

// NewVlanRange registers a new resource with the given unique name, arguments, and options.
func NewVlanRange(ctx *pulumi.Context,
	name string, args *VlanRangeArgs, opts ...pulumi.ResourceOption) (*VlanRange, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.End == nil {
		return nil, errors.New("invalid value for required argument 'End'")
	}
	if args.Start == nil {
		return nil, errors.New("invalid value for required argument 'Start'")
	}
	if args.VlanDomain == nil {
		return nil, errors.New("invalid value for required argument 'VlanDomain'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VlanRange
	err := ctx.RegisterResource("solidserver:index/vlanRange:VlanRange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlanRange gets an existing VlanRange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlanRange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanRangeState, opts ...pulumi.ResourceOption) (*VlanRange, error) {
	var resource VlanRange
	err := ctx.ReadResource("solidserver:index/vlanRange:VlanRange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VlanRange resources.
type vlanRangeState struct {
	// The class associated to the VLAN Range.
	Class *string `pulumi:"class"`
	// The class parameters associated to VLAN Range.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The vlan range's higher vlan ID.
	End *int `pulumi:"end"`
	// The name of the VLAN Range to create.
	Name *string `pulumi:"name"`
	// The vlan range's lower vlan ID.
	Start *int `pulumi:"start"`
	// The name of the vlan Domain.
	VlanDomain *string `pulumi:"vlanDomain"`
}

type VlanRangeState struct {
	// The class associated to the VLAN Range.
	Class pulumi.StringPtrInput
	// The class parameters associated to VLAN Range.
	ClassParameters pulumi.StringMapInput
	// The vlan range's higher vlan ID.
	End pulumi.IntPtrInput
	// The name of the VLAN Range to create.
	Name pulumi.StringPtrInput
	// The vlan range's lower vlan ID.
	Start pulumi.IntPtrInput
	// The name of the vlan Domain.
	VlanDomain pulumi.StringPtrInput
}

func (VlanRangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanRangeState)(nil)).Elem()
}

type vlanRangeArgs struct {
	// The class associated to the VLAN Range.
	Class *string `pulumi:"class"`
	// The class parameters associated to VLAN Range.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The vlan range's higher vlan ID.
	End int `pulumi:"end"`
	// The name of the VLAN Range to create.
	Name *string `pulumi:"name"`
	// The vlan range's lower vlan ID.
	Start int `pulumi:"start"`
	// The name of the vlan Domain.
	VlanDomain string `pulumi:"vlanDomain"`
}

// The set of arguments for constructing a VlanRange resource.
type VlanRangeArgs struct {
	// The class associated to the VLAN Range.
	Class pulumi.StringPtrInput
	// The class parameters associated to VLAN Range.
	ClassParameters pulumi.StringMapInput
	// The vlan range's higher vlan ID.
	End pulumi.IntInput
	// The name of the VLAN Range to create.
	Name pulumi.StringPtrInput
	// The vlan range's lower vlan ID.
	Start pulumi.IntInput
	// The name of the vlan Domain.
	VlanDomain pulumi.StringInput
}

func (VlanRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanRangeArgs)(nil)).Elem()
}

type VlanRangeInput interface {
	pulumi.Input

	ToVlanRangeOutput() VlanRangeOutput
	ToVlanRangeOutputWithContext(ctx context.Context) VlanRangeOutput
}

func (*VlanRange) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanRange)(nil)).Elem()
}

func (i *VlanRange) ToVlanRangeOutput() VlanRangeOutput {
	return i.ToVlanRangeOutputWithContext(context.Background())
}

func (i *VlanRange) ToVlanRangeOutputWithContext(ctx context.Context) VlanRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanRangeOutput)
}

// VlanRangeArrayInput is an input type that accepts VlanRangeArray and VlanRangeArrayOutput values.
// You can construct a concrete instance of `VlanRangeArrayInput` via:
//
//	VlanRangeArray{ VlanRangeArgs{...} }
type VlanRangeArrayInput interface {
	pulumi.Input

	ToVlanRangeArrayOutput() VlanRangeArrayOutput
	ToVlanRangeArrayOutputWithContext(context.Context) VlanRangeArrayOutput
}

type VlanRangeArray []VlanRangeInput

func (VlanRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VlanRange)(nil)).Elem()
}

func (i VlanRangeArray) ToVlanRangeArrayOutput() VlanRangeArrayOutput {
	return i.ToVlanRangeArrayOutputWithContext(context.Background())
}

func (i VlanRangeArray) ToVlanRangeArrayOutputWithContext(ctx context.Context) VlanRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanRangeArrayOutput)
}

// VlanRangeMapInput is an input type that accepts VlanRangeMap and VlanRangeMapOutput values.
// You can construct a concrete instance of `VlanRangeMapInput` via:
//
//	VlanRangeMap{ "key": VlanRangeArgs{...} }
type VlanRangeMapInput interface {
	pulumi.Input

	ToVlanRangeMapOutput() VlanRangeMapOutput
	ToVlanRangeMapOutputWithContext(context.Context) VlanRangeMapOutput
}

type VlanRangeMap map[string]VlanRangeInput

func (VlanRangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VlanRange)(nil)).Elem()
}

func (i VlanRangeMap) ToVlanRangeMapOutput() VlanRangeMapOutput {
	return i.ToVlanRangeMapOutputWithContext(context.Background())
}

func (i VlanRangeMap) ToVlanRangeMapOutputWithContext(ctx context.Context) VlanRangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanRangeMapOutput)
}

type VlanRangeOutput struct{ *pulumi.OutputState }

func (VlanRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanRange)(nil)).Elem()
}

func (o VlanRangeOutput) ToVlanRangeOutput() VlanRangeOutput {
	return o
}

func (o VlanRangeOutput) ToVlanRangeOutputWithContext(ctx context.Context) VlanRangeOutput {
	return o
}

// The class associated to the VLAN Range.
func (o VlanRangeOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VlanRange) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to VLAN Range.
func (o VlanRangeOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VlanRange) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// The vlan range's higher vlan ID.
func (o VlanRangeOutput) End() pulumi.IntOutput {
	return o.ApplyT(func(v *VlanRange) pulumi.IntOutput { return v.End }).(pulumi.IntOutput)
}

// The name of the VLAN Range to create.
func (o VlanRangeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VlanRange) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The vlan range's lower vlan ID.
func (o VlanRangeOutput) Start() pulumi.IntOutput {
	return o.ApplyT(func(v *VlanRange) pulumi.IntOutput { return v.Start }).(pulumi.IntOutput)
}

// The name of the vlan Domain.
func (o VlanRangeOutput) VlanDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *VlanRange) pulumi.StringOutput { return v.VlanDomain }).(pulumi.StringOutput)
}

type VlanRangeArrayOutput struct{ *pulumi.OutputState }

func (VlanRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VlanRange)(nil)).Elem()
}

func (o VlanRangeArrayOutput) ToVlanRangeArrayOutput() VlanRangeArrayOutput {
	return o
}

func (o VlanRangeArrayOutput) ToVlanRangeArrayOutputWithContext(ctx context.Context) VlanRangeArrayOutput {
	return o
}

func (o VlanRangeArrayOutput) Index(i pulumi.IntInput) VlanRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VlanRange {
		return vs[0].([]*VlanRange)[vs[1].(int)]
	}).(VlanRangeOutput)
}

type VlanRangeMapOutput struct{ *pulumi.OutputState }

func (VlanRangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VlanRange)(nil)).Elem()
}

func (o VlanRangeMapOutput) ToVlanRangeMapOutput() VlanRangeMapOutput {
	return o
}

func (o VlanRangeMapOutput) ToVlanRangeMapOutputWithContext(ctx context.Context) VlanRangeMapOutput {
	return o
}

func (o VlanRangeMapOutput) MapIndex(k pulumi.StringInput) VlanRangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VlanRange {
		return vs[0].(map[string]*VlanRange)[vs[1].(string)]
	}).(VlanRangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VlanRangeInput)(nil)).Elem(), &VlanRange{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanRangeArrayInput)(nil)).Elem(), VlanRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanRangeMapInput)(nil)).Elem(), VlanRangeMap{})
	pulumi.RegisterOutputType(VlanRangeOutput{})
	pulumi.RegisterOutputType(VlanRangeArrayOutput{})
	pulumi.RegisterOutputType(VlanRangeMapOutput{})
}
