// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IPv6 address resource allows to create and manage reserved addresses for specific devices, apps or users.
// More importantly it allows to store useful meta-data for both tracking and automation purposes.
type Ip6Address struct {
	pulumi.CustomResourceState

	// The provisionned IPv6 address.
	Address pulumi.StringOutput `pulumi:"address"`
	// The class associated to the IPv6 address.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the IPv6 address.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// Device Name to associate with the IPv6 address (Require a 'Device Manager' license).
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The MAC Address of the IPv6 address to create.
	Mac pulumi.StringPtrOutput `pulumi:"mac"`
	// The short name or FQDN of the IPv6 address to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the pool into which creating the IPv6 address.
	Pool pulumi.StringPtrOutput `pulumi:"pool"`
	// The optionally requested IPv6 address.
	RequestIp pulumi.StringPtrOutput `pulumi:"requestIp"`
	// The name of the space into which creating the IPv6 address.
	Space pulumi.StringOutput `pulumi:"space"`
	// The name of the subnet into which creating the IPv6 address.
	Subnet pulumi.StringOutput `pulumi:"subnet"`
}

// NewIp6Address registers a new resource with the given unique name, arguments, and options.
func NewIp6Address(ctx *pulumi.Context,
	name string, args *Ip6AddressArgs, opts ...pulumi.ResourceOption) (*Ip6Address, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ip6Address
	err := ctx.RegisterResource("solidserver:index/ip6Address:Ip6Address", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIp6Address gets an existing Ip6Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIp6Address(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ip6AddressState, opts ...pulumi.ResourceOption) (*Ip6Address, error) {
	var resource Ip6Address
	err := ctx.ReadResource("solidserver:index/ip6Address:Ip6Address", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ip6Address resources.
type ip6AddressState struct {
	// The provisionned IPv6 address.
	Address *string `pulumi:"address"`
	// The class associated to the IPv6 address.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IPv6 address.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Device Name to associate with the IPv6 address (Require a 'Device Manager' license).
	Device *string `pulumi:"device"`
	// The MAC Address of the IPv6 address to create.
	Mac *string `pulumi:"mac"`
	// The short name or FQDN of the IPv6 address to create.
	Name *string `pulumi:"name"`
	// The name of the pool into which creating the IPv6 address.
	Pool *string `pulumi:"pool"`
	// The optionally requested IPv6 address.
	RequestIp *string `pulumi:"requestIp"`
	// The name of the space into which creating the IPv6 address.
	Space *string `pulumi:"space"`
	// The name of the subnet into which creating the IPv6 address.
	Subnet *string `pulumi:"subnet"`
}

type Ip6AddressState struct {
	// The provisionned IPv6 address.
	Address pulumi.StringPtrInput
	// The class associated to the IPv6 address.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IPv6 address.
	ClassParameters pulumi.StringMapInput
	// Device Name to associate with the IPv6 address (Require a 'Device Manager' license).
	Device pulumi.StringPtrInput
	// The MAC Address of the IPv6 address to create.
	Mac pulumi.StringPtrInput
	// The short name or FQDN of the IPv6 address to create.
	Name pulumi.StringPtrInput
	// The name of the pool into which creating the IPv6 address.
	Pool pulumi.StringPtrInput
	// The optionally requested IPv6 address.
	RequestIp pulumi.StringPtrInput
	// The name of the space into which creating the IPv6 address.
	Space pulumi.StringPtrInput
	// The name of the subnet into which creating the IPv6 address.
	Subnet pulumi.StringPtrInput
}

func (Ip6AddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ip6AddressState)(nil)).Elem()
}

type ip6AddressArgs struct {
	// The class associated to the IPv6 address.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IPv6 address.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Device Name to associate with the IPv6 address (Require a 'Device Manager' license).
	Device *string `pulumi:"device"`
	// The MAC Address of the IPv6 address to create.
	Mac *string `pulumi:"mac"`
	// The short name or FQDN of the IPv6 address to create.
	Name *string `pulumi:"name"`
	// The name of the pool into which creating the IPv6 address.
	Pool *string `pulumi:"pool"`
	// The optionally requested IPv6 address.
	RequestIp *string `pulumi:"requestIp"`
	// The name of the space into which creating the IPv6 address.
	Space string `pulumi:"space"`
	// The name of the subnet into which creating the IPv6 address.
	Subnet string `pulumi:"subnet"`
}

// The set of arguments for constructing a Ip6Address resource.
type Ip6AddressArgs struct {
	// The class associated to the IPv6 address.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IPv6 address.
	ClassParameters pulumi.StringMapInput
	// Device Name to associate with the IPv6 address (Require a 'Device Manager' license).
	Device pulumi.StringPtrInput
	// The MAC Address of the IPv6 address to create.
	Mac pulumi.StringPtrInput
	// The short name or FQDN of the IPv6 address to create.
	Name pulumi.StringPtrInput
	// The name of the pool into which creating the IPv6 address.
	Pool pulumi.StringPtrInput
	// The optionally requested IPv6 address.
	RequestIp pulumi.StringPtrInput
	// The name of the space into which creating the IPv6 address.
	Space pulumi.StringInput
	// The name of the subnet into which creating the IPv6 address.
	Subnet pulumi.StringInput
}

func (Ip6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ip6AddressArgs)(nil)).Elem()
}

type Ip6AddressInput interface {
	pulumi.Input

	ToIp6AddressOutput() Ip6AddressOutput
	ToIp6AddressOutputWithContext(ctx context.Context) Ip6AddressOutput
}

func (*Ip6Address) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip6Address)(nil)).Elem()
}

func (i *Ip6Address) ToIp6AddressOutput() Ip6AddressOutput {
	return i.ToIp6AddressOutputWithContext(context.Background())
}

func (i *Ip6Address) ToIp6AddressOutputWithContext(ctx context.Context) Ip6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6AddressOutput)
}

// Ip6AddressArrayInput is an input type that accepts Ip6AddressArray and Ip6AddressArrayOutput values.
// You can construct a concrete instance of `Ip6AddressArrayInput` via:
//
//	Ip6AddressArray{ Ip6AddressArgs{...} }
type Ip6AddressArrayInput interface {
	pulumi.Input

	ToIp6AddressArrayOutput() Ip6AddressArrayOutput
	ToIp6AddressArrayOutputWithContext(context.Context) Ip6AddressArrayOutput
}

type Ip6AddressArray []Ip6AddressInput

func (Ip6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip6Address)(nil)).Elem()
}

func (i Ip6AddressArray) ToIp6AddressArrayOutput() Ip6AddressArrayOutput {
	return i.ToIp6AddressArrayOutputWithContext(context.Background())
}

func (i Ip6AddressArray) ToIp6AddressArrayOutputWithContext(ctx context.Context) Ip6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6AddressArrayOutput)
}

// Ip6AddressMapInput is an input type that accepts Ip6AddressMap and Ip6AddressMapOutput values.
// You can construct a concrete instance of `Ip6AddressMapInput` via:
//
//	Ip6AddressMap{ "key": Ip6AddressArgs{...} }
type Ip6AddressMapInput interface {
	pulumi.Input

	ToIp6AddressMapOutput() Ip6AddressMapOutput
	ToIp6AddressMapOutputWithContext(context.Context) Ip6AddressMapOutput
}

type Ip6AddressMap map[string]Ip6AddressInput

func (Ip6AddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip6Address)(nil)).Elem()
}

func (i Ip6AddressMap) ToIp6AddressMapOutput() Ip6AddressMapOutput {
	return i.ToIp6AddressMapOutputWithContext(context.Background())
}

func (i Ip6AddressMap) ToIp6AddressMapOutputWithContext(ctx context.Context) Ip6AddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6AddressMapOutput)
}

type Ip6AddressOutput struct{ *pulumi.OutputState }

func (Ip6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip6Address)(nil)).Elem()
}

func (o Ip6AddressOutput) ToIp6AddressOutput() Ip6AddressOutput {
	return o
}

func (o Ip6AddressOutput) ToIp6AddressOutputWithContext(ctx context.Context) Ip6AddressOutput {
	return o
}

// The provisionned IPv6 address.
func (o Ip6AddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The class associated to the IPv6 address.
func (o Ip6AddressOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the IPv6 address.
func (o Ip6AddressOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// Device Name to associate with the IPv6 address (Require a 'Device Manager' license).
func (o Ip6AddressOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The MAC Address of the IPv6 address to create.
func (o Ip6AddressOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringPtrOutput { return v.Mac }).(pulumi.StringPtrOutput)
}

// The short name or FQDN of the IPv6 address to create.
func (o Ip6AddressOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the pool into which creating the IPv6 address.
func (o Ip6AddressOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringPtrOutput { return v.Pool }).(pulumi.StringPtrOutput)
}

// The optionally requested IPv6 address.
func (o Ip6AddressOutput) RequestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringPtrOutput { return v.RequestIp }).(pulumi.StringPtrOutput)
}

// The name of the space into which creating the IPv6 address.
func (o Ip6AddressOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// The name of the subnet into which creating the IPv6 address.
func (o Ip6AddressOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Address) pulumi.StringOutput { return v.Subnet }).(pulumi.StringOutput)
}

type Ip6AddressArrayOutput struct{ *pulumi.OutputState }

func (Ip6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip6Address)(nil)).Elem()
}

func (o Ip6AddressArrayOutput) ToIp6AddressArrayOutput() Ip6AddressArrayOutput {
	return o
}

func (o Ip6AddressArrayOutput) ToIp6AddressArrayOutputWithContext(ctx context.Context) Ip6AddressArrayOutput {
	return o
}

func (o Ip6AddressArrayOutput) Index(i pulumi.IntInput) Ip6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ip6Address {
		return vs[0].([]*Ip6Address)[vs[1].(int)]
	}).(Ip6AddressOutput)
}

type Ip6AddressMapOutput struct{ *pulumi.OutputState }

func (Ip6AddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip6Address)(nil)).Elem()
}

func (o Ip6AddressMapOutput) ToIp6AddressMapOutput() Ip6AddressMapOutput {
	return o
}

func (o Ip6AddressMapOutput) ToIp6AddressMapOutputWithContext(ctx context.Context) Ip6AddressMapOutput {
	return o
}

func (o Ip6AddressMapOutput) MapIndex(k pulumi.StringInput) Ip6AddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ip6Address {
		return vs[0].(map[string]*Ip6Address)[vs[1].(string)]
	}).(Ip6AddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6AddressInput)(nil)).Elem(), &Ip6Address{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6AddressArrayInput)(nil)).Elem(), Ip6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6AddressMapInput)(nil)).Elem(), Ip6AddressMap{})
	pulumi.RegisterOutputType(Ip6AddressOutput{})
	pulumi.RegisterOutputType(Ip6AddressArrayOutput{})
	pulumi.RegisterOutputType(Ip6AddressMapOutput{})
}
