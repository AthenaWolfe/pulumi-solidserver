// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS Server resource allows to register and configure DNS servers.
// Most of the time, they are just added to a SMART, but they can remain standalone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewDnsServer(ctx, "myFirstDnsServer", &solidserver.DnsServerArgs{
//				Address: pulumi.String("127.0.0.1"),
//				AllowQueries: pulumi.StringArray{
//					pulumi.String("172.16.0.0/12"),
//					pulumi.String("10.0.0.0/8"),
//					pulumi.String("192.168.0.0/24"),
//				},
//				AllowRecursions: pulumi.StringArray{
//					pulumi.String("172.16.0.0/12"),
//					pulumi.String("10.0.0.0/8"),
//					pulumi.String("192.168.0.0/24"),
//				},
//				Comment: pulumi.String("My First DNS Server Autmatically created"),
//				Forward: pulumi.String("first"),
//				Forwarders: pulumi.StringArray{
//					pulumi.String("10.0.0.42"),
//					pulumi.String("10.0.0.43"),
//				},
//				Login:     pulumi.String("admin"),
//				Password:  pulumi.String("admin"),
//				Smart:     pulumi.Any(solidserver_dns_smart.MyFirstDnsSMART.Name),
//				SmartRole: pulumi.String("master"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DnsServer struct {
	pulumi.CustomResourceState

	// The IPv4 address of the DNS server to create.
	Address pulumi.StringOutput `pulumi:"address"`
	// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries pulumi.StringArrayOutput `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions pulumi.StringArrayOutput `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers pulumi.StringArrayOutput `pulumi:"allowTransfers"`
	// The class associated to the DNS server.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the DNS server.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// Custom information about the DNS server.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The forwarding mode of the DNS server (Supported: none, first, only; Default: none).
	Forward pulumi.StringPtrOutput `pulumi:"forward"`
	// The list of forwarders' IP address to be used by the DNS server.
	Forwarders pulumi.StringArrayOutput `pulumi:"forwarders"`
	// The login to use for enrolling of the DNS server.
	Login pulumi.StringOutput `pulumi:"login"`
	// The name of the DNS server to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password to use the enrolling of the DNS server.
	Password pulumi.StringOutput `pulumi:"password"`
	// The recursion mode of the DNS server (Default: true).
	Recursion pulumi.BoolPtrOutput `pulumi:"recursion"`
	// The DNS SMART the DNS server must join.
	Smart pulumi.StringPtrOutput `pulumi:"smart"`
	// The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).
	SmartRole pulumi.StringPtrOutput `pulumi:"smartRole"`
	// The type of DNS server (Supported: ipm (SOLIDserver or Linux Package); Default: ipm).
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDnsServer registers a new resource with the given unique name, arguments, and options.
func NewDnsServer(ctx *pulumi.Context,
	name string, args *DnsServerArgs, opts ...pulumi.ResourceOption) (*DnsServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsServer
	err := ctx.RegisterResource("solidserver:index/dnsServer:DnsServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsServer gets an existing DnsServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsServerState, opts ...pulumi.ResourceOption) (*DnsServer, error) {
	var resource DnsServer
	err := ctx.ReadResource("solidserver:index/dnsServer:DnsServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsServer resources.
type dnsServerState struct {
	// The IPv4 address of the DNS server to create.
	Address *string `pulumi:"address"`
	// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries []string `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions []string `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers []string `pulumi:"allowTransfers"`
	// The class associated to the DNS server.
	Class *string `pulumi:"class"`
	// The class parameters associated to the DNS server.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Custom information about the DNS server.
	Comment *string `pulumi:"comment"`
	// The forwarding mode of the DNS server (Supported: none, first, only; Default: none).
	Forward *string `pulumi:"forward"`
	// The list of forwarders' IP address to be used by the DNS server.
	Forwarders []string `pulumi:"forwarders"`
	// The login to use for enrolling of the DNS server.
	Login *string `pulumi:"login"`
	// The name of the DNS server to create.
	Name *string `pulumi:"name"`
	// The password to use the enrolling of the DNS server.
	Password *string `pulumi:"password"`
	// The recursion mode of the DNS server (Default: true).
	Recursion *bool `pulumi:"recursion"`
	// The DNS SMART the DNS server must join.
	Smart *string `pulumi:"smart"`
	// The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).
	SmartRole *string `pulumi:"smartRole"`
	// The type of DNS server (Supported: ipm (SOLIDserver or Linux Package); Default: ipm).
	Type *string `pulumi:"type"`
}

type DnsServerState struct {
	// The IPv4 address of the DNS server to create.
	Address pulumi.StringPtrInput
	// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries pulumi.StringArrayInput
	// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions pulumi.StringArrayInput
	// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers pulumi.StringArrayInput
	// The class associated to the DNS server.
	Class pulumi.StringPtrInput
	// The class parameters associated to the DNS server.
	ClassParameters pulumi.StringMapInput
	// Custom information about the DNS server.
	Comment pulumi.StringPtrInput
	// The forwarding mode of the DNS server (Supported: none, first, only; Default: none).
	Forward pulumi.StringPtrInput
	// The list of forwarders' IP address to be used by the DNS server.
	Forwarders pulumi.StringArrayInput
	// The login to use for enrolling of the DNS server.
	Login pulumi.StringPtrInput
	// The name of the DNS server to create.
	Name pulumi.StringPtrInput
	// The password to use the enrolling of the DNS server.
	Password pulumi.StringPtrInput
	// The recursion mode of the DNS server (Default: true).
	Recursion pulumi.BoolPtrInput
	// The DNS SMART the DNS server must join.
	Smart pulumi.StringPtrInput
	// The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).
	SmartRole pulumi.StringPtrInput
	// The type of DNS server (Supported: ipm (SOLIDserver or Linux Package); Default: ipm).
	Type pulumi.StringPtrInput
}

func (DnsServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsServerState)(nil)).Elem()
}

type dnsServerArgs struct {
	// The IPv4 address of the DNS server to create.
	Address string `pulumi:"address"`
	// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries []string `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions []string `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers []string `pulumi:"allowTransfers"`
	// The class associated to the DNS server.
	Class *string `pulumi:"class"`
	// The class parameters associated to the DNS server.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Custom information about the DNS server.
	Comment *string `pulumi:"comment"`
	// The forwarding mode of the DNS server (Supported: none, first, only; Default: none).
	Forward *string `pulumi:"forward"`
	// The list of forwarders' IP address to be used by the DNS server.
	Forwarders []string `pulumi:"forwarders"`
	// The login to use for enrolling of the DNS server.
	Login string `pulumi:"login"`
	// The name of the DNS server to create.
	Name *string `pulumi:"name"`
	// The password to use the enrolling of the DNS server.
	Password string `pulumi:"password"`
	// The recursion mode of the DNS server (Default: true).
	Recursion *bool `pulumi:"recursion"`
	// The DNS SMART the DNS server must join.
	Smart *string `pulumi:"smart"`
	// The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).
	SmartRole *string `pulumi:"smartRole"`
}

// The set of arguments for constructing a DnsServer resource.
type DnsServerArgs struct {
	// The IPv4 address of the DNS server to create.
	Address pulumi.StringInput
	// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries pulumi.StringArrayInput
	// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions pulumi.StringArrayInput
	// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers pulumi.StringArrayInput
	// The class associated to the DNS server.
	Class pulumi.StringPtrInput
	// The class parameters associated to the DNS server.
	ClassParameters pulumi.StringMapInput
	// Custom information about the DNS server.
	Comment pulumi.StringPtrInput
	// The forwarding mode of the DNS server (Supported: none, first, only; Default: none).
	Forward pulumi.StringPtrInput
	// The list of forwarders' IP address to be used by the DNS server.
	Forwarders pulumi.StringArrayInput
	// The login to use for enrolling of the DNS server.
	Login pulumi.StringInput
	// The name of the DNS server to create.
	Name pulumi.StringPtrInput
	// The password to use the enrolling of the DNS server.
	Password pulumi.StringInput
	// The recursion mode of the DNS server (Default: true).
	Recursion pulumi.BoolPtrInput
	// The DNS SMART the DNS server must join.
	Smart pulumi.StringPtrInput
	// The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).
	SmartRole pulumi.StringPtrInput
}

func (DnsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsServerArgs)(nil)).Elem()
}

type DnsServerInput interface {
	pulumi.Input

	ToDnsServerOutput() DnsServerOutput
	ToDnsServerOutputWithContext(ctx context.Context) DnsServerOutput
}

func (*DnsServer) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsServer)(nil)).Elem()
}

func (i *DnsServer) ToDnsServerOutput() DnsServerOutput {
	return i.ToDnsServerOutputWithContext(context.Background())
}

func (i *DnsServer) ToDnsServerOutputWithContext(ctx context.Context) DnsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsServerOutput)
}

// DnsServerArrayInput is an input type that accepts DnsServerArray and DnsServerArrayOutput values.
// You can construct a concrete instance of `DnsServerArrayInput` via:
//
//	DnsServerArray{ DnsServerArgs{...} }
type DnsServerArrayInput interface {
	pulumi.Input

	ToDnsServerArrayOutput() DnsServerArrayOutput
	ToDnsServerArrayOutputWithContext(context.Context) DnsServerArrayOutput
}

type DnsServerArray []DnsServerInput

func (DnsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsServer)(nil)).Elem()
}

func (i DnsServerArray) ToDnsServerArrayOutput() DnsServerArrayOutput {
	return i.ToDnsServerArrayOutputWithContext(context.Background())
}

func (i DnsServerArray) ToDnsServerArrayOutputWithContext(ctx context.Context) DnsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsServerArrayOutput)
}

// DnsServerMapInput is an input type that accepts DnsServerMap and DnsServerMapOutput values.
// You can construct a concrete instance of `DnsServerMapInput` via:
//
//	DnsServerMap{ "key": DnsServerArgs{...} }
type DnsServerMapInput interface {
	pulumi.Input

	ToDnsServerMapOutput() DnsServerMapOutput
	ToDnsServerMapOutputWithContext(context.Context) DnsServerMapOutput
}

type DnsServerMap map[string]DnsServerInput

func (DnsServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsServer)(nil)).Elem()
}

func (i DnsServerMap) ToDnsServerMapOutput() DnsServerMapOutput {
	return i.ToDnsServerMapOutputWithContext(context.Background())
}

func (i DnsServerMap) ToDnsServerMapOutputWithContext(ctx context.Context) DnsServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsServerMapOutput)
}

type DnsServerOutput struct{ *pulumi.OutputState }

func (DnsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsServer)(nil)).Elem()
}

func (o DnsServerOutput) ToDnsServerOutput() DnsServerOutput {
	return o
}

func (o DnsServerOutput) ToDnsServerOutputWithContext(ctx context.Context) DnsServerOutput {
	return o
}

// The IPv4 address of the DNS server to create.
func (o DnsServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsServerOutput) AllowQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringArrayOutput { return v.AllowQueries }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsServerOutput) AllowRecursions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringArrayOutput { return v.AllowRecursions }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsServerOutput) AllowTransfers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringArrayOutput { return v.AllowTransfers }).(pulumi.StringArrayOutput)
}

// The class associated to the DNS server.
func (o DnsServerOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the DNS server.
func (o DnsServerOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// Custom information about the DNS server.
func (o DnsServerOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// The forwarding mode of the DNS server (Supported: none, first, only; Default: none).
func (o DnsServerOutput) Forward() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringPtrOutput { return v.Forward }).(pulumi.StringPtrOutput)
}

// The list of forwarders' IP address to be used by the DNS server.
func (o DnsServerOutput) Forwarders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringArrayOutput { return v.Forwarders }).(pulumi.StringArrayOutput)
}

// The login to use for enrolling of the DNS server.
func (o DnsServerOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// The name of the DNS server to create.
func (o DnsServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password to use the enrolling of the DNS server.
func (o DnsServerOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The recursion mode of the DNS server (Default: true).
func (o DnsServerOutput) Recursion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.BoolPtrOutput { return v.Recursion }).(pulumi.BoolPtrOutput)
}

// The DNS SMART the DNS server must join.
func (o DnsServerOutput) Smart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringPtrOutput { return v.Smart }).(pulumi.StringPtrOutput)
}

// The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).
func (o DnsServerOutput) SmartRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringPtrOutput { return v.SmartRole }).(pulumi.StringPtrOutput)
}

// The type of DNS server (Supported: ipm (SOLIDserver or Linux Package); Default: ipm).
func (o DnsServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsServer) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DnsServerArrayOutput struct{ *pulumi.OutputState }

func (DnsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsServer)(nil)).Elem()
}

func (o DnsServerArrayOutput) ToDnsServerArrayOutput() DnsServerArrayOutput {
	return o
}

func (o DnsServerArrayOutput) ToDnsServerArrayOutputWithContext(ctx context.Context) DnsServerArrayOutput {
	return o
}

func (o DnsServerArrayOutput) Index(i pulumi.IntInput) DnsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsServer {
		return vs[0].([]*DnsServer)[vs[1].(int)]
	}).(DnsServerOutput)
}

type DnsServerMapOutput struct{ *pulumi.OutputState }

func (DnsServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsServer)(nil)).Elem()
}

func (o DnsServerMapOutput) ToDnsServerMapOutput() DnsServerMapOutput {
	return o
}

func (o DnsServerMapOutput) ToDnsServerMapOutputWithContext(ctx context.Context) DnsServerMapOutput {
	return o
}

func (o DnsServerMapOutput) MapIndex(k pulumi.StringInput) DnsServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsServer {
		return vs[0].(map[string]*DnsServer)[vs[1].(string)]
	}).(DnsServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsServerInput)(nil)).Elem(), &DnsServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsServerArrayInput)(nil)).Elem(), DnsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsServerMapInput)(nil)).Elem(), DnsServerMap{})
	pulumi.RegisterOutputType(DnsServerOutput{})
	pulumi.RegisterOutputType(DnsServerArrayOutput{})
	pulumi.RegisterOutputType(DnsServerMapOutput{})
}
