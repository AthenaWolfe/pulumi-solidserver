// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IP aliases resource allows to create and manage multiple names for a single IP address.
// They are pretty useful to keep IPAM in sync with the DNS handling CNAME(s) from a single repository.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewIpAlias(ctx, "myFirstIPAlias", &solidserver.IpAliasArgs{
//				Address: pulumi.Any(solidserver_ip_address.MyFirstIPAddress.Address),
//				Space:   pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpAlias struct {
	pulumi.CustomResourceState

	// The IP address for which the alias will be associated to.
	Address pulumi.StringOutput `pulumi:"address"`
	// The FQDN of the IP address alias to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the space to which the address belong to.
	Space pulumi.StringOutput `pulumi:"space"`
	// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewIpAlias registers a new resource with the given unique name, arguments, and options.
func NewIpAlias(ctx *pulumi.Context,
	name string, args *IpAliasArgs, opts ...pulumi.ResourceOption) (*IpAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpAlias
	err := ctx.RegisterResource("solidserver:index/ipAlias:IpAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpAlias gets an existing IpAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpAliasState, opts ...pulumi.ResourceOption) (*IpAlias, error) {
	var resource IpAlias
	err := ctx.ReadResource("solidserver:index/ipAlias:IpAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpAlias resources.
type ipAliasState struct {
	// The IP address for which the alias will be associated to.
	Address *string `pulumi:"address"`
	// The FQDN of the IP address alias to create.
	Name *string `pulumi:"name"`
	// The name of the space to which the address belong to.
	Space *string `pulumi:"space"`
	// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
	Type *string `pulumi:"type"`
}

type IpAliasState struct {
	// The IP address for which the alias will be associated to.
	Address pulumi.StringPtrInput
	// The FQDN of the IP address alias to create.
	Name pulumi.StringPtrInput
	// The name of the space to which the address belong to.
	Space pulumi.StringPtrInput
	// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
	Type pulumi.StringPtrInput
}

func (IpAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAliasState)(nil)).Elem()
}

type ipAliasArgs struct {
	// The IP address for which the alias will be associated to.
	Address string `pulumi:"address"`
	// The FQDN of the IP address alias to create.
	Name *string `pulumi:"name"`
	// The name of the space to which the address belong to.
	Space string `pulumi:"space"`
	// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a IpAlias resource.
type IpAliasArgs struct {
	// The IP address for which the alias will be associated to.
	Address pulumi.StringInput
	// The FQDN of the IP address alias to create.
	Name pulumi.StringPtrInput
	// The name of the space to which the address belong to.
	Space pulumi.StringInput
	// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
	Type pulumi.StringPtrInput
}

func (IpAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipAliasArgs)(nil)).Elem()
}

type IpAliasInput interface {
	pulumi.Input

	ToIpAliasOutput() IpAliasOutput
	ToIpAliasOutputWithContext(ctx context.Context) IpAliasOutput
}

func (*IpAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAlias)(nil)).Elem()
}

func (i *IpAlias) ToIpAliasOutput() IpAliasOutput {
	return i.ToIpAliasOutputWithContext(context.Background())
}

func (i *IpAlias) ToIpAliasOutputWithContext(ctx context.Context) IpAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAliasOutput)
}

// IpAliasArrayInput is an input type that accepts IpAliasArray and IpAliasArrayOutput values.
// You can construct a concrete instance of `IpAliasArrayInput` via:
//
//	IpAliasArray{ IpAliasArgs{...} }
type IpAliasArrayInput interface {
	pulumi.Input

	ToIpAliasArrayOutput() IpAliasArrayOutput
	ToIpAliasArrayOutputWithContext(context.Context) IpAliasArrayOutput
}

type IpAliasArray []IpAliasInput

func (IpAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAlias)(nil)).Elem()
}

func (i IpAliasArray) ToIpAliasArrayOutput() IpAliasArrayOutput {
	return i.ToIpAliasArrayOutputWithContext(context.Background())
}

func (i IpAliasArray) ToIpAliasArrayOutputWithContext(ctx context.Context) IpAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAliasArrayOutput)
}

// IpAliasMapInput is an input type that accepts IpAliasMap and IpAliasMapOutput values.
// You can construct a concrete instance of `IpAliasMapInput` via:
//
//	IpAliasMap{ "key": IpAliasArgs{...} }
type IpAliasMapInput interface {
	pulumi.Input

	ToIpAliasMapOutput() IpAliasMapOutput
	ToIpAliasMapOutputWithContext(context.Context) IpAliasMapOutput
}

type IpAliasMap map[string]IpAliasInput

func (IpAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAlias)(nil)).Elem()
}

func (i IpAliasMap) ToIpAliasMapOutput() IpAliasMapOutput {
	return i.ToIpAliasMapOutputWithContext(context.Background())
}

func (i IpAliasMap) ToIpAliasMapOutputWithContext(ctx context.Context) IpAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpAliasMapOutput)
}

type IpAliasOutput struct{ *pulumi.OutputState }

func (IpAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpAlias)(nil)).Elem()
}

func (o IpAliasOutput) ToIpAliasOutput() IpAliasOutput {
	return o
}

func (o IpAliasOutput) ToIpAliasOutputWithContext(ctx context.Context) IpAliasOutput {
	return o
}

// The IP address for which the alias will be associated to.
func (o IpAliasOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAlias) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The FQDN of the IP address alias to create.
func (o IpAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAlias) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the space to which the address belong to.
func (o IpAliasOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *IpAlias) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// The type of the Alias to create (Supported: A, CNAME; Default: CNAME).
func (o IpAliasOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpAlias) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type IpAliasArrayOutput struct{ *pulumi.OutputState }

func (IpAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpAlias)(nil)).Elem()
}

func (o IpAliasArrayOutput) ToIpAliasArrayOutput() IpAliasArrayOutput {
	return o
}

func (o IpAliasArrayOutput) ToIpAliasArrayOutputWithContext(ctx context.Context) IpAliasArrayOutput {
	return o
}

func (o IpAliasArrayOutput) Index(i pulumi.IntInput) IpAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpAlias {
		return vs[0].([]*IpAlias)[vs[1].(int)]
	}).(IpAliasOutput)
}

type IpAliasMapOutput struct{ *pulumi.OutputState }

func (IpAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpAlias)(nil)).Elem()
}

func (o IpAliasMapOutput) ToIpAliasMapOutput() IpAliasMapOutput {
	return o
}

func (o IpAliasMapOutput) ToIpAliasMapOutputWithContext(ctx context.Context) IpAliasMapOutput {
	return o
}

func (o IpAliasMapOutput) MapIndex(k pulumi.StringInput) IpAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpAlias {
		return vs[0].(map[string]*IpAlias)[vs[1].(string)]
	}).(IpAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpAliasInput)(nil)).Elem(), &IpAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAliasArrayInput)(nil)).Elem(), IpAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpAliasMapInput)(nil)).Elem(), IpAliasMap{})
	pulumi.RegisterOutputType(IpAliasOutput{})
	pulumi.RegisterOutputType(IpAliasArrayOutput{})
	pulumi.RegisterOutputType(IpAliasMapOutput{})
}
