// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Application resource allows to create and manage applications that can be used to implement traffic policies in order
// to optimize the routing of the associated traffic according to the selected loadbalancing strategy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewAppApplication(ctx, "myFirstApplicaton", &solidserver.AppApplicationArgs{
//				Class: pulumi.String("INTERNAL_APP"),
//				ClassParameters: pulumi.StringMap{
//					"contact": pulumi.String("a.smith@mycompany.priv"),
//					"owner":   pulumi.String("MR. Smith"),
//				},
//				Fqdn: pulumi.String("myfirstapp.priv"),
//				GslbMembers: pulumi.StringArray{
//					pulumi.String("ns0.priv"),
//					pulumi.String("ns1.priv"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AppApplication struct {
	pulumi.CustomResourceState

	// The class associated to the application.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to application.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// The Fully Qualified Domain Name of the application to create.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The names of the GSLB servers applying the application traffic policy.
	GslbMembers pulumi.StringArrayOutput `pulumi:"gslbMembers"`
	// The name of the application to create.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAppApplication registers a new resource with the given unique name, arguments, and options.
func NewAppApplication(ctx *pulumi.Context,
	name string, args *AppApplicationArgs, opts ...pulumi.ResourceOption) (*AppApplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fqdn == nil {
		return nil, errors.New("invalid value for required argument 'Fqdn'")
	}
	if args.GslbMembers == nil {
		return nil, errors.New("invalid value for required argument 'GslbMembers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppApplication
	err := ctx.RegisterResource("solidserver:index/appApplication:AppApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppApplication gets an existing AppApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppApplicationState, opts ...pulumi.ResourceOption) (*AppApplication, error) {
	var resource AppApplication
	err := ctx.ReadResource("solidserver:index/appApplication:AppApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppApplication resources.
type appApplicationState struct {
	// The class associated to the application.
	Class *string `pulumi:"class"`
	// The class parameters associated to application.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The Fully Qualified Domain Name of the application to create.
	Fqdn *string `pulumi:"fqdn"`
	// The names of the GSLB servers applying the application traffic policy.
	GslbMembers []string `pulumi:"gslbMembers"`
	// The name of the application to create.
	Name *string `pulumi:"name"`
}

type AppApplicationState struct {
	// The class associated to the application.
	Class pulumi.StringPtrInput
	// The class parameters associated to application.
	ClassParameters pulumi.StringMapInput
	// The Fully Qualified Domain Name of the application to create.
	Fqdn pulumi.StringPtrInput
	// The names of the GSLB servers applying the application traffic policy.
	GslbMembers pulumi.StringArrayInput
	// The name of the application to create.
	Name pulumi.StringPtrInput
}

func (AppApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*appApplicationState)(nil)).Elem()
}

type appApplicationArgs struct {
	// The class associated to the application.
	Class *string `pulumi:"class"`
	// The class parameters associated to application.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The Fully Qualified Domain Name of the application to create.
	Fqdn string `pulumi:"fqdn"`
	// The names of the GSLB servers applying the application traffic policy.
	GslbMembers []string `pulumi:"gslbMembers"`
	// The name of the application to create.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppApplication resource.
type AppApplicationArgs struct {
	// The class associated to the application.
	Class pulumi.StringPtrInput
	// The class parameters associated to application.
	ClassParameters pulumi.StringMapInput
	// The Fully Qualified Domain Name of the application to create.
	Fqdn pulumi.StringInput
	// The names of the GSLB servers applying the application traffic policy.
	GslbMembers pulumi.StringArrayInput
	// The name of the application to create.
	Name pulumi.StringPtrInput
}

func (AppApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appApplicationArgs)(nil)).Elem()
}

type AppApplicationInput interface {
	pulumi.Input

	ToAppApplicationOutput() AppApplicationOutput
	ToAppApplicationOutputWithContext(ctx context.Context) AppApplicationOutput
}

func (*AppApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**AppApplication)(nil)).Elem()
}

func (i *AppApplication) ToAppApplicationOutput() AppApplicationOutput {
	return i.ToAppApplicationOutputWithContext(context.Background())
}

func (i *AppApplication) ToAppApplicationOutputWithContext(ctx context.Context) AppApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppApplicationOutput)
}

// AppApplicationArrayInput is an input type that accepts AppApplicationArray and AppApplicationArrayOutput values.
// You can construct a concrete instance of `AppApplicationArrayInput` via:
//
//	AppApplicationArray{ AppApplicationArgs{...} }
type AppApplicationArrayInput interface {
	pulumi.Input

	ToAppApplicationArrayOutput() AppApplicationArrayOutput
	ToAppApplicationArrayOutputWithContext(context.Context) AppApplicationArrayOutput
}

type AppApplicationArray []AppApplicationInput

func (AppApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppApplication)(nil)).Elem()
}

func (i AppApplicationArray) ToAppApplicationArrayOutput() AppApplicationArrayOutput {
	return i.ToAppApplicationArrayOutputWithContext(context.Background())
}

func (i AppApplicationArray) ToAppApplicationArrayOutputWithContext(ctx context.Context) AppApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppApplicationArrayOutput)
}

// AppApplicationMapInput is an input type that accepts AppApplicationMap and AppApplicationMapOutput values.
// You can construct a concrete instance of `AppApplicationMapInput` via:
//
//	AppApplicationMap{ "key": AppApplicationArgs{...} }
type AppApplicationMapInput interface {
	pulumi.Input

	ToAppApplicationMapOutput() AppApplicationMapOutput
	ToAppApplicationMapOutputWithContext(context.Context) AppApplicationMapOutput
}

type AppApplicationMap map[string]AppApplicationInput

func (AppApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppApplication)(nil)).Elem()
}

func (i AppApplicationMap) ToAppApplicationMapOutput() AppApplicationMapOutput {
	return i.ToAppApplicationMapOutputWithContext(context.Background())
}

func (i AppApplicationMap) ToAppApplicationMapOutputWithContext(ctx context.Context) AppApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppApplicationMapOutput)
}

type AppApplicationOutput struct{ *pulumi.OutputState }

func (AppApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppApplication)(nil)).Elem()
}

func (o AppApplicationOutput) ToAppApplicationOutput() AppApplicationOutput {
	return o
}

func (o AppApplicationOutput) ToAppApplicationOutputWithContext(ctx context.Context) AppApplicationOutput {
	return o
}

// The class associated to the application.
func (o AppApplicationOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppApplication) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to application.
func (o AppApplicationOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AppApplication) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// The Fully Qualified Domain Name of the application to create.
func (o AppApplicationOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AppApplication) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The names of the GSLB servers applying the application traffic policy.
func (o AppApplicationOutput) GslbMembers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AppApplication) pulumi.StringArrayOutput { return v.GslbMembers }).(pulumi.StringArrayOutput)
}

// The name of the application to create.
func (o AppApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AppApplicationArrayOutput struct{ *pulumi.OutputState }

func (AppApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppApplication)(nil)).Elem()
}

func (o AppApplicationArrayOutput) ToAppApplicationArrayOutput() AppApplicationArrayOutput {
	return o
}

func (o AppApplicationArrayOutput) ToAppApplicationArrayOutputWithContext(ctx context.Context) AppApplicationArrayOutput {
	return o
}

func (o AppApplicationArrayOutput) Index(i pulumi.IntInput) AppApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppApplication {
		return vs[0].([]*AppApplication)[vs[1].(int)]
	}).(AppApplicationOutput)
}

type AppApplicationMapOutput struct{ *pulumi.OutputState }

func (AppApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppApplication)(nil)).Elem()
}

func (o AppApplicationMapOutput) ToAppApplicationMapOutput() AppApplicationMapOutput {
	return o
}

func (o AppApplicationMapOutput) ToAppApplicationMapOutputWithContext(ctx context.Context) AppApplicationMapOutput {
	return o
}

func (o AppApplicationMapOutput) MapIndex(k pulumi.StringInput) AppApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppApplication {
		return vs[0].(map[string]*AppApplication)[vs[1].(string)]
	}).(AppApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppApplicationInput)(nil)).Elem(), &AppApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppApplicationArrayInput)(nil)).Elem(), AppApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppApplicationMapInput)(nil)).Elem(), AppApplicationMap{})
	pulumi.RegisterOutputType(AppApplicationOutput{})
	pulumi.RegisterOutputType(AppApplicationArrayOutput{})
	pulumi.RegisterOutputType(AppApplicationMapOutput{})
}
