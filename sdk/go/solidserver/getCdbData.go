// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Custom DB Data data-source allows to retrieve custom database entries stored within SOLIDserver.
// This custom database entries can be leveraged within object classes and wizards in order to store custom meta-data.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.LookupCdbData(ctx, &solidserver.LookupCdbDataArgs{
//				CustomDb: "myFirstCustomDB",
//				Value1:   "FR",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCdbData(ctx *pulumi.Context, args *LookupCdbDataArgs, opts ...pulumi.InvokeOption) (*LookupCdbDataResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCdbDataResult
	err := ctx.Invoke("solidserver:index/getCdbData:getCdbData", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCdbData.
type LookupCdbDataArgs struct {
	// The name of the custom DB.
	CustomDb string `pulumi:"customDb"`
	// The name of the value 1
	Value1 string `pulumi:"value1"`
}

// A collection of values returned by getCdbData.
type LookupCdbDataResult struct {
	// The name of the custom DB.
	CustomDb string `pulumi:"customDb"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the value 1
	Value1 string `pulumi:"value1"`
	// The name of the value 10
	Value10 string `pulumi:"value10"`
	// The name of the value 2
	Value2 string `pulumi:"value2"`
	// The name of the value 3
	Value3 string `pulumi:"value3"`
	// The name of the value 4
	Value4 string `pulumi:"value4"`
	// The name of the value 5
	Value5 string `pulumi:"value5"`
	// The name of the value 6
	Value6 string `pulumi:"value6"`
	// The name of the value 7
	Value7 string `pulumi:"value7"`
	// The name of the value 8
	Value8 string `pulumi:"value8"`
	// The name of the value 9
	Value9 string `pulumi:"value9"`
}

func LookupCdbDataOutput(ctx *pulumi.Context, args LookupCdbDataOutputArgs, opts ...pulumi.InvokeOption) LookupCdbDataResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCdbDataResult, error) {
			args := v.(LookupCdbDataArgs)
			r, err := LookupCdbData(ctx, &args, opts...)
			var s LookupCdbDataResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCdbDataResultOutput)
}

// A collection of arguments for invoking getCdbData.
type LookupCdbDataOutputArgs struct {
	// The name of the custom DB.
	CustomDb pulumi.StringInput `pulumi:"customDb"`
	// The name of the value 1
	Value1 pulumi.StringInput `pulumi:"value1"`
}

func (LookupCdbDataOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdbDataArgs)(nil)).Elem()
}

// A collection of values returned by getCdbData.
type LookupCdbDataResultOutput struct{ *pulumi.OutputState }

func (LookupCdbDataResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdbDataResult)(nil)).Elem()
}

func (o LookupCdbDataResultOutput) ToLookupCdbDataResultOutput() LookupCdbDataResultOutput {
	return o
}

func (o LookupCdbDataResultOutput) ToLookupCdbDataResultOutputWithContext(ctx context.Context) LookupCdbDataResultOutput {
	return o
}

// The name of the custom DB.
func (o LookupCdbDataResultOutput) CustomDb() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.CustomDb }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCdbDataResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the value 1
func (o LookupCdbDataResultOutput) Value1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value1 }).(pulumi.StringOutput)
}

// The name of the value 10
func (o LookupCdbDataResultOutput) Value10() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value10 }).(pulumi.StringOutput)
}

// The name of the value 2
func (o LookupCdbDataResultOutput) Value2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value2 }).(pulumi.StringOutput)
}

// The name of the value 3
func (o LookupCdbDataResultOutput) Value3() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value3 }).(pulumi.StringOutput)
}

// The name of the value 4
func (o LookupCdbDataResultOutput) Value4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value4 }).(pulumi.StringOutput)
}

// The name of the value 5
func (o LookupCdbDataResultOutput) Value5() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value5 }).(pulumi.StringOutput)
}

// The name of the value 6
func (o LookupCdbDataResultOutput) Value6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value6 }).(pulumi.StringOutput)
}

// The name of the value 7
func (o LookupCdbDataResultOutput) Value7() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value7 }).(pulumi.StringOutput)
}

// The name of the value 8
func (o LookupCdbDataResultOutput) Value8() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value8 }).(pulumi.StringOutput)
}

// The name of the value 9
func (o LookupCdbDataResultOutput) Value9() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdbDataResult) string { return v.Value9 }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCdbDataResultOutput{})
}
