// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS server data-source allows to retrieve information about DNS servers.
// Most of the time, they are just added to a SMART, but they can remain standalone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.LookupDnsServer(ctx, &solidserver.LookupDnsServerArgs{
//				Name: "ns.local",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsServer(ctx *pulumi.Context, args *LookupDnsServerArgs, opts ...pulumi.InvokeOption) (*LookupDnsServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsServerResult
	err := ctx.Invoke("solidserver:index/getDnsServer:getDnsServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsServer.
type LookupDnsServerArgs struct {
	// The name of the DNS server.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDnsServer.
type LookupDnsServerResult struct {
	// IPv4 address of the DNS server.
	Address string `pulumi:"address"`
	// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).
	AllowQueries []string `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).
	AllowRecursions []string `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).
	AllowTransfers []string `pulumi:"allowTransfers"`
	// The class associated to the DNS server.
	Class string `pulumi:"class"`
	// The class parameters associated to the DNS server.
	ClassParameters map[string]interface{} `pulumi:"classParameters"`
	// Custom information about the DNS server.
	Comment string `pulumi:"comment"`
	// The forwarding mode of the DNS server (disabled if empty).
	Forward string `pulumi:"forward"`
	// The IP address list of the forwarder(s) configured on the DNS server.
	Forwarders []string `pulumi:"forwarders"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the DNS server.
	Name string `pulumi:"name"`
	// The recursion status of the DNS server.
	Recursion bool `pulumi:"recursion"`
	// The type of DNS server (ipm (SOLIDserver DNS)|msdaemon (Microsoft DNS)|ans (Nominum)|aws (AWS Route-53)|other (Other DNS)).
	Type string `pulumi:"type"`
	// DNS Engine Version.
	Version string `pulumi:"version"`
}

func LookupDnsServerOutput(ctx *pulumi.Context, args LookupDnsServerOutputArgs, opts ...pulumi.InvokeOption) LookupDnsServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsServerResult, error) {
			args := v.(LookupDnsServerArgs)
			r, err := LookupDnsServer(ctx, &args, opts...)
			var s LookupDnsServerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDnsServerResultOutput)
}

// A collection of arguments for invoking getDnsServer.
type LookupDnsServerOutputArgs struct {
	// The name of the DNS server.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDnsServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsServerArgs)(nil)).Elem()
}

// A collection of values returned by getDnsServer.
type LookupDnsServerResultOutput struct{ *pulumi.OutputState }

func (LookupDnsServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsServerResult)(nil)).Elem()
}

func (o LookupDnsServerResultOutput) ToLookupDnsServerResultOutput() LookupDnsServerResultOutput {
	return o
}

func (o LookupDnsServerResultOutput) ToLookupDnsServerResultOutputWithContext(ctx context.Context) LookupDnsServerResultOutput {
	return o
}

// IPv4 address of the DNS server.
func (o LookupDnsServerResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Address }).(pulumi.StringOutput)
}

// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).
func (o LookupDnsServerResultOutput) AllowQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsServerResult) []string { return v.AllowQueries }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).
func (o LookupDnsServerResultOutput) AllowRecursions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsServerResult) []string { return v.AllowRecursions }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).
func (o LookupDnsServerResultOutput) AllowTransfers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsServerResult) []string { return v.AllowTransfers }).(pulumi.StringArrayOutput)
}

// The class associated to the DNS server.
func (o LookupDnsServerResultOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Class }).(pulumi.StringOutput)
}

// The class parameters associated to the DNS server.
func (o LookupDnsServerResultOutput) ClassParameters() pulumi.MapOutput {
	return o.ApplyT(func(v LookupDnsServerResult) map[string]interface{} { return v.ClassParameters }).(pulumi.MapOutput)
}

// Custom information about the DNS server.
func (o LookupDnsServerResultOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Comment }).(pulumi.StringOutput)
}

// The forwarding mode of the DNS server (disabled if empty).
func (o LookupDnsServerResultOutput) Forward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Forward }).(pulumi.StringOutput)
}

// The IP address list of the forwarder(s) configured on the DNS server.
func (o LookupDnsServerResultOutput) Forwarders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsServerResult) []string { return v.Forwarders }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDnsServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the DNS server.
func (o LookupDnsServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// The recursion status of the DNS server.
func (o LookupDnsServerResultOutput) Recursion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsServerResult) bool { return v.Recursion }).(pulumi.BoolOutput)
}

// The type of DNS server (ipm (SOLIDserver DNS)|msdaemon (Microsoft DNS)|ans (Nominum)|aws (AWS Route-53)|other (Other DNS)).
func (o LookupDnsServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Type }).(pulumi.StringOutput)
}

// DNS Engine Version.
func (o LookupDnsServerResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsServerResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsServerResultOutput{})
}
