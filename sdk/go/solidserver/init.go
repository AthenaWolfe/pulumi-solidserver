// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"fmt"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "solidserver:index/appApplication:AppApplication":
		r = &AppApplication{}
	case "solidserver:index/appNode:AppNode":
		r = &AppNode{}
	case "solidserver:index/appPool:AppPool":
		r = &AppPool{}
	case "solidserver:index/cdb:Cdb":
		r = &Cdb{}
	case "solidserver:index/cdbData:CdbData":
		r = &CdbData{}
	case "solidserver:index/device:Device":
		r = &Device{}
	case "solidserver:index/dnsForwardZone:DnsForwardZone":
		r = &DnsForwardZone{}
	case "solidserver:index/dnsRr:DnsRr":
		r = &DnsRr{}
	case "solidserver:index/dnsServer:DnsServer":
		r = &DnsServer{}
	case "solidserver:index/dnsSmart:DnsSmart":
		r = &DnsSmart{}
	case "solidserver:index/dnsView:DnsView":
		r = &DnsView{}
	case "solidserver:index/dnsZone:DnsZone":
		r = &DnsZone{}
	case "solidserver:index/ip6Address:Ip6Address":
		r = &Ip6Address{}
	case "solidserver:index/ip6Alias:Ip6Alias":
		r = &Ip6Alias{}
	case "solidserver:index/ip6Mac:Ip6Mac":
		r = &Ip6Mac{}
	case "solidserver:index/ip6Pool:Ip6Pool":
		r = &Ip6Pool{}
	case "solidserver:index/ip6Subnet:Ip6Subnet":
		r = &Ip6Subnet{}
	case "solidserver:index/ipAddress:IpAddress":
		r = &IpAddress{}
	case "solidserver:index/ipAlias:IpAlias":
		r = &IpAlias{}
	case "solidserver:index/ipMac:IpMac":
		r = &IpMac{}
	case "solidserver:index/ipPool:IpPool":
		r = &IpPool{}
	case "solidserver:index/ipSpace:IpSpace":
		r = &IpSpace{}
	case "solidserver:index/ipSubnet:IpSubnet":
		r = &IpSubnet{}
	case "solidserver:index/user:User":
		r = &User{}
	case "solidserver:index/usergroup:Usergroup":
		r = &Usergroup{}
	case "solidserver:index/vlan:Vlan":
		r = &Vlan{}
	case "solidserver:index/vlanDomain:VlanDomain":
		r = &VlanDomain{}
	case "solidserver:index/vlanRange:VlanRange":
		r = &VlanRange{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:solidserver" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/appApplication",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/appNode",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/appPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/cdb",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/cdbData",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/device",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/dnsForwardZone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/dnsRr",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/dnsServer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/dnsSmart",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/dnsView",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/dnsZone",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ip6Address",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ip6Alias",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ip6Mac",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ip6Pool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ip6Subnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ipAddress",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ipAlias",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ipMac",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ipPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ipSpace",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/ipSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/usergroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/vlan",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/vlanDomain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"solidserver",
		"index/vlanRange",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"solidserver",
		&pkg{version},
	)
}
