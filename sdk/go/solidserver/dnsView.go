// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS View resource allows to create and configure DNS views.
// View(s) are virutal containers mostly used to implement DNS split horizon
// providing different answers depending on matching criterias.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewDnsView(ctx, "myFirstDnsView", &solidserver.DnsViewArgs{
//				Dnsserver: pulumi.Any(solidserver_dns_server.MyFirstDnsServer.Name),
//				Recursion: pulumi.Bool(true),
//				Forward:   pulumi.String("first"),
//				Forwarders: pulumi.StringArray{
//					pulumi.String("8.8.8.8"),
//					pulumi.String("8.8.4.4"),
//				},
//				MatchClients: pulumi.StringArray{
//					pulumi.String("172.16.0.0/12"),
//					pulumi.String("192.168.0.0/24"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				solidserver_dns_server.MyFirstDnsServer,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DnsView struct {
	pulumi.CustomResourceState

	// A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries pulumi.StringArrayOutput `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions pulumi.StringArrayOutput `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers pulumi.StringArrayOutput `pulumi:"allowTransfers"`
	// The class associated to the DNS view.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the view.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver pulumi.StringOutput `pulumi:"dnsserver"`
	// The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
	Forward pulumi.StringPtrOutput `pulumi:"forward"`
	// The IP address list of the forwarder(s) configured to configure on the DNS SMART.
	Forwarders pulumi.StringArrayOutput `pulumi:"forwarders"`
	// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchClients pulumi.StringArrayOutput `pulumi:"matchClients"`
	// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchTos pulumi.StringArrayOutput `pulumi:"matchTos"`
	// The name of the DNS view to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The level of the DNS view, where 0 represents the highest level in the views hierarchy.
	Order pulumi.IntOutput `pulumi:"order"`
	// The recursion mode of the DNS view (Default: true).
	Recursion pulumi.BoolPtrOutput `pulumi:"recursion"`
}

// NewDnsView registers a new resource with the given unique name, arguments, and options.
func NewDnsView(ctx *pulumi.Context,
	name string, args *DnsViewArgs, opts ...pulumi.ResourceOption) (*DnsView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dnsserver == nil {
		return nil, errors.New("invalid value for required argument 'Dnsserver'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsView
	err := ctx.RegisterResource("solidserver:index/dnsView:DnsView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsView gets an existing DnsView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsViewState, opts ...pulumi.ResourceOption) (*DnsView, error) {
	var resource DnsView
	err := ctx.ReadResource("solidserver:index/dnsView:DnsView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsView resources.
type dnsViewState struct {
	// A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries []string `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions []string `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers []string `pulumi:"allowTransfers"`
	// The class associated to the DNS view.
	Class *string `pulumi:"class"`
	// The class parameters associated to the view.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver *string `pulumi:"dnsserver"`
	// The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
	Forward *string `pulumi:"forward"`
	// The IP address list of the forwarder(s) configured to configure on the DNS SMART.
	Forwarders []string `pulumi:"forwarders"`
	// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchClients []string `pulumi:"matchClients"`
	// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchTos []string `pulumi:"matchTos"`
	// The name of the DNS view to create.
	Name *string `pulumi:"name"`
	// The level of the DNS view, where 0 represents the highest level in the views hierarchy.
	Order *int `pulumi:"order"`
	// The recursion mode of the DNS view (Default: true).
	Recursion *bool `pulumi:"recursion"`
}

type DnsViewState struct {
	// A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries pulumi.StringArrayInput
	// A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions pulumi.StringArrayInput
	// A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers pulumi.StringArrayInput
	// The class associated to the DNS view.
	Class pulumi.StringPtrInput
	// The class parameters associated to the view.
	ClassParameters pulumi.StringMapInput
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver pulumi.StringPtrInput
	// The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
	Forward pulumi.StringPtrInput
	// The IP address list of the forwarder(s) configured to configure on the DNS SMART.
	Forwarders pulumi.StringArrayInput
	// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchClients pulumi.StringArrayInput
	// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchTos pulumi.StringArrayInput
	// The name of the DNS view to create.
	Name pulumi.StringPtrInput
	// The level of the DNS view, where 0 represents the highest level in the views hierarchy.
	Order pulumi.IntPtrInput
	// The recursion mode of the DNS view (Default: true).
	Recursion pulumi.BoolPtrInput
}

func (DnsViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsViewState)(nil)).Elem()
}

type dnsViewArgs struct {
	// A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries []string `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions []string `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers []string `pulumi:"allowTransfers"`
	// The class associated to the DNS view.
	Class *string `pulumi:"class"`
	// The class parameters associated to the view.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver string `pulumi:"dnsserver"`
	// The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
	Forward *string `pulumi:"forward"`
	// The IP address list of the forwarder(s) configured to configure on the DNS SMART.
	Forwarders []string `pulumi:"forwarders"`
	// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchClients []string `pulumi:"matchClients"`
	// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchTos []string `pulumi:"matchTos"`
	// The name of the DNS view to create.
	Name *string `pulumi:"name"`
	// The recursion mode of the DNS view (Default: true).
	Recursion *bool `pulumi:"recursion"`
}

// The set of arguments for constructing a DnsView resource.
type DnsViewArgs struct {
	// A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowQueries pulumi.StringArrayInput
	// A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowRecursions pulumi.StringArrayInput
	// A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	AllowTransfers pulumi.StringArrayInput
	// The class associated to the DNS view.
	Class pulumi.StringPtrInput
	// The class parameters associated to the view.
	ClassParameters pulumi.StringMapInput
	// The name of DNS server or DNS SMART hosting the DNS view to create.
	Dnsserver pulumi.StringInput
	// The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
	Forward pulumi.StringPtrInput
	// The IP address list of the forwarder(s) configured to configure on the DNS SMART.
	Forwarders pulumi.StringArrayInput
	// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchClients pulumi.StringArrayInput
	// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
	MatchTos pulumi.StringArrayInput
	// The name of the DNS view to create.
	Name pulumi.StringPtrInput
	// The recursion mode of the DNS view (Default: true).
	Recursion pulumi.BoolPtrInput
}

func (DnsViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsViewArgs)(nil)).Elem()
}

type DnsViewInput interface {
	pulumi.Input

	ToDnsViewOutput() DnsViewOutput
	ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput
}

func (*DnsView) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsView)(nil)).Elem()
}

func (i *DnsView) ToDnsViewOutput() DnsViewOutput {
	return i.ToDnsViewOutputWithContext(context.Background())
}

func (i *DnsView) ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewOutput)
}

// DnsViewArrayInput is an input type that accepts DnsViewArray and DnsViewArrayOutput values.
// You can construct a concrete instance of `DnsViewArrayInput` via:
//
//	DnsViewArray{ DnsViewArgs{...} }
type DnsViewArrayInput interface {
	pulumi.Input

	ToDnsViewArrayOutput() DnsViewArrayOutput
	ToDnsViewArrayOutputWithContext(context.Context) DnsViewArrayOutput
}

type DnsViewArray []DnsViewInput

func (DnsViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsView)(nil)).Elem()
}

func (i DnsViewArray) ToDnsViewArrayOutput() DnsViewArrayOutput {
	return i.ToDnsViewArrayOutputWithContext(context.Background())
}

func (i DnsViewArray) ToDnsViewArrayOutputWithContext(ctx context.Context) DnsViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewArrayOutput)
}

// DnsViewMapInput is an input type that accepts DnsViewMap and DnsViewMapOutput values.
// You can construct a concrete instance of `DnsViewMapInput` via:
//
//	DnsViewMap{ "key": DnsViewArgs{...} }
type DnsViewMapInput interface {
	pulumi.Input

	ToDnsViewMapOutput() DnsViewMapOutput
	ToDnsViewMapOutputWithContext(context.Context) DnsViewMapOutput
}

type DnsViewMap map[string]DnsViewInput

func (DnsViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsView)(nil)).Elem()
}

func (i DnsViewMap) ToDnsViewMapOutput() DnsViewMapOutput {
	return i.ToDnsViewMapOutputWithContext(context.Background())
}

func (i DnsViewMap) ToDnsViewMapOutputWithContext(ctx context.Context) DnsViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewMapOutput)
}

type DnsViewOutput struct{ *pulumi.OutputState }

func (DnsViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsView)(nil)).Elem()
}

func (o DnsViewOutput) ToDnsViewOutput() DnsViewOutput {
	return o
}

func (o DnsViewOutput) ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput {
	return o
}

// A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsViewOutput) AllowQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.AllowQueries }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsViewOutput) AllowRecursions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.AllowRecursions }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsViewOutput) AllowTransfers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.AllowTransfers }).(pulumi.StringArrayOutput)
}

// The class associated to the DNS view.
func (o DnsViewOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the view.
func (o DnsViewOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// The name of DNS server or DNS SMART hosting the DNS view to create.
func (o DnsViewOutput) Dnsserver() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringOutput { return v.Dnsserver }).(pulumi.StringOutput)
}

// The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).
func (o DnsViewOutput) Forward() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringPtrOutput { return v.Forward }).(pulumi.StringPtrOutput)
}

// The IP address list of the forwarder(s) configured to configure on the DNS SMART.
func (o DnsViewOutput) Forwarders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.Forwarders }).(pulumi.StringArrayOutput)
}

// A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsViewOutput) MatchClients() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.MatchClients }).(pulumi.StringArrayOutput)
}

// A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.
func (o DnsViewOutput) MatchTos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringArrayOutput { return v.MatchTos }).(pulumi.StringArrayOutput)
}

// The name of the DNS view to create.
func (o DnsViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The level of the DNS view, where 0 represents the highest level in the views hierarchy.
func (o DnsViewOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsView) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// The recursion mode of the DNS view (Default: true).
func (o DnsViewOutput) Recursion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsView) pulumi.BoolPtrOutput { return v.Recursion }).(pulumi.BoolPtrOutput)
}

type DnsViewArrayOutput struct{ *pulumi.OutputState }

func (DnsViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsView)(nil)).Elem()
}

func (o DnsViewArrayOutput) ToDnsViewArrayOutput() DnsViewArrayOutput {
	return o
}

func (o DnsViewArrayOutput) ToDnsViewArrayOutputWithContext(ctx context.Context) DnsViewArrayOutput {
	return o
}

func (o DnsViewArrayOutput) Index(i pulumi.IntInput) DnsViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsView {
		return vs[0].([]*DnsView)[vs[1].(int)]
	}).(DnsViewOutput)
}

type DnsViewMapOutput struct{ *pulumi.OutputState }

func (DnsViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsView)(nil)).Elem()
}

func (o DnsViewMapOutput) ToDnsViewMapOutput() DnsViewMapOutput {
	return o
}

func (o DnsViewMapOutput) ToDnsViewMapOutputWithContext(ctx context.Context) DnsViewMapOutput {
	return o
}

func (o DnsViewMapOutput) MapIndex(k pulumi.StringInput) DnsViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsView {
		return vs[0].(map[string]*DnsView)[vs[1].(string)]
	}).(DnsViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsViewInput)(nil)).Elem(), &DnsView{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsViewArrayInput)(nil)).Elem(), DnsViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsViewMapInput)(nil)).Elem(), DnsViewMap{})
	pulumi.RegisterOutputType(DnsViewOutput{})
	pulumi.RegisterOutputType(DnsViewArrayOutput{})
	pulumi.RegisterOutputType(DnsViewMapOutput{})
}
