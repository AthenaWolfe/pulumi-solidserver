// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Application Node resource allow to create and manage application endpoints that are monitored by the GSLB DNS servers
// associated with the application, in order to route related traffic according to the selected loadbalancing strategy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewAppNode(ctx, "myFirstNode", &solidserver.AppNodeArgs{
//				Address:     pulumi.String("127.0.0.1"),
//				Application: pulumi.Any(solidserver_app_application.MyFirstApplicaton.Name),
//				Fqdn:        pulumi.Any(solidserver_app_application.MyFirstApplicaton.Fqdn),
//				Healthcheck: pulumi.String("tcp"),
//				HealthcheckParameters: pulumi.Map{
//					"tcp_port": pulumi.Any("443"),
//				},
//				Pool:   pulumi.Any(solidserver_app_pool.MyFirstPool.Name),
//				Weight: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Supported HealthCheck(s)
//
// |Healtcheck|Parameter|Supported Values|
// |----------|---------|----------------|
// |tcp|tcp_port|Any value between 1 and 65535.|
// |http|http_host|The SNI hostname to look for.|
// |http|http_port|Any value between 1 and 65535.|
// |http|http_path|The URL path to look for.|
// |http|http_ssl|Use 0 (disable) or 1 (enable) for HTTPS connection.|
// |http|http_status_code|The HTTP status code to expect.|
// |http|http_lookup_string|A string the must be included in the answer payload.|
// |http|http_basic_auth|HTTP basic auth header (user:password).|
// |http|http_ssl_verify|Use 0 or 1 to activate ssl certificate checks.|
type AppNode struct {
	pulumi.CustomResourceState

	// The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// The name of the application associated to the node.
	Application pulumi.StringOutput `pulumi:"application"`
	// The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
	FailbackThreshold pulumi.IntPtrOutput `pulumi:"failbackThreshold"`
	// The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
	FailureThreshold pulumi.IntPtrOutput `pulumi:"failureThreshold"`
	// The fqdn of the application associated to the node.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
	Healthcheck pulumi.StringPtrOutput `pulumi:"healthcheck"`
	// The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
	HealthcheckFrequency pulumi.IntPtrOutput `pulumi:"healthcheckFrequency"`
	// The healthcheck parameters.
	HealthcheckParameters pulumi.MapOutput `pulumi:"healthcheckParameters"`
	// The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
	HealthcheckTimeout pulumi.IntPtrOutput `pulumi:"healthcheckTimeout"`
	// The name of the application node to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the application pool associated to the node.
	Pool pulumi.StringOutput `pulumi:"pool"`
	// The weight of the application node to create.
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
}

// NewAppNode registers a new resource with the given unique name, arguments, and options.
func NewAppNode(ctx *pulumi.Context,
	name string, args *AppNodeArgs, opts ...pulumi.ResourceOption) (*AppNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Application == nil {
		return nil, errors.New("invalid value for required argument 'Application'")
	}
	if args.Fqdn == nil {
		return nil, errors.New("invalid value for required argument 'Fqdn'")
	}
	if args.Pool == nil {
		return nil, errors.New("invalid value for required argument 'Pool'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppNode
	err := ctx.RegisterResource("solidserver:index/appNode:AppNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppNode gets an existing AppNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppNodeState, opts ...pulumi.ResourceOption) (*AppNode, error) {
	var resource AppNode
	err := ctx.ReadResource("solidserver:index/appNode:AppNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppNode resources.
type appNodeState struct {
	// The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
	Address *string `pulumi:"address"`
	// The name of the application associated to the node.
	Application *string `pulumi:"application"`
	// The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
	FailbackThreshold *int `pulumi:"failbackThreshold"`
	// The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The fqdn of the application associated to the node.
	Fqdn *string `pulumi:"fqdn"`
	// The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
	Healthcheck *string `pulumi:"healthcheck"`
	// The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
	HealthcheckFrequency *int `pulumi:"healthcheckFrequency"`
	// The healthcheck parameters.
	HealthcheckParameters map[string]interface{} `pulumi:"healthcheckParameters"`
	// The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
	HealthcheckTimeout *int `pulumi:"healthcheckTimeout"`
	// The name of the application node to create.
	Name *string `pulumi:"name"`
	// The name of the application pool associated to the node.
	Pool *string `pulumi:"pool"`
	// The weight of the application node to create.
	Weight *int `pulumi:"weight"`
}

type AppNodeState struct {
	// The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
	Address pulumi.StringPtrInput
	// The name of the application associated to the node.
	Application pulumi.StringPtrInput
	// The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
	FailbackThreshold pulumi.IntPtrInput
	// The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
	FailureThreshold pulumi.IntPtrInput
	// The fqdn of the application associated to the node.
	Fqdn pulumi.StringPtrInput
	// The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
	Healthcheck pulumi.StringPtrInput
	// The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
	HealthcheckFrequency pulumi.IntPtrInput
	// The healthcheck parameters.
	HealthcheckParameters pulumi.MapInput
	// The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
	HealthcheckTimeout pulumi.IntPtrInput
	// The name of the application node to create.
	Name pulumi.StringPtrInput
	// The name of the application pool associated to the node.
	Pool pulumi.StringPtrInput
	// The weight of the application node to create.
	Weight pulumi.IntPtrInput
}

func (AppNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*appNodeState)(nil)).Elem()
}

type appNodeArgs struct {
	// The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
	Address *string `pulumi:"address"`
	// The name of the application associated to the node.
	Application string `pulumi:"application"`
	// The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
	FailbackThreshold *int `pulumi:"failbackThreshold"`
	// The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
	FailureThreshold *int `pulumi:"failureThreshold"`
	// The fqdn of the application associated to the node.
	Fqdn string `pulumi:"fqdn"`
	// The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
	Healthcheck *string `pulumi:"healthcheck"`
	// The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
	HealthcheckFrequency *int `pulumi:"healthcheckFrequency"`
	// The healthcheck parameters.
	HealthcheckParameters map[string]interface{} `pulumi:"healthcheckParameters"`
	// The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
	HealthcheckTimeout *int `pulumi:"healthcheckTimeout"`
	// The name of the application node to create.
	Name *string `pulumi:"name"`
	// The name of the application pool associated to the node.
	Pool string `pulumi:"pool"`
	// The weight of the application node to create.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a AppNode resource.
type AppNodeArgs struct {
	// The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
	Address pulumi.StringPtrInput
	// The name of the application associated to the node.
	Application pulumi.StringInput
	// The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
	FailbackThreshold pulumi.IntPtrInput
	// The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
	FailureThreshold pulumi.IntPtrInput
	// The fqdn of the application associated to the node.
	Fqdn pulumi.StringInput
	// The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
	Healthcheck pulumi.StringPtrInput
	// The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
	HealthcheckFrequency pulumi.IntPtrInput
	// The healthcheck parameters.
	HealthcheckParameters pulumi.MapInput
	// The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
	HealthcheckTimeout pulumi.IntPtrInput
	// The name of the application node to create.
	Name pulumi.StringPtrInput
	// The name of the application pool associated to the node.
	Pool pulumi.StringInput
	// The weight of the application node to create.
	Weight pulumi.IntPtrInput
}

func (AppNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appNodeArgs)(nil)).Elem()
}

type AppNodeInput interface {
	pulumi.Input

	ToAppNodeOutput() AppNodeOutput
	ToAppNodeOutputWithContext(ctx context.Context) AppNodeOutput
}

func (*AppNode) ElementType() reflect.Type {
	return reflect.TypeOf((**AppNode)(nil)).Elem()
}

func (i *AppNode) ToAppNodeOutput() AppNodeOutput {
	return i.ToAppNodeOutputWithContext(context.Background())
}

func (i *AppNode) ToAppNodeOutputWithContext(ctx context.Context) AppNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppNodeOutput)
}

// AppNodeArrayInput is an input type that accepts AppNodeArray and AppNodeArrayOutput values.
// You can construct a concrete instance of `AppNodeArrayInput` via:
//
//	AppNodeArray{ AppNodeArgs{...} }
type AppNodeArrayInput interface {
	pulumi.Input

	ToAppNodeArrayOutput() AppNodeArrayOutput
	ToAppNodeArrayOutputWithContext(context.Context) AppNodeArrayOutput
}

type AppNodeArray []AppNodeInput

func (AppNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppNode)(nil)).Elem()
}

func (i AppNodeArray) ToAppNodeArrayOutput() AppNodeArrayOutput {
	return i.ToAppNodeArrayOutputWithContext(context.Background())
}

func (i AppNodeArray) ToAppNodeArrayOutputWithContext(ctx context.Context) AppNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppNodeArrayOutput)
}

// AppNodeMapInput is an input type that accepts AppNodeMap and AppNodeMapOutput values.
// You can construct a concrete instance of `AppNodeMapInput` via:
//
//	AppNodeMap{ "key": AppNodeArgs{...} }
type AppNodeMapInput interface {
	pulumi.Input

	ToAppNodeMapOutput() AppNodeMapOutput
	ToAppNodeMapOutputWithContext(context.Context) AppNodeMapOutput
}

type AppNodeMap map[string]AppNodeInput

func (AppNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppNode)(nil)).Elem()
}

func (i AppNodeMap) ToAppNodeMapOutput() AppNodeMapOutput {
	return i.ToAppNodeMapOutputWithContext(context.Background())
}

func (i AppNodeMap) ToAppNodeMapOutputWithContext(ctx context.Context) AppNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppNodeMapOutput)
}

type AppNodeOutput struct{ *pulumi.OutputState }

func (AppNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppNode)(nil)).Elem()
}

func (o AppNodeOutput) ToAppNodeOutput() AppNodeOutput {
	return o
}

func (o AppNodeOutput) ToAppNodeOutputWithContext(ctx context.Context) AppNodeOutput {
	return o
}

// The IP address (IPv4 or IPv6 depending on the node) of the application node to create.
func (o AppNodeOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppNode) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// The name of the application associated to the node.
func (o AppNodeOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v *AppNode) pulumi.StringOutput { return v.Application }).(pulumi.StringOutput)
}

// The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).
func (o AppNodeOutput) FailbackThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppNode) pulumi.IntPtrOutput { return v.FailbackThreshold }).(pulumi.IntPtrOutput)
}

// The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).
func (o AppNodeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppNode) pulumi.IntPtrOutput { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

// The fqdn of the application associated to the node.
func (o AppNodeOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *AppNode) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).
func (o AppNodeOutput) Healthcheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AppNode) pulumi.StringPtrOutput { return v.Healthcheck }).(pulumi.StringPtrOutput)
}

// The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).
func (o AppNodeOutput) HealthcheckFrequency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppNode) pulumi.IntPtrOutput { return v.HealthcheckFrequency }).(pulumi.IntPtrOutput)
}

// The healthcheck parameters.
func (o AppNodeOutput) HealthcheckParameters() pulumi.MapOutput {
	return o.ApplyT(func(v *AppNode) pulumi.MapOutput { return v.HealthcheckParameters }).(pulumi.MapOutput)
}

// The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).
func (o AppNodeOutput) HealthcheckTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppNode) pulumi.IntPtrOutput { return v.HealthcheckTimeout }).(pulumi.IntPtrOutput)
}

// The name of the application node to create.
func (o AppNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppNode) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the application pool associated to the node.
func (o AppNodeOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v *AppNode) pulumi.StringOutput { return v.Pool }).(pulumi.StringOutput)
}

// The weight of the application node to create.
func (o AppNodeOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AppNode) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type AppNodeArrayOutput struct{ *pulumi.OutputState }

func (AppNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppNode)(nil)).Elem()
}

func (o AppNodeArrayOutput) ToAppNodeArrayOutput() AppNodeArrayOutput {
	return o
}

func (o AppNodeArrayOutput) ToAppNodeArrayOutputWithContext(ctx context.Context) AppNodeArrayOutput {
	return o
}

func (o AppNodeArrayOutput) Index(i pulumi.IntInput) AppNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppNode {
		return vs[0].([]*AppNode)[vs[1].(int)]
	}).(AppNodeOutput)
}

type AppNodeMapOutput struct{ *pulumi.OutputState }

func (AppNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppNode)(nil)).Elem()
}

func (o AppNodeMapOutput) ToAppNodeMapOutput() AppNodeMapOutput {
	return o
}

func (o AppNodeMapOutput) ToAppNodeMapOutputWithContext(ctx context.Context) AppNodeMapOutput {
	return o
}

func (o AppNodeMapOutput) MapIndex(k pulumi.StringInput) AppNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppNode {
		return vs[0].(map[string]*AppNode)[vs[1].(string)]
	}).(AppNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppNodeInput)(nil)).Elem(), &AppNode{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppNodeArrayInput)(nil)).Elem(), AppNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppNodeMapInput)(nil)).Elem(), AppNodeMap{})
	pulumi.RegisterOutputType(AppNodeOutput{})
	pulumi.RegisterOutputType(AppNodeArrayOutput{})
	pulumi.RegisterOutputType(AppNodeMapOutput{})
}
