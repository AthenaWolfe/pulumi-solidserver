// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IPv6 Subnet resource allows to create and manage IPAM networks that are key to organize the IP space
// Subnet can be blocks or subnets. Blocks reflect the assigned IP ranges (RFC1918 or public prefixes).
// Subnets reflect the internal sub-division of your network.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myFirstIP6Block, err := solidserver.NewIp6Subnet(ctx, "myFirstIP6Block", &solidserver.Ip6SubnetArgs{
//				PrefixSize: pulumi.Int(48),
//				RequestIp:  pulumi.String("2a00:2381:126d:0:0:0:0:0"),
//				Space:      pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),
//				Terminal:   pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = solidserver.NewIp6Subnet(ctx, "myFirstIP6Subnet", &solidserver.Ip6SubnetArgs{
//				Block: myFirstIP6Block.Name,
//				Class: pulumi.String("VIRTUAL"),
//				ClassParameters: pulumi.StringMap{
//					"vnid": pulumi.String("12666"),
//				},
//				GatewayOffset: pulumi.Int(1),
//				PrefixSize:    pulumi.Int(64),
//				Space:         pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Ip6Subnet struct {
	pulumi.CustomResourceState

	// The provisionned IPv6 network address.
	Address pulumi.StringOutput `pulumi:"address"`
	// The name of the block intyo which creating the IPv6 subnet.
	Block pulumi.StringPtrOutput `pulumi:"block"`
	// The class associated to the IPv6 subnet.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the IPv6 subnet.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// The subnet's computed gateway.
	Gateway pulumi.StringOutput `pulumi:"gateway"`
	// Offset for creating the gateway. Default is 0 (No gateway).
	GatewayOffset pulumi.IntPtrOutput `pulumi:"gatewayOffset"`
	// The name of the IPv6 subnet to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// The provisionned IPv6 prefix.
	Prefix pulumi.StringOutput `pulumi:"prefix"`
	// The expected IPv6 subnet's prefix length (ex: 24 for a '/24').
	PrefixSize pulumi.IntOutput `pulumi:"prefixSize"`
	// The optionally requested subnet IPv6 address.
	RequestIp pulumi.StringPtrOutput `pulumi:"requestIp"`
	// The name of the space into which creating the IPv6 subnet.
	Space pulumi.StringOutput `pulumi:"space"`
	// The terminal property of the IPv6 subnet.
	Terminal pulumi.BoolPtrOutput `pulumi:"terminal"`
}

// NewIp6Subnet registers a new resource with the given unique name, arguments, and options.
func NewIp6Subnet(ctx *pulumi.Context,
	name string, args *Ip6SubnetArgs, opts ...pulumi.ResourceOption) (*Ip6Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrefixSize == nil {
		return nil, errors.New("invalid value for required argument 'PrefixSize'")
	}
	if args.Space == nil {
		return nil, errors.New("invalid value for required argument 'Space'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ip6Subnet
	err := ctx.RegisterResource("solidserver:index/ip6Subnet:Ip6Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIp6Subnet gets an existing Ip6Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIp6Subnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ip6SubnetState, opts ...pulumi.ResourceOption) (*Ip6Subnet, error) {
	var resource Ip6Subnet
	err := ctx.ReadResource("solidserver:index/ip6Subnet:Ip6Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ip6Subnet resources.
type ip6SubnetState struct {
	// The provisionned IPv6 network address.
	Address *string `pulumi:"address"`
	// The name of the block intyo which creating the IPv6 subnet.
	Block *string `pulumi:"block"`
	// The class associated to the IPv6 subnet.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IPv6 subnet.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The subnet's computed gateway.
	Gateway *string `pulumi:"gateway"`
	// Offset for creating the gateway. Default is 0 (No gateway).
	GatewayOffset *int `pulumi:"gatewayOffset"`
	// The name of the IPv6 subnet to create.
	Name *string `pulumi:"name"`
	// The provisionned IPv6 prefix.
	Prefix *string `pulumi:"prefix"`
	// The expected IPv6 subnet's prefix length (ex: 24 for a '/24').
	PrefixSize *int `pulumi:"prefixSize"`
	// The optionally requested subnet IPv6 address.
	RequestIp *string `pulumi:"requestIp"`
	// The name of the space into which creating the IPv6 subnet.
	Space *string `pulumi:"space"`
	// The terminal property of the IPv6 subnet.
	Terminal *bool `pulumi:"terminal"`
}

type Ip6SubnetState struct {
	// The provisionned IPv6 network address.
	Address pulumi.StringPtrInput
	// The name of the block intyo which creating the IPv6 subnet.
	Block pulumi.StringPtrInput
	// The class associated to the IPv6 subnet.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IPv6 subnet.
	ClassParameters pulumi.StringMapInput
	// The subnet's computed gateway.
	Gateway pulumi.StringPtrInput
	// Offset for creating the gateway. Default is 0 (No gateway).
	GatewayOffset pulumi.IntPtrInput
	// The name of the IPv6 subnet to create.
	Name pulumi.StringPtrInput
	// The provisionned IPv6 prefix.
	Prefix pulumi.StringPtrInput
	// The expected IPv6 subnet's prefix length (ex: 24 for a '/24').
	PrefixSize pulumi.IntPtrInput
	// The optionally requested subnet IPv6 address.
	RequestIp pulumi.StringPtrInput
	// The name of the space into which creating the IPv6 subnet.
	Space pulumi.StringPtrInput
	// The terminal property of the IPv6 subnet.
	Terminal pulumi.BoolPtrInput
}

func (Ip6SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*ip6SubnetState)(nil)).Elem()
}

type ip6SubnetArgs struct {
	// The name of the block intyo which creating the IPv6 subnet.
	Block *string `pulumi:"block"`
	// The class associated to the IPv6 subnet.
	Class *string `pulumi:"class"`
	// The class parameters associated to the IPv6 subnet.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// Offset for creating the gateway. Default is 0 (No gateway).
	GatewayOffset *int `pulumi:"gatewayOffset"`
	// The name of the IPv6 subnet to create.
	Name *string `pulumi:"name"`
	// The expected IPv6 subnet's prefix length (ex: 24 for a '/24').
	PrefixSize int `pulumi:"prefixSize"`
	// The optionally requested subnet IPv6 address.
	RequestIp *string `pulumi:"requestIp"`
	// The name of the space into which creating the IPv6 subnet.
	Space string `pulumi:"space"`
	// The terminal property of the IPv6 subnet.
	Terminal *bool `pulumi:"terminal"`
}

// The set of arguments for constructing a Ip6Subnet resource.
type Ip6SubnetArgs struct {
	// The name of the block intyo which creating the IPv6 subnet.
	Block pulumi.StringPtrInput
	// The class associated to the IPv6 subnet.
	Class pulumi.StringPtrInput
	// The class parameters associated to the IPv6 subnet.
	ClassParameters pulumi.StringMapInput
	// Offset for creating the gateway. Default is 0 (No gateway).
	GatewayOffset pulumi.IntPtrInput
	// The name of the IPv6 subnet to create.
	Name pulumi.StringPtrInput
	// The expected IPv6 subnet's prefix length (ex: 24 for a '/24').
	PrefixSize pulumi.IntInput
	// The optionally requested subnet IPv6 address.
	RequestIp pulumi.StringPtrInput
	// The name of the space into which creating the IPv6 subnet.
	Space pulumi.StringInput
	// The terminal property of the IPv6 subnet.
	Terminal pulumi.BoolPtrInput
}

func (Ip6SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ip6SubnetArgs)(nil)).Elem()
}

type Ip6SubnetInput interface {
	pulumi.Input

	ToIp6SubnetOutput() Ip6SubnetOutput
	ToIp6SubnetOutputWithContext(ctx context.Context) Ip6SubnetOutput
}

func (*Ip6Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip6Subnet)(nil)).Elem()
}

func (i *Ip6Subnet) ToIp6SubnetOutput() Ip6SubnetOutput {
	return i.ToIp6SubnetOutputWithContext(context.Background())
}

func (i *Ip6Subnet) ToIp6SubnetOutputWithContext(ctx context.Context) Ip6SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6SubnetOutput)
}

// Ip6SubnetArrayInput is an input type that accepts Ip6SubnetArray and Ip6SubnetArrayOutput values.
// You can construct a concrete instance of `Ip6SubnetArrayInput` via:
//
//	Ip6SubnetArray{ Ip6SubnetArgs{...} }
type Ip6SubnetArrayInput interface {
	pulumi.Input

	ToIp6SubnetArrayOutput() Ip6SubnetArrayOutput
	ToIp6SubnetArrayOutputWithContext(context.Context) Ip6SubnetArrayOutput
}

type Ip6SubnetArray []Ip6SubnetInput

func (Ip6SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip6Subnet)(nil)).Elem()
}

func (i Ip6SubnetArray) ToIp6SubnetArrayOutput() Ip6SubnetArrayOutput {
	return i.ToIp6SubnetArrayOutputWithContext(context.Background())
}

func (i Ip6SubnetArray) ToIp6SubnetArrayOutputWithContext(ctx context.Context) Ip6SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6SubnetArrayOutput)
}

// Ip6SubnetMapInput is an input type that accepts Ip6SubnetMap and Ip6SubnetMapOutput values.
// You can construct a concrete instance of `Ip6SubnetMapInput` via:
//
//	Ip6SubnetMap{ "key": Ip6SubnetArgs{...} }
type Ip6SubnetMapInput interface {
	pulumi.Input

	ToIp6SubnetMapOutput() Ip6SubnetMapOutput
	ToIp6SubnetMapOutputWithContext(context.Context) Ip6SubnetMapOutput
}

type Ip6SubnetMap map[string]Ip6SubnetInput

func (Ip6SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip6Subnet)(nil)).Elem()
}

func (i Ip6SubnetMap) ToIp6SubnetMapOutput() Ip6SubnetMapOutput {
	return i.ToIp6SubnetMapOutputWithContext(context.Background())
}

func (i Ip6SubnetMap) ToIp6SubnetMapOutputWithContext(ctx context.Context) Ip6SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ip6SubnetMapOutput)
}

type Ip6SubnetOutput struct{ *pulumi.OutputState }

func (Ip6SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ip6Subnet)(nil)).Elem()
}

func (o Ip6SubnetOutput) ToIp6SubnetOutput() Ip6SubnetOutput {
	return o
}

func (o Ip6SubnetOutput) ToIp6SubnetOutputWithContext(ctx context.Context) Ip6SubnetOutput {
	return o
}

// The provisionned IPv6 network address.
func (o Ip6SubnetOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The name of the block intyo which creating the IPv6 subnet.
func (o Ip6SubnetOutput) Block() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringPtrOutput { return v.Block }).(pulumi.StringPtrOutput)
}

// The class associated to the IPv6 subnet.
func (o Ip6SubnetOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the IPv6 subnet.
func (o Ip6SubnetOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// The subnet's computed gateway.
func (o Ip6SubnetOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringOutput { return v.Gateway }).(pulumi.StringOutput)
}

// Offset for creating the gateway. Default is 0 (No gateway).
func (o Ip6SubnetOutput) GatewayOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.IntPtrOutput { return v.GatewayOffset }).(pulumi.IntPtrOutput)
}

// The name of the IPv6 subnet to create.
func (o Ip6SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The provisionned IPv6 prefix.
func (o Ip6SubnetOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

// The expected IPv6 subnet's prefix length (ex: 24 for a '/24').
func (o Ip6SubnetOutput) PrefixSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.IntOutput { return v.PrefixSize }).(pulumi.IntOutput)
}

// The optionally requested subnet IPv6 address.
func (o Ip6SubnetOutput) RequestIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringPtrOutput { return v.RequestIp }).(pulumi.StringPtrOutput)
}

// The name of the space into which creating the IPv6 subnet.
func (o Ip6SubnetOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.StringOutput { return v.Space }).(pulumi.StringOutput)
}

// The terminal property of the IPv6 subnet.
func (o Ip6SubnetOutput) Terminal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ip6Subnet) pulumi.BoolPtrOutput { return v.Terminal }).(pulumi.BoolPtrOutput)
}

type Ip6SubnetArrayOutput struct{ *pulumi.OutputState }

func (Ip6SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ip6Subnet)(nil)).Elem()
}

func (o Ip6SubnetArrayOutput) ToIp6SubnetArrayOutput() Ip6SubnetArrayOutput {
	return o
}

func (o Ip6SubnetArrayOutput) ToIp6SubnetArrayOutputWithContext(ctx context.Context) Ip6SubnetArrayOutput {
	return o
}

func (o Ip6SubnetArrayOutput) Index(i pulumi.IntInput) Ip6SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ip6Subnet {
		return vs[0].([]*Ip6Subnet)[vs[1].(int)]
	}).(Ip6SubnetOutput)
}

type Ip6SubnetMapOutput struct{ *pulumi.OutputState }

func (Ip6SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ip6Subnet)(nil)).Elem()
}

func (o Ip6SubnetMapOutput) ToIp6SubnetMapOutput() Ip6SubnetMapOutput {
	return o
}

func (o Ip6SubnetMapOutput) ToIp6SubnetMapOutputWithContext(ctx context.Context) Ip6SubnetMapOutput {
	return o
}

func (o Ip6SubnetMapOutput) MapIndex(k pulumi.StringInput) Ip6SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ip6Subnet {
		return vs[0].(map[string]*Ip6Subnet)[vs[1].(string)]
	}).(Ip6SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6SubnetInput)(nil)).Elem(), &Ip6Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6SubnetArrayInput)(nil)).Elem(), Ip6SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ip6SubnetMapInput)(nil)).Elem(), Ip6SubnetMap{})
	pulumi.RegisterOutputType(Ip6SubnetOutput{})
	pulumi.RegisterOutputType(Ip6SubnetArrayOutput{})
	pulumi.RegisterOutputType(Ip6SubnetMapOutput{})
}
