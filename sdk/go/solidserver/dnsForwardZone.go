// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"errors"
	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS Forward Zone resource allows to create and manage DNS forward zones.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.NewDnsForwardZone(ctx, "myFirstForwardZone", &solidserver.DnsForwardZoneArgs{
//				Dnsserver: pulumi.String("ns.priv"),
//				Forward:   pulumi.String("first"),
//				Forwarders: pulumi.StringArray{
//					pulumi.String("10.10.8.8"),
//					pulumi.String("10.10.4.4"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DnsForwardZone struct {
	pulumi.CustomResourceState

	// The class associated to the forward zone.
	Class pulumi.StringPtrOutput `pulumi:"class"`
	// The class parameters associated to the forward zone.
	ClassParameters pulumi.StringMapOutput `pulumi:"classParameters"`
	// The managed SMART DNS server name, or DNS server name hosting the forward zone.
	Dnsserver pulumi.StringOutput `pulumi:"dnsserver"`
	// The DNS view name hosting the forward zone.
	Dnsview pulumi.StringPtrOutput `pulumi:"dnsview"`
	// The forwarding mode of the forward zone (Supported: only, first; Default: only).
	Forward pulumi.StringPtrOutput `pulumi:"forward"`
	// The IP address list of the forwarder(s) to use for the forward zone.
	Forwarders pulumi.StringArrayOutput `pulumi:"forwarders"`
	// The Domain Name served by the forward zone.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDnsForwardZone registers a new resource with the given unique name, arguments, and options.
func NewDnsForwardZone(ctx *pulumi.Context,
	name string, args *DnsForwardZoneArgs, opts ...pulumi.ResourceOption) (*DnsForwardZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Dnsserver == nil {
		return nil, errors.New("invalid value for required argument 'Dnsserver'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsForwardZone
	err := ctx.RegisterResource("solidserver:index/dnsForwardZone:DnsForwardZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsForwardZone gets an existing DnsForwardZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsForwardZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsForwardZoneState, opts ...pulumi.ResourceOption) (*DnsForwardZone, error) {
	var resource DnsForwardZone
	err := ctx.ReadResource("solidserver:index/dnsForwardZone:DnsForwardZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsForwardZone resources.
type dnsForwardZoneState struct {
	// The class associated to the forward zone.
	Class *string `pulumi:"class"`
	// The class parameters associated to the forward zone.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The managed SMART DNS server name, or DNS server name hosting the forward zone.
	Dnsserver *string `pulumi:"dnsserver"`
	// The DNS view name hosting the forward zone.
	Dnsview *string `pulumi:"dnsview"`
	// The forwarding mode of the forward zone (Supported: only, first; Default: only).
	Forward *string `pulumi:"forward"`
	// The IP address list of the forwarder(s) to use for the forward zone.
	Forwarders []string `pulumi:"forwarders"`
	// The Domain Name served by the forward zone.
	Name *string `pulumi:"name"`
}

type DnsForwardZoneState struct {
	// The class associated to the forward zone.
	Class pulumi.StringPtrInput
	// The class parameters associated to the forward zone.
	ClassParameters pulumi.StringMapInput
	// The managed SMART DNS server name, or DNS server name hosting the forward zone.
	Dnsserver pulumi.StringPtrInput
	// The DNS view name hosting the forward zone.
	Dnsview pulumi.StringPtrInput
	// The forwarding mode of the forward zone (Supported: only, first; Default: only).
	Forward pulumi.StringPtrInput
	// The IP address list of the forwarder(s) to use for the forward zone.
	Forwarders pulumi.StringArrayInput
	// The Domain Name served by the forward zone.
	Name pulumi.StringPtrInput
}

func (DnsForwardZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsForwardZoneState)(nil)).Elem()
}

type dnsForwardZoneArgs struct {
	// The class associated to the forward zone.
	Class *string `pulumi:"class"`
	// The class parameters associated to the forward zone.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The managed SMART DNS server name, or DNS server name hosting the forward zone.
	Dnsserver string `pulumi:"dnsserver"`
	// The DNS view name hosting the forward zone.
	Dnsview *string `pulumi:"dnsview"`
	// The forwarding mode of the forward zone (Supported: only, first; Default: only).
	Forward *string `pulumi:"forward"`
	// The IP address list of the forwarder(s) to use for the forward zone.
	Forwarders []string `pulumi:"forwarders"`
	// The Domain Name served by the forward zone.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DnsForwardZone resource.
type DnsForwardZoneArgs struct {
	// The class associated to the forward zone.
	Class pulumi.StringPtrInput
	// The class parameters associated to the forward zone.
	ClassParameters pulumi.StringMapInput
	// The managed SMART DNS server name, or DNS server name hosting the forward zone.
	Dnsserver pulumi.StringInput
	// The DNS view name hosting the forward zone.
	Dnsview pulumi.StringPtrInput
	// The forwarding mode of the forward zone (Supported: only, first; Default: only).
	Forward pulumi.StringPtrInput
	// The IP address list of the forwarder(s) to use for the forward zone.
	Forwarders pulumi.StringArrayInput
	// The Domain Name served by the forward zone.
	Name pulumi.StringPtrInput
}

func (DnsForwardZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsForwardZoneArgs)(nil)).Elem()
}

type DnsForwardZoneInput interface {
	pulumi.Input

	ToDnsForwardZoneOutput() DnsForwardZoneOutput
	ToDnsForwardZoneOutputWithContext(ctx context.Context) DnsForwardZoneOutput
}

func (*DnsForwardZone) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsForwardZone)(nil)).Elem()
}

func (i *DnsForwardZone) ToDnsForwardZoneOutput() DnsForwardZoneOutput {
	return i.ToDnsForwardZoneOutputWithContext(context.Background())
}

func (i *DnsForwardZone) ToDnsForwardZoneOutputWithContext(ctx context.Context) DnsForwardZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsForwardZoneOutput)
}

// DnsForwardZoneArrayInput is an input type that accepts DnsForwardZoneArray and DnsForwardZoneArrayOutput values.
// You can construct a concrete instance of `DnsForwardZoneArrayInput` via:
//
//	DnsForwardZoneArray{ DnsForwardZoneArgs{...} }
type DnsForwardZoneArrayInput interface {
	pulumi.Input

	ToDnsForwardZoneArrayOutput() DnsForwardZoneArrayOutput
	ToDnsForwardZoneArrayOutputWithContext(context.Context) DnsForwardZoneArrayOutput
}

type DnsForwardZoneArray []DnsForwardZoneInput

func (DnsForwardZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsForwardZone)(nil)).Elem()
}

func (i DnsForwardZoneArray) ToDnsForwardZoneArrayOutput() DnsForwardZoneArrayOutput {
	return i.ToDnsForwardZoneArrayOutputWithContext(context.Background())
}

func (i DnsForwardZoneArray) ToDnsForwardZoneArrayOutputWithContext(ctx context.Context) DnsForwardZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsForwardZoneArrayOutput)
}

// DnsForwardZoneMapInput is an input type that accepts DnsForwardZoneMap and DnsForwardZoneMapOutput values.
// You can construct a concrete instance of `DnsForwardZoneMapInput` via:
//
//	DnsForwardZoneMap{ "key": DnsForwardZoneArgs{...} }
type DnsForwardZoneMapInput interface {
	pulumi.Input

	ToDnsForwardZoneMapOutput() DnsForwardZoneMapOutput
	ToDnsForwardZoneMapOutputWithContext(context.Context) DnsForwardZoneMapOutput
}

type DnsForwardZoneMap map[string]DnsForwardZoneInput

func (DnsForwardZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsForwardZone)(nil)).Elem()
}

func (i DnsForwardZoneMap) ToDnsForwardZoneMapOutput() DnsForwardZoneMapOutput {
	return i.ToDnsForwardZoneMapOutputWithContext(context.Background())
}

func (i DnsForwardZoneMap) ToDnsForwardZoneMapOutputWithContext(ctx context.Context) DnsForwardZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsForwardZoneMapOutput)
}

type DnsForwardZoneOutput struct{ *pulumi.OutputState }

func (DnsForwardZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsForwardZone)(nil)).Elem()
}

func (o DnsForwardZoneOutput) ToDnsForwardZoneOutput() DnsForwardZoneOutput {
	return o
}

func (o DnsForwardZoneOutput) ToDnsForwardZoneOutputWithContext(ctx context.Context) DnsForwardZoneOutput {
	return o
}

// The class associated to the forward zone.
func (o DnsForwardZoneOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsForwardZone) pulumi.StringPtrOutput { return v.Class }).(pulumi.StringPtrOutput)
}

// The class parameters associated to the forward zone.
func (o DnsForwardZoneOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DnsForwardZone) pulumi.StringMapOutput { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// The managed SMART DNS server name, or DNS server name hosting the forward zone.
func (o DnsForwardZoneOutput) Dnsserver() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsForwardZone) pulumi.StringOutput { return v.Dnsserver }).(pulumi.StringOutput)
}

// The DNS view name hosting the forward zone.
func (o DnsForwardZoneOutput) Dnsview() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsForwardZone) pulumi.StringPtrOutput { return v.Dnsview }).(pulumi.StringPtrOutput)
}

// The forwarding mode of the forward zone (Supported: only, first; Default: only).
func (o DnsForwardZoneOutput) Forward() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsForwardZone) pulumi.StringPtrOutput { return v.Forward }).(pulumi.StringPtrOutput)
}

// The IP address list of the forwarder(s) to use for the forward zone.
func (o DnsForwardZoneOutput) Forwarders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsForwardZone) pulumi.StringArrayOutput { return v.Forwarders }).(pulumi.StringArrayOutput)
}

// The Domain Name served by the forward zone.
func (o DnsForwardZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsForwardZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DnsForwardZoneArrayOutput struct{ *pulumi.OutputState }

func (DnsForwardZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsForwardZone)(nil)).Elem()
}

func (o DnsForwardZoneArrayOutput) ToDnsForwardZoneArrayOutput() DnsForwardZoneArrayOutput {
	return o
}

func (o DnsForwardZoneArrayOutput) ToDnsForwardZoneArrayOutputWithContext(ctx context.Context) DnsForwardZoneArrayOutput {
	return o
}

func (o DnsForwardZoneArrayOutput) Index(i pulumi.IntInput) DnsForwardZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsForwardZone {
		return vs[0].([]*DnsForwardZone)[vs[1].(int)]
	}).(DnsForwardZoneOutput)
}

type DnsForwardZoneMapOutput struct{ *pulumi.OutputState }

func (DnsForwardZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsForwardZone)(nil)).Elem()
}

func (o DnsForwardZoneMapOutput) ToDnsForwardZoneMapOutput() DnsForwardZoneMapOutput {
	return o
}

func (o DnsForwardZoneMapOutput) ToDnsForwardZoneMapOutputWithContext(ctx context.Context) DnsForwardZoneMapOutput {
	return o
}

func (o DnsForwardZoneMapOutput) MapIndex(k pulumi.StringInput) DnsForwardZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsForwardZone {
		return vs[0].(map[string]*DnsForwardZone)[vs[1].(string)]
	}).(DnsForwardZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsForwardZoneInput)(nil)).Elem(), &DnsForwardZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsForwardZoneArrayInput)(nil)).Elem(), DnsForwardZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsForwardZoneMapInput)(nil)).Elem(), DnsForwardZoneMap{})
	pulumi.RegisterOutputType(DnsForwardZoneOutput{})
	pulumi.RegisterOutputType(DnsForwardZoneArrayOutput{})
	pulumi.RegisterOutputType(DnsForwardZoneMapOutput{})
}
