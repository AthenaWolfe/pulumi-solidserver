// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// DNS SMART data-source allows to retrieve information about DNS SMART architectures.
// SMART(s) are abstratc containers managing several DNS servers as a unique entity.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.LookupDnsSmart(ctx, &solidserver.LookupDnsSmartArgs{
//				Name: ssmart.Local,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsSmart(ctx *pulumi.Context, args *LookupDnsSmartArgs, opts ...pulumi.InvokeOption) (*LookupDnsSmartResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsSmartResult
	err := ctx.Invoke("solidserver:index/getDnsSmart:getDnsSmart", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsSmart.
type LookupDnsSmartArgs struct {
	// The name of the DNS SMART.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDnsSmart.
type LookupDnsSmartResult struct {
	// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).
	AllowQueries []string `pulumi:"allowQueries"`
	// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).
	AllowRecursions []string `pulumi:"allowRecursions"`
	// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).
	AllowTransfers []string `pulumi:"allowTransfers"`
	// The SMART architecture type (masterslave|stealth|multimaster|single|farm).
	Arch string `pulumi:"arch"`
	// The class associated to the DNS server.
	Class string `pulumi:"class"`
	// The class parameters associated to the DNS SMART
	ClassParameters map[string]interface{} `pulumi:"classParameters"`
	// Custom information about the DNS SMART.
	Comment string `pulumi:"comment"`
	// The forwarding mode of the DNS SMART (Disabled if empty).
	Forward string `pulumi:"forward"`
	// The IP address list of the forwarder(s) configured on the DNS SMART.
	Forwarders []string `pulumi:"forwarders"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the DNS SMART members.
	Members []string `pulumi:"members"`
	// The name of the DNS SMART.
	Name string `pulumi:"name"`
	// The recursion status of the DNS SMART.
	Recursion bool `pulumi:"recursion"`
}

func LookupDnsSmartOutput(ctx *pulumi.Context, args LookupDnsSmartOutputArgs, opts ...pulumi.InvokeOption) LookupDnsSmartResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsSmartResult, error) {
			args := v.(LookupDnsSmartArgs)
			r, err := LookupDnsSmart(ctx, &args, opts...)
			var s LookupDnsSmartResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDnsSmartResultOutput)
}

// A collection of arguments for invoking getDnsSmart.
type LookupDnsSmartOutputArgs struct {
	// The name of the DNS SMART.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDnsSmartOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsSmartArgs)(nil)).Elem()
}

// A collection of values returned by getDnsSmart.
type LookupDnsSmartResultOutput struct{ *pulumi.OutputState }

func (LookupDnsSmartResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsSmartResult)(nil)).Elem()
}

func (o LookupDnsSmartResultOutput) ToLookupDnsSmartResultOutput() LookupDnsSmartResultOutput {
	return o
}

func (o LookupDnsSmartResultOutput) ToLookupDnsSmartResultOutputWithContext(ctx context.Context) LookupDnsSmartResultOutput {
	return o
}

// A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).
func (o LookupDnsSmartResultOutput) AllowQueries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) []string { return v.AllowQueries }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).
func (o LookupDnsSmartResultOutput) AllowRecursions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) []string { return v.AllowRecursions }).(pulumi.StringArrayOutput)
}

// A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).
func (o LookupDnsSmartResultOutput) AllowTransfers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) []string { return v.AllowTransfers }).(pulumi.StringArrayOutput)
}

// The SMART architecture type (masterslave|stealth|multimaster|single|farm).
func (o LookupDnsSmartResultOutput) Arch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) string { return v.Arch }).(pulumi.StringOutput)
}

// The class associated to the DNS server.
func (o LookupDnsSmartResultOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) string { return v.Class }).(pulumi.StringOutput)
}

// The class parameters associated to the DNS SMART
func (o LookupDnsSmartResultOutput) ClassParameters() pulumi.MapOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) map[string]interface{} { return v.ClassParameters }).(pulumi.MapOutput)
}

// Custom information about the DNS SMART.
func (o LookupDnsSmartResultOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) string { return v.Comment }).(pulumi.StringOutput)
}

// The forwarding mode of the DNS SMART (Disabled if empty).
func (o LookupDnsSmartResultOutput) Forward() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) string { return v.Forward }).(pulumi.StringOutput)
}

// The IP address list of the forwarder(s) configured on the DNS SMART.
func (o LookupDnsSmartResultOutput) Forwarders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) []string { return v.Forwarders }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDnsSmartResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the DNS SMART members.
func (o LookupDnsSmartResultOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) []string { return v.Members }).(pulumi.StringArrayOutput)
}

// The name of the DNS SMART.
func (o LookupDnsSmartResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) string { return v.Name }).(pulumi.StringOutput)
}

// The recursion status of the DNS SMART.
func (o LookupDnsSmartResultOutput) Recursion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsSmartResult) bool { return v.Recursion }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsSmartResultOutput{})
}
