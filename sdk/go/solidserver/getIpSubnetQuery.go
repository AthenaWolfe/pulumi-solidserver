// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IP subnet query data-source allows to retrieve information about the first IPv4 subnet matching given criterias, including its meta-data.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := solidserver.GetIpSubnetQuery(ctx, &solidserver.GetIpSubnetQueryArgs{
//				Query: "tag_network_vnid = '12666' AND subnet_allocated_percent < '90.0'",
//				Tags:  pulumi.StringRef("network.vnid"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetIpSubnetQuery(ctx *pulumi.Context, args *GetIpSubnetQueryArgs, opts ...pulumi.InvokeOption) (*GetIpSubnetQueryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpSubnetQueryResult
	err := ctx.Invoke("solidserver:index/getIpSubnetQuery:getIpSubnetQuery", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpSubnetQuery.
type GetIpSubnetQueryArgs struct {
	// The query used to find the first matching subnet.
	Orderby *string `pulumi:"orderby"`
	// The query used to find the first matching subnet.
	Query string `pulumi:"query"`
	// The tags to be used to find the first matching subnet in the query.
	Tags *string `pulumi:"tags"`
}

// A collection of values returned by getIpSubnetQuery.
type GetIpSubnetQueryResult struct {
	// The IP subnet address.
	Address string `pulumi:"address"`
	// The class associated to the IP subnet.
	Class string `pulumi:"class"`
	// The class parameters associated to IP subnet.
	ClassParameters map[string]string `pulumi:"classParameters"`
	// The subnet's computed gateway.
	Gateway string `pulumi:"gateway"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the IP subnet.
	Name string `pulumi:"name"`
	// The IP subnet netmask.
	Netmask string `pulumi:"netmask"`
	// The query used to find the first matching subnet.
	Orderby *string `pulumi:"orderby"`
	// The IP subnet prefix.
	Prefix string `pulumi:"prefix"`
	// The IP subnet's prefix length (ex: 24 for a '/24').
	PrefixSize int `pulumi:"prefixSize"`
	// The query used to find the first matching subnet.
	Query string `pulumi:"query"`
	// The space associated to the IP subnet.
	Space string `pulumi:"space"`
	// The tags to be used to find the first matching subnet in the query.
	Tags *string `pulumi:"tags"`
}

func GetIpSubnetQueryOutput(ctx *pulumi.Context, args GetIpSubnetQueryOutputArgs, opts ...pulumi.InvokeOption) GetIpSubnetQueryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetIpSubnetQueryResult, error) {
			args := v.(GetIpSubnetQueryArgs)
			r, err := GetIpSubnetQuery(ctx, &args, opts...)
			var s GetIpSubnetQueryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetIpSubnetQueryResultOutput)
}

// A collection of arguments for invoking getIpSubnetQuery.
type GetIpSubnetQueryOutputArgs struct {
	// The query used to find the first matching subnet.
	Orderby pulumi.StringPtrInput `pulumi:"orderby"`
	// The query used to find the first matching subnet.
	Query pulumi.StringInput `pulumi:"query"`
	// The tags to be used to find the first matching subnet in the query.
	Tags pulumi.StringPtrInput `pulumi:"tags"`
}

func (GetIpSubnetQueryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpSubnetQueryArgs)(nil)).Elem()
}

// A collection of values returned by getIpSubnetQuery.
type GetIpSubnetQueryResultOutput struct{ *pulumi.OutputState }

func (GetIpSubnetQueryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpSubnetQueryResult)(nil)).Elem()
}

func (o GetIpSubnetQueryResultOutput) ToGetIpSubnetQueryResultOutput() GetIpSubnetQueryResultOutput {
	return o
}

func (o GetIpSubnetQueryResultOutput) ToGetIpSubnetQueryResultOutputWithContext(ctx context.Context) GetIpSubnetQueryResultOutput {
	return o
}

// The IP subnet address.
func (o GetIpSubnetQueryResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Address }).(pulumi.StringOutput)
}

// The class associated to the IP subnet.
func (o GetIpSubnetQueryResultOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Class }).(pulumi.StringOutput)
}

// The class parameters associated to IP subnet.
func (o GetIpSubnetQueryResultOutput) ClassParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) map[string]string { return v.ClassParameters }).(pulumi.StringMapOutput)
}

// The subnet's computed gateway.
func (o GetIpSubnetQueryResultOutput) Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Gateway }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetIpSubnetQueryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the IP subnet.
func (o GetIpSubnetQueryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Name }).(pulumi.StringOutput)
}

// The IP subnet netmask.
func (o GetIpSubnetQueryResultOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Netmask }).(pulumi.StringOutput)
}

// The query used to find the first matching subnet.
func (o GetIpSubnetQueryResultOutput) Orderby() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) *string { return v.Orderby }).(pulumi.StringPtrOutput)
}

// The IP subnet prefix.
func (o GetIpSubnetQueryResultOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Prefix }).(pulumi.StringOutput)
}

// The IP subnet's prefix length (ex: 24 for a '/24').
func (o GetIpSubnetQueryResultOutput) PrefixSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) int { return v.PrefixSize }).(pulumi.IntOutput)
}

// The query used to find the first matching subnet.
func (o GetIpSubnetQueryResultOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Query }).(pulumi.StringOutput)
}

// The space associated to the IP subnet.
func (o GetIpSubnetQueryResultOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) string { return v.Space }).(pulumi.StringOutput)
}

// The tags to be used to find the first matching subnet in the query.
func (o GetIpSubnetQueryResultOutput) Tags() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpSubnetQueryResult) *string { return v.Tags }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIpSubnetQueryResultOutput{})
}
