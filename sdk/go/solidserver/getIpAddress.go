// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package solidserver

import (
	"context"
	"reflect"

	"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// IP address data-source allows to retrieve information about reserved IPv4 addresses including meta-data.
func LookupIpAddress(ctx *pulumi.Context, args *LookupIpAddressArgs, opts ...pulumi.InvokeOption) (*LookupIpAddressResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIpAddressResult
	err := ctx.Invoke("solidserver:index/getIpAddress:getIpAddress", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpAddress.
type LookupIpAddressArgs struct {
	// The IP address.
	Address string `pulumi:"address"`
	// The name of the space of the IP address.
	Space string `pulumi:"space"`
}

// A collection of values returned by getIpAddress.
type LookupIpAddressResult struct {
	// The IP address.
	Address string `pulumi:"address"`
	// The class associated to the IP address.
	Class string `pulumi:"class"`
	// The class parameters associated to the IP address.
	ClassParameters map[string]interface{} `pulumi:"classParameters"`
	// Device Name associated to the IP address (Require a 'Device Manager' license).
	Device string `pulumi:"device"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The MAC Address of the IP address.
	Mac string `pulumi:"mac"`
	// The short name or FQDN of the IP address.
	Name string `pulumi:"name"`
	// The provisionned IP address netmask.
	Netmask string `pulumi:"netmask"`
	// The name of the pool of the IP address.
	Pool string `pulumi:"pool"`
	// The IP address prefix.
	Prefix string `pulumi:"prefix"`
	// The prefixLength associated to the IP address.
	PrefixSize int `pulumi:"prefixSize"`
	// The name of the space of the IP address.
	Space string `pulumi:"space"`
	// The name of the subnet of the IP address.
	Subnet string `pulumi:"subnet"`
}

func LookupIpAddressOutput(ctx *pulumi.Context, args LookupIpAddressOutputArgs, opts ...pulumi.InvokeOption) LookupIpAddressResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIpAddressResult, error) {
			args := v.(LookupIpAddressArgs)
			r, err := LookupIpAddress(ctx, &args, opts...)
			var s LookupIpAddressResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupIpAddressResultOutput)
}

// A collection of arguments for invoking getIpAddress.
type LookupIpAddressOutputArgs struct {
	// The IP address.
	Address pulumi.StringInput `pulumi:"address"`
	// The name of the space of the IP address.
	Space pulumi.StringInput `pulumi:"space"`
}

func (LookupIpAddressOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpAddressArgs)(nil)).Elem()
}

// A collection of values returned by getIpAddress.
type LookupIpAddressResultOutput struct{ *pulumi.OutputState }

func (LookupIpAddressResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIpAddressResult)(nil)).Elem()
}

func (o LookupIpAddressResultOutput) ToLookupIpAddressResultOutput() LookupIpAddressResultOutput {
	return o
}

func (o LookupIpAddressResultOutput) ToLookupIpAddressResultOutputWithContext(ctx context.Context) LookupIpAddressResultOutput {
	return o
}

// The IP address.
func (o LookupIpAddressResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Address }).(pulumi.StringOutput)
}

// The class associated to the IP address.
func (o LookupIpAddressResultOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Class }).(pulumi.StringOutput)
}

// The class parameters associated to the IP address.
func (o LookupIpAddressResultOutput) ClassParameters() pulumi.MapOutput {
	return o.ApplyT(func(v LookupIpAddressResult) map[string]interface{} { return v.ClassParameters }).(pulumi.MapOutput)
}

// Device Name associated to the IP address (Require a 'Device Manager' license).
func (o LookupIpAddressResultOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Device }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupIpAddressResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Id }).(pulumi.StringOutput)
}

// The MAC Address of the IP address.
func (o LookupIpAddressResultOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Mac }).(pulumi.StringOutput)
}

// The short name or FQDN of the IP address.
func (o LookupIpAddressResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Name }).(pulumi.StringOutput)
}

// The provisionned IP address netmask.
func (o LookupIpAddressResultOutput) Netmask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Netmask }).(pulumi.StringOutput)
}

// The name of the pool of the IP address.
func (o LookupIpAddressResultOutput) Pool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Pool }).(pulumi.StringOutput)
}

// The IP address prefix.
func (o LookupIpAddressResultOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Prefix }).(pulumi.StringOutput)
}

// The prefixLength associated to the IP address.
func (o LookupIpAddressResultOutput) PrefixSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupIpAddressResult) int { return v.PrefixSize }).(pulumi.IntOutput)
}

// The name of the space of the IP address.
func (o LookupIpAddressResultOutput) Space() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Space }).(pulumi.StringOutput)
}

// The name of the subnet of the IP address.
func (o LookupIpAddressResultOutput) Subnet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIpAddressResult) string { return v.Subnet }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIpAddressResultOutput{})
}
