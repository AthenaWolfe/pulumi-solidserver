{
    "name": "solidserver",
    "description": "A Pulumi package for creating and managing solidserver cloud resources.",
    "keywords": [
        "pulumi",
        "solidserver",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`solidserver` Terraform Provider](https://github.com/EfficientIP-Labs/terraform-provider-solidserver).",
    "repository": "https://github.com/AthenaWolfe/pulumi-solidserver",
    "publisher": "AthenaWolfe",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing solidserver cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/EfficientIP-Labs/terraform-provider-solidserver)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-solidserver` repo](https://github.com/AthenaWolfe/pulumi-solidserver/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-solidserver` repo](https://github.com/EfficientIP-Labs/terraform-provider-solidserver/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/EfficientIP-Labs/terraform-provider-solidserver)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-solidserver` repo](https://github.com/AthenaWolfe/pulumi-solidserver/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-solidserver` repo](https://github.com/EfficientIP-Labs/terraform-provider-solidserver/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "additionalTrustCertsFile": {
                "type": "string",
                "description": "PEM formatted file with additional certificates to trust for TLS connection\n"
            },
            "host": {
                "type": "string",
                "$ref": "#/types/solidserver:index/host:Host",
                "description": "SOLIDServer Hostname or IP address\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_HOST"
                    ]
                }
            },
            "password": {
                "type": "string",
                "$ref": "#/types/solidserver:index/password:Password",
                "description": "SOLIDServer API user's password\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_PASSWORD"
                    ]
                }
            },
            "solidserverversion": {
                "type": "string",
                "$ref": "#/types/solidserver:index/solidserverversion:Solidserverversion",
                "description": "SOLIDServer Version in case API user does not have admin permissions\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_SOLIDSERVERVERION"
                    ]
                }
            },
            "sslverify": {
                "type": "boolean",
                "$ref": "#/types/solidserver:index/sslverify:Sslverify",
                "description": "Enable/Disable ssl verify (Default : enabled)\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_SSLVERIFY"
                    ]
                }
            },
            "username": {
                "type": "string",
                "$ref": "#/types/solidserver:index/username:Username",
                "description": "SOLIDServer API user's ID\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_USERNAME"
                    ]
                }
            }
        },
        "defaults": [
            "host",
            "password",
            "username"
        ]
    },
    "provider": {
        "description": "The provider type for the solidserver package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "additionalTrustCertsFile": {
                "type": "string",
                "description": "PEM formatted file with additional certificates to trust for TLS connection\n"
            },
            "host": {
                "type": "string",
                "$ref": "#/types/solidserver:index/host:Host",
                "description": "SOLIDServer Hostname or IP address\n"
            },
            "password": {
                "type": "string",
                "$ref": "#/types/solidserver:index/password:Password",
                "description": "SOLIDServer API user's password\n"
            },
            "solidserverversion": {
                "type": "string",
                "$ref": "#/types/solidserver:index/solidserverversion:Solidserverversion",
                "description": "SOLIDServer Version in case API user does not have admin permissions\n"
            },
            "sslverify": {
                "type": "boolean",
                "$ref": "#/types/solidserver:index/sslverify:Sslverify",
                "description": "Enable/Disable ssl verify (Default : enabled)\n"
            },
            "username": {
                "type": "string",
                "$ref": "#/types/solidserver:index/username:Username",
                "description": "SOLIDServer API user's ID\n"
            }
        },
        "inputProperties": {
            "additionalTrustCertsFile": {
                "type": "string",
                "description": "PEM formatted file with additional certificates to trust for TLS connection\n"
            },
            "host": {
                "type": "string",
                "$ref": "#/types/solidserver:index/host:Host",
                "description": "SOLIDServer Hostname or IP address\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_HOST"
                    ]
                }
            },
            "password": {
                "type": "string",
                "$ref": "#/types/solidserver:index/password:Password",
                "description": "SOLIDServer API user's password\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_PASSWORD"
                    ]
                }
            },
            "solidserverversion": {
                "type": "string",
                "$ref": "#/types/solidserver:index/solidserverversion:Solidserverversion",
                "description": "SOLIDServer Version in case API user does not have admin permissions\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_SOLIDSERVERVERION"
                    ]
                }
            },
            "sslverify": {
                "type": "boolean",
                "$ref": "#/types/solidserver:index/sslverify:Sslverify",
                "description": "Enable/Disable ssl verify (Default : enabled)\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_SSLVERIFY"
                    ]
                }
            },
            "username": {
                "type": "string",
                "$ref": "#/types/solidserver:index/username:Username",
                "description": "SOLIDServer API user's ID\n",
                "defaultInfo": {
                    "environment": [
                        "SDS_USERNAME"
                    ]
                }
            }
        }
    },
    "resources": {
        "solidserver:index/appApplication:AppApplication": {
            "description": "Application resource allows to create and manage applications that can be used to implement traffic policies in order\nto optimize the routing of the associated traffic according to the selected loadbalancing strategy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstApplicaton = new solidserver.AppApplication(\"myFirstApplicaton\", {\n    \"class\": \"INTERNAL_APP\",\n    classParameters: {\n        contact: \"a.smith@mycompany.priv\",\n        owner: \"MR. Smith\",\n    },\n    fqdn: \"myfirstapp.priv\",\n    gslbMembers: [\n        \"ns0.priv\",\n        \"ns1.priv\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_applicaton = solidserver.AppApplication(\"myFirstApplicaton\",\n    class_=\"INTERNAL_APP\",\n    class_parameters={\n        \"contact\": \"a.smith@mycompany.priv\",\n        \"owner\": \"MR. Smith\",\n    },\n    fqdn=\"myfirstapp.priv\",\n    gslb_members=[\n        \"ns0.priv\",\n        \"ns1.priv\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstApplicaton = new Solidserver.AppApplication(\"myFirstApplicaton\", new()\n    {\n        Class = \"INTERNAL_APP\",\n        ClassParameters = \n        {\n            { \"contact\", \"a.smith@mycompany.priv\" },\n            { \"owner\", \"MR. Smith\" },\n        },\n        Fqdn = \"myfirstapp.priv\",\n        GslbMembers = new[]\n        {\n            \"ns0.priv\",\n            \"ns1.priv\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewAppApplication(ctx, \"myFirstApplicaton\", \u0026solidserver.AppApplicationArgs{\n\t\t\tClass: pulumi.String(\"INTERNAL_APP\"),\n\t\t\tClassParameters: pulumi.StringMap{\n\t\t\t\t\"contact\": pulumi.String(\"a.smith@mycompany.priv\"),\n\t\t\t\t\"owner\":   pulumi.String(\"MR. Smith\"),\n\t\t\t},\n\t\t\tFqdn: pulumi.String(\"myfirstapp.priv\"),\n\t\t\tGslbMembers: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ns0.priv\"),\n\t\t\t\tpulumi.String(\"ns1.priv\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.AppApplication;\nimport com.pulumi.solidserver.AppApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstApplicaton = new AppApplication(\"myFirstApplicaton\", AppApplicationArgs.builder()        \n            .class_(\"INTERNAL_APP\")\n            .classParameters(Map.ofEntries(\n                Map.entry(\"contact\", \"a.smith@mycompany.priv\"),\n                Map.entry(\"owner\", \"MR. Smith\")\n            ))\n            .fqdn(\"myfirstapp.priv\")\n            .gslbMembers(            \n                \"ns0.priv\",\n                \"ns1.priv\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstApplicaton:\n    type: solidserver:AppApplication\n    properties:\n      class: INTERNAL_APP\n      classParameters:\n        contact: a.smith@mycompany.priv\n        owner: MR. Smith\n      fqdn: myfirstapp.priv\n      gslbMembers:\n        - ns0.priv\n        - ns1.priv\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the application.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to application.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name of the application to create.\n"
                },
                "gslbMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the GSLB servers applying the application traffic policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application to create.\n"
                }
            },
            "required": [
                "fqdn",
                "gslbMembers",
                "name"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the application.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to application.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name of the application to create.\n",
                    "willReplaceOnChanges": true
                },
                "gslbMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the GSLB servers applying the application traffic policy.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application to create.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "fqdn",
                "gslbMembers"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppApplication resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the application.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to application.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The Fully Qualified Domain Name of the application to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "gslbMembers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of the GSLB servers applying the application traffic policy.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application to create.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/appNode:AppNode": {
            "description": "Application Node resource allow to create and manage application endpoints that are monitored by the GSLB DNS servers\nassociated with the application, in order to route related traffic according to the selected loadbalancing strategy.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstNode = new solidserver.AppNode(\"myFirstNode\", {\n    address: \"127.0.0.1\",\n    application: solidserver_app_application.myFirstApplicaton.name,\n    fqdn: solidserver_app_application.myFirstApplicaton.fqdn,\n    healthcheck: \"tcp\",\n    healthcheckParameters: {\n        tcp_port: \"443\",\n    },\n    pool: solidserver_app_pool.myFirstPool.name,\n    weight: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_node = solidserver.AppNode(\"myFirstNode\",\n    address=\"127.0.0.1\",\n    application=solidserver_app_application[\"myFirstApplicaton\"][\"name\"],\n    fqdn=solidserver_app_application[\"myFirstApplicaton\"][\"fqdn\"],\n    healthcheck=\"tcp\",\n    healthcheck_parameters={\n        \"tcp_port\": \"443\",\n    },\n    pool=solidserver_app_pool[\"myFirstPool\"][\"name\"],\n    weight=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstNode = new Solidserver.AppNode(\"myFirstNode\", new()\n    {\n        Address = \"127.0.0.1\",\n        Application = solidserver_app_application.MyFirstApplicaton.Name,\n        Fqdn = solidserver_app_application.MyFirstApplicaton.Fqdn,\n        Healthcheck = \"tcp\",\n        HealthcheckParameters = \n        {\n            { \"tcp_port\", \"443\" },\n        },\n        Pool = solidserver_app_pool.MyFirstPool.Name,\n        Weight = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewAppNode(ctx, \"myFirstNode\", \u0026solidserver.AppNodeArgs{\n\t\t\tAddress:     pulumi.String(\"127.0.0.1\"),\n\t\t\tApplication: pulumi.Any(solidserver_app_application.MyFirstApplicaton.Name),\n\t\t\tFqdn:        pulumi.Any(solidserver_app_application.MyFirstApplicaton.Fqdn),\n\t\t\tHealthcheck: pulumi.String(\"tcp\"),\n\t\t\tHealthcheckParameters: pulumi.Map{\n\t\t\t\t\"tcp_port\": pulumi.Any(\"443\"),\n\t\t\t},\n\t\t\tPool:   pulumi.Any(solidserver_app_pool.MyFirstPool.Name),\n\t\t\tWeight: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.AppNode;\nimport com.pulumi.solidserver.AppNodeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstNode = new AppNode(\"myFirstNode\", AppNodeArgs.builder()        \n            .address(\"127.0.0.1\")\n            .application(solidserver_app_application.myFirstApplicaton().name())\n            .fqdn(solidserver_app_application.myFirstApplicaton().fqdn())\n            .healthcheck(\"tcp\")\n            .healthcheckParameters(Map.of(\"tcp_port\", \"443\"))\n            .pool(solidserver_app_pool.myFirstPool().name())\n            .weight(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstNode:\n    type: solidserver:AppNode\n    properties:\n      address: 127.0.0.1\n      application: ${solidserver_app_application.myFirstApplicaton.name}\n      fqdn: ${solidserver_app_application.myFirstApplicaton.fqdn}\n      healthcheck: tcp\n      healthcheckParameters:\n        tcp_port: '443'\n      pool: ${solidserver_app_pool.myFirstPool.name}\n      weight: 1\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Supported HealthCheck(s)\n\n|Healtcheck|Parameter|Supported Values|\n|----------|---------|----------------|\n|tcp|tcp_port|Any value between 1 and 65535.|\n|http|http_host|The SNI hostname to look for.|\n|http|http_port|Any value between 1 and 65535.|\n|http|http_path|The URL path to look for.|\n|http|http_ssl|Use 0 (disable) or 1 (enable) for HTTPS connection.|\n|http|http_status_code|The HTTP status code to expect.|\n|http|http_lookup_string|A string the must be included in the answer payload.|\n|http|http_basic_auth|HTTP basic auth header (user:password).|\n|http|http_ssl_verify|Use 0 or 1 to activate ssl certificate checks.|\n",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address (IPv4 or IPv6 depending on the node) of the application node to create.\n"
                },
                "application": {
                    "type": "string",
                    "description": "The name of the application associated to the node.\n"
                },
                "failbackThreshold": {
                    "type": "integer",
                    "description": "The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fqdn of the application associated to the node.\n"
                },
                "healthcheck": {
                    "type": "string",
                    "description": "The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).\n"
                },
                "healthcheckFrequency": {
                    "type": "integer",
                    "description": "The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).\n"
                },
                "healthcheckParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The healthcheck parameters.\n"
                },
                "healthcheckTimeout": {
                    "type": "integer",
                    "description": "The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application node to create.\n"
                },
                "pool": {
                    "type": "string",
                    "description": "The name of the application pool associated to the node.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the application node to create.\n"
                }
            },
            "required": [
                "application",
                "fqdn",
                "name",
                "pool"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IP address (IPv4 or IPv6 depending on the node) of the application node to create.\n",
                    "willReplaceOnChanges": true
                },
                "application": {
                    "type": "string",
                    "description": "The name of the application associated to the node.\n",
                    "willReplaceOnChanges": true
                },
                "failbackThreshold": {
                    "type": "integer",
                    "description": "The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).\n"
                },
                "failureThreshold": {
                    "type": "integer",
                    "description": "The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fqdn of the application associated to the node.\n",
                    "willReplaceOnChanges": true
                },
                "healthcheck": {
                    "type": "string",
                    "description": "The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).\n"
                },
                "healthcheckFrequency": {
                    "type": "integer",
                    "description": "The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).\n"
                },
                "healthcheckParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The healthcheck parameters.\n"
                },
                "healthcheckTimeout": {
                    "type": "integer",
                    "description": "The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application node to create.\n",
                    "willReplaceOnChanges": true
                },
                "pool": {
                    "type": "string",
                    "description": "The name of the application pool associated to the node.\n",
                    "willReplaceOnChanges": true
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight of the application node to create.\n"
                }
            },
            "requiredInputs": [
                "application",
                "fqdn",
                "pool"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppNode resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address (IPv4 or IPv6 depending on the node) of the application node to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "application": {
                        "type": "string",
                        "description": "The name of the application associated to the node.\n",
                        "willReplaceOnChanges": true
                    },
                    "failbackThreshold": {
                        "type": "integer",
                        "description": "The healthcheck failback threshold for the application node to create (Supported: 1-10; Default: 3).\n"
                    },
                    "failureThreshold": {
                        "type": "integer",
                        "description": "The healthcheck failure threshold for the application node to create (Supported: 1-10; Default: 3).\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The fqdn of the application associated to the node.\n",
                        "willReplaceOnChanges": true
                    },
                    "healthcheck": {
                        "type": "string",
                        "description": "The healthcheck name for the application node to create (Supported: ok,ping,tcp,http; Default: ok).\n"
                    },
                    "healthcheckFrequency": {
                        "type": "integer",
                        "description": "The healthcheck frequency in second for the application node to create (Supported: 10,30,60,300; Default: 60).\n"
                    },
                    "healthcheckParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The healthcheck parameters.\n"
                    },
                    "healthcheckTimeout": {
                        "type": "integer",
                        "description": "The healthcheck timeout in second for the application node to create (Supported: 1-10; Default: 3).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application node to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "pool": {
                        "type": "string",
                        "description": "The name of the application pool associated to the node.\n",
                        "willReplaceOnChanges": true
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight of the application node to create.\n"
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/appPool:AppPool": {
            "description": "Application Pool resource allows to create and manage a pool that implement a traffic policy.\nApplication Pools are groups of nodes serving the same application and monitored by the GSLB(s) DNS servers\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstPool = new solidserver.AppPool(\"myFirstPool\", {\n    application: solidserver_app_application.myFirstApplicaton.name,\n    fqdn: solidserver_app_application.myFirstApplicaton.fqdn,\n    lbMode: latency,\n    affinity: true,\n    affinitySessionDuration: 300,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_pool = solidserver.AppPool(\"myFirstPool\",\n    application=solidserver_app_application[\"myFirstApplicaton\"][\"name\"],\n    fqdn=solidserver_app_application[\"myFirstApplicaton\"][\"fqdn\"],\n    lb_mode=latency,\n    affinity=True,\n    affinity_session_duration=300)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstPool = new Solidserver.AppPool(\"myFirstPool\", new()\n    {\n        Application = solidserver_app_application.MyFirstApplicaton.Name,\n        Fqdn = solidserver_app_application.MyFirstApplicaton.Fqdn,\n        LbMode = latency,\n        Affinity = true,\n        AffinitySessionDuration = 300,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewAppPool(ctx, \"myFirstPool\", \u0026solidserver.AppPoolArgs{\n\t\t\tApplication:             pulumi.Any(solidserver_app_application.MyFirstApplicaton.Name),\n\t\t\tFqdn:                    pulumi.Any(solidserver_app_application.MyFirstApplicaton.Fqdn),\n\t\t\tLbMode:                  pulumi.Any(latency),\n\t\t\tAffinity:                pulumi.Bool(true),\n\t\t\tAffinitySessionDuration: pulumi.Int(300),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.AppPool;\nimport com.pulumi.solidserver.AppPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstPool = new AppPool(\"myFirstPool\", AppPoolArgs.builder()        \n            .application(solidserver_app_application.myFirstApplicaton().name())\n            .fqdn(solidserver_app_application.myFirstApplicaton().fqdn())\n            .lbMode(latency)\n            .affinity(true)\n            .affinitySessionDuration(300)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstPool:\n    type: solidserver:AppPool\n    properties:\n      application: ${solidserver_app_application.myFirstApplicaton.name}\n      fqdn: ${solidserver_app_application.myFirstApplicaton.fqdn}\n      lbMode: ${latency}\n      affinity: true\n      affinitySessionDuration: 300\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "affinity": {
                    "type": "boolean",
                    "description": "Enable session affinity for the application pool.\n"
                },
                "affinitySessionDuration": {
                    "type": "integer",
                    "description": "The time each session is maintained in sec (Default: 300).\n"
                },
                "application": {
                    "type": "string",
                    "description": "The name of the application associated to the pool.\n"
                },
                "bestActiveNodes": {
                    "type": "integer",
                    "description": "Number of best active nodes when lb_mode is set to latency.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fqdn of the application associated to the pool.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "The IP protocol version used by the application pool to create (Supported: ipv4, ipv6; Default: ipv4).\n"
                },
                "lbMode": {
                    "type": "string",
                    "description": "The load balancing mode of the application pool to create (Supported: weighted,round-robin,latency; Default: round-robin).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application pool to create.\n"
                }
            },
            "required": [
                "application",
                "fqdn",
                "name"
            ],
            "inputProperties": {
                "affinity": {
                    "type": "boolean",
                    "description": "Enable session affinity for the application pool.\n"
                },
                "affinitySessionDuration": {
                    "type": "integer",
                    "description": "The time each session is maintained in sec (Default: 300).\n"
                },
                "application": {
                    "type": "string",
                    "description": "The name of the application associated to the pool.\n",
                    "willReplaceOnChanges": true
                },
                "bestActiveNodes": {
                    "type": "integer",
                    "description": "Number of best active nodes when lb_mode is set to latency.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "The fqdn of the application associated to the pool.\n",
                    "willReplaceOnChanges": true
                },
                "ipVersion": {
                    "type": "string",
                    "description": "The IP protocol version used by the application pool to create (Supported: ipv4, ipv6; Default: ipv4).\n",
                    "willReplaceOnChanges": true
                },
                "lbMode": {
                    "type": "string",
                    "description": "The load balancing mode of the application pool to create (Supported: weighted,round-robin,latency; Default: round-robin).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the application pool to create.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "application",
                "fqdn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AppPool resources.\n",
                "properties": {
                    "affinity": {
                        "type": "boolean",
                        "description": "Enable session affinity for the application pool.\n"
                    },
                    "affinitySessionDuration": {
                        "type": "integer",
                        "description": "The time each session is maintained in sec (Default: 300).\n"
                    },
                    "application": {
                        "type": "string",
                        "description": "The name of the application associated to the pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "bestActiveNodes": {
                        "type": "integer",
                        "description": "Number of best active nodes when lb_mode is set to latency.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "The fqdn of the application associated to the pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipVersion": {
                        "type": "string",
                        "description": "The IP protocol version used by the application pool to create (Supported: ipv4, ipv6; Default: ipv4).\n",
                        "willReplaceOnChanges": true
                    },
                    "lbMode": {
                        "type": "string",
                        "description": "The load balancing mode of the application pool to create (Supported: weighted,round-robin,latency; Default: round-robin).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the application pool to create.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/cdb:Cdb": {
            "description": "Custom DB resource allows to create and manage custom database(s) stored within SOLIDserver.\nThis custom databases can be leveraged within object classes and wizards in order to store custom meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstCustomDB = new solidserver.Cdb(\"myFirstCustomDB\", {\n    label1: \"Country Code\",\n    label2: \"Country Name\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_custom_db = solidserver.Cdb(\"myFirstCustomDB\",\n    label1=\"Country Code\",\n    label2=\"Country Name\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstCustomDB = new Solidserver.Cdb(\"myFirstCustomDB\", new()\n    {\n        Label1 = \"Country Code\",\n        Label2 = \"Country Name\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewCdb(ctx, \"myFirstCustomDB\", \u0026solidserver.CdbArgs{\n\t\t\tLabel1: pulumi.String(\"Country Code\"),\n\t\t\tLabel2: pulumi.String(\"Country Name\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Cdb;\nimport com.pulumi.solidserver.CdbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstCustomDB = new Cdb(\"myFirstCustomDB\", CdbArgs.builder()        \n            .label1(\"Country Code\")\n            .label2(\"Country Name\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstCustomDB:\n    type: solidserver:Cdb\n    properties:\n      label1: Country Code\n      label2: Country Name\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "label1": {
                    "type": "string",
                    "description": "The name of the label 1\n"
                },
                "label10": {
                    "type": "string",
                    "description": "The name of the label 10\n"
                },
                "label2": {
                    "type": "string",
                    "description": "The name of the label 2\n"
                },
                "label3": {
                    "type": "string",
                    "description": "The name of the label 3\n"
                },
                "label4": {
                    "type": "string",
                    "description": "The name of the label 4\n"
                },
                "label5": {
                    "type": "string",
                    "description": "The name of the label 5\n"
                },
                "label6": {
                    "type": "string",
                    "description": "The name of the label 6\n"
                },
                "label7": {
                    "type": "string",
                    "description": "The name of the label 7\n"
                },
                "label8": {
                    "type": "string",
                    "description": "The name of the label 8\n"
                },
                "label9": {
                    "type": "string",
                    "description": "The name of the label 9\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom DB.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "label1": {
                    "type": "string",
                    "description": "The name of the label 1\n"
                },
                "label10": {
                    "type": "string",
                    "description": "The name of the label 10\n"
                },
                "label2": {
                    "type": "string",
                    "description": "The name of the label 2\n"
                },
                "label3": {
                    "type": "string",
                    "description": "The name of the label 3\n"
                },
                "label4": {
                    "type": "string",
                    "description": "The name of the label 4\n"
                },
                "label5": {
                    "type": "string",
                    "description": "The name of the label 5\n"
                },
                "label6": {
                    "type": "string",
                    "description": "The name of the label 6\n"
                },
                "label7": {
                    "type": "string",
                    "description": "The name of the label 7\n"
                },
                "label8": {
                    "type": "string",
                    "description": "The name of the label 8\n"
                },
                "label9": {
                    "type": "string",
                    "description": "The name of the label 9\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom DB.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cdb resources.\n",
                "properties": {
                    "label1": {
                        "type": "string",
                        "description": "The name of the label 1\n"
                    },
                    "label10": {
                        "type": "string",
                        "description": "The name of the label 10\n"
                    },
                    "label2": {
                        "type": "string",
                        "description": "The name of the label 2\n"
                    },
                    "label3": {
                        "type": "string",
                        "description": "The name of the label 3\n"
                    },
                    "label4": {
                        "type": "string",
                        "description": "The name of the label 4\n"
                    },
                    "label5": {
                        "type": "string",
                        "description": "The name of the label 5\n"
                    },
                    "label6": {
                        "type": "string",
                        "description": "The name of the label 6\n"
                    },
                    "label7": {
                        "type": "string",
                        "description": "The name of the label 7\n"
                    },
                    "label8": {
                        "type": "string",
                        "description": "The name of the label 8\n"
                    },
                    "label9": {
                        "type": "string",
                        "description": "The name of the label 9\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the custom DB.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/cdbData:CdbData": {
            "description": "Custom DB Data resource allows to create and manage custom database entries stored within SOLIDserver.\nThis custom database entries can be leveraged within object classes and wizards in order to store custom meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstCustomData = new solidserver.CdbData(\"myFirstCustomData\", {\n    customDb: \"myFirstCustomDB\",\n    value1: \"FR\",\n    value2: \"France\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_custom_data = solidserver.CdbData(\"myFirstCustomData\",\n    custom_db=\"myFirstCustomDB\",\n    value1=\"FR\",\n    value2=\"France\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstCustomData = new Solidserver.CdbData(\"myFirstCustomData\", new()\n    {\n        CustomDb = \"myFirstCustomDB\",\n        Value1 = \"FR\",\n        Value2 = \"France\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewCdbData(ctx, \"myFirstCustomData\", \u0026solidserver.CdbDataArgs{\n\t\t\tCustomDb: pulumi.String(\"myFirstCustomDB\"),\n\t\t\tValue1:   pulumi.String(\"FR\"),\n\t\t\tValue2:   pulumi.String(\"France\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.CdbData;\nimport com.pulumi.solidserver.CdbDataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstCustomData = new CdbData(\"myFirstCustomData\", CdbDataArgs.builder()        \n            .customDb(\"myFirstCustomDB\")\n            .value1(\"FR\")\n            .value2(\"France\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstCustomData:\n    type: solidserver:CdbData\n    properties:\n      customDb: myFirstCustomDB\n      value1: FR\n      value2: France\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "customDb": {
                    "type": "string",
                    "description": "The name of the Custom DB into which creating the data.\n"
                },
                "value1": {
                    "type": "string",
                    "description": "The value 1 (key of the data)\n"
                },
                "value10": {
                    "type": "string",
                    "description": "The value 10\n"
                },
                "value2": {
                    "type": "string",
                    "description": "The value 2\n"
                },
                "value3": {
                    "type": "string",
                    "description": "The value 3\n"
                },
                "value4": {
                    "type": "string",
                    "description": "The value 4\n"
                },
                "value5": {
                    "type": "string",
                    "description": "The value 5\n"
                },
                "value6": {
                    "type": "string",
                    "description": "The value 6\n"
                },
                "value7": {
                    "type": "string",
                    "description": "The value 7\n"
                },
                "value8": {
                    "type": "string",
                    "description": "The value 8\n"
                },
                "value9": {
                    "type": "string",
                    "description": "The value 9\n"
                }
            },
            "required": [
                "customDb",
                "value1"
            ],
            "inputProperties": {
                "customDb": {
                    "type": "string",
                    "description": "The name of the Custom DB into which creating the data.\n",
                    "willReplaceOnChanges": true
                },
                "value1": {
                    "type": "string",
                    "description": "The value 1 (key of the data)\n",
                    "willReplaceOnChanges": true
                },
                "value10": {
                    "type": "string",
                    "description": "The value 10\n"
                },
                "value2": {
                    "type": "string",
                    "description": "The value 2\n"
                },
                "value3": {
                    "type": "string",
                    "description": "The value 3\n"
                },
                "value4": {
                    "type": "string",
                    "description": "The value 4\n"
                },
                "value5": {
                    "type": "string",
                    "description": "The value 5\n"
                },
                "value6": {
                    "type": "string",
                    "description": "The value 6\n"
                },
                "value7": {
                    "type": "string",
                    "description": "The value 7\n"
                },
                "value8": {
                    "type": "string",
                    "description": "The value 8\n"
                },
                "value9": {
                    "type": "string",
                    "description": "The value 9\n"
                }
            },
            "requiredInputs": [
                "customDb",
                "value1"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CdbData resources.\n",
                "properties": {
                    "customDb": {
                        "type": "string",
                        "description": "The name of the Custom DB into which creating the data.\n",
                        "willReplaceOnChanges": true
                    },
                    "value1": {
                        "type": "string",
                        "description": "The value 1 (key of the data)\n",
                        "willReplaceOnChanges": true
                    },
                    "value10": {
                        "type": "string",
                        "description": "The value 10\n"
                    },
                    "value2": {
                        "type": "string",
                        "description": "The value 2\n"
                    },
                    "value3": {
                        "type": "string",
                        "description": "The value 3\n"
                    },
                    "value4": {
                        "type": "string",
                        "description": "The value 4\n"
                    },
                    "value5": {
                        "type": "string",
                        "description": "The value 5\n"
                    },
                    "value6": {
                        "type": "string",
                        "description": "The value 6\n"
                    },
                    "value7": {
                        "type": "string",
                        "description": "The value 7\n"
                    },
                    "value8": {
                        "type": "string",
                        "description": "The value 8\n"
                    },
                    "value9": {
                        "type": "string",
                        "description": "The value 9\n"
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/device:Device": {
            "description": "Device resource allows to create and manage network devices and link them with IP addresses.\nIt is pretty useful to link together the many IP addresses a device can rely on.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstDevice = new solidserver.Device(\"myFirstDevice\", {\n    \"class\": \"AWS_EC2_INSTANCE\",\n    classParameters: {\n        cloudaz: \"eu-west-1a\",\n        instanceid: \"i-03d4bd36f915b0322\",\n        instancetype: \"t2.micro\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_device = solidserver.Device(\"myFirstDevice\",\n    class_=\"AWS_EC2_INSTANCE\",\n    class_parameters={\n        \"cloudaz\": \"eu-west-1a\",\n        \"instanceid\": \"i-03d4bd36f915b0322\",\n        \"instancetype\": \"t2.micro\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstDevice = new Solidserver.Device(\"myFirstDevice\", new()\n    {\n        Class = \"AWS_EC2_INSTANCE\",\n        ClassParameters = \n        {\n            { \"cloudaz\", \"eu-west-1a\" },\n            { \"instanceid\", \"i-03d4bd36f915b0322\" },\n            { \"instancetype\", \"t2.micro\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewDevice(ctx, \"myFirstDevice\", \u0026solidserver.DeviceArgs{\n\t\t\tClass: pulumi.String(\"AWS_EC2_INSTANCE\"),\n\t\t\tClassParameters: pulumi.StringMap{\n\t\t\t\t\"cloudaz\":      pulumi.String(\"eu-west-1a\"),\n\t\t\t\t\"instanceid\":   pulumi.String(\"i-03d4bd36f915b0322\"),\n\t\t\t\t\"instancetype\": pulumi.String(\"t2.micro\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Device;\nimport com.pulumi.solidserver.DeviceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstDevice = new Device(\"myFirstDevice\", DeviceArgs.builder()        \n            .class_(\"AWS_EC2_INSTANCE\")\n            .classParameters(Map.ofEntries(\n                Map.entry(\"cloudaz\", \"eu-west-1a\"),\n                Map.entry(\"instanceid\", \"i-03d4bd36f915b0322\"),\n                Map.entry(\"instancetype\", \"t2.micro\")\n            ))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstDevice:\n    type: solidserver:Device\n    properties:\n      class: AWS_EC2_INSTANCE\n      classParameters:\n        cloudaz: eu-west-1a\n        instanceid: i-03d4bd36f915b0322\n        instancetype: t2.micro\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the device.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the device to create.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the device.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to device.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the device to create.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Device resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the device.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to device.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the device to create.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/dnsForwardZone:DnsForwardZone": {
            "description": "DNS Forward Zone resource allows to create and manage DNS forward zones.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstForwardZone = new solidserver.DnsForwardZone(\"myFirstForwardZone\", {\n    dnsserver: \"ns.priv\",\n    forward: \"first\",\n    forwarders: [\n        \"10.10.8.8\",\n        \"10.10.4.4\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_forward_zone = solidserver.DnsForwardZone(\"myFirstForwardZone\",\n    dnsserver=\"ns.priv\",\n    forward=\"first\",\n    forwarders=[\n        \"10.10.8.8\",\n        \"10.10.4.4\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstForwardZone = new Solidserver.DnsForwardZone(\"myFirstForwardZone\", new()\n    {\n        Dnsserver = \"ns.priv\",\n        Forward = \"first\",\n        Forwarders = new[]\n        {\n            \"10.10.8.8\",\n            \"10.10.4.4\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewDnsForwardZone(ctx, \"myFirstForwardZone\", \u0026solidserver.DnsForwardZoneArgs{\n\t\t\tDnsserver: pulumi.String(\"ns.priv\"),\n\t\t\tForward:   pulumi.String(\"first\"),\n\t\t\tForwarders: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.10.8.8\"),\n\t\t\t\tpulumi.String(\"10.10.4.4\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.DnsForwardZone;\nimport com.pulumi.solidserver.DnsForwardZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstForwardZone = new DnsForwardZone(\"myFirstForwardZone\", DnsForwardZoneArgs.builder()        \n            .dnsserver(\"ns.priv\")\n            .forward(\"first\")\n            .forwarders(            \n                \"10.10.8.8\",\n                \"10.10.4.4\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstForwardZone:\n    type: solidserver:DnsForwardZone\n    properties:\n      dnsserver: ns.priv\n      forward: first\n      forwarders:\n        - 10.10.8.8\n        - 10.10.4.4\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the forward zone.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the forward zone.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The managed SMART DNS server name, or DNS server name hosting the forward zone.\n"
                },
                "dnsview": {
                    "type": "string",
                    "description": "The DNS view name hosting the forward zone.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the forward zone (Supported: only, first; Default: only).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP address list of the forwarder(s) to use for the forward zone.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Domain Name served by the forward zone.\n"
                }
            },
            "required": [
                "dnsserver",
                "name"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the forward zone.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the forward zone.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The managed SMART DNS server name, or DNS server name hosting the forward zone.\n",
                    "willReplaceOnChanges": true
                },
                "dnsview": {
                    "type": "string",
                    "description": "The DNS view name hosting the forward zone.\n",
                    "willReplaceOnChanges": true
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the forward zone (Supported: only, first; Default: only).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP address list of the forwarder(s) to use for the forward zone.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Domain Name served by the forward zone.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dnsserver"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsForwardZone resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the forward zone.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the forward zone.\n"
                    },
                    "dnsserver": {
                        "type": "string",
                        "description": "The managed SMART DNS server name, or DNS server name hosting the forward zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "dnsview": {
                        "type": "string",
                        "description": "The DNS view name hosting the forward zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "forward": {
                        "type": "string",
                        "description": "The forwarding mode of the forward zone (Supported: only, first; Default: only).\n"
                    },
                    "forwarders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP address list of the forwarder(s) to use for the forward zone.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Domain Name served by the forward zone.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/dnsRr:DnsRr": {
            "description": "DNS RR resource allows to create and manage DNS resource records of type A, AAAA, PTR, CNAME, DNAME, NS.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPPTR = solidserver.getIpPtr({\n    address: solidserver_ip_address.myFirstIPAddress.address,\n});\nconst aaRecord = new solidserver.DnsRr(\"aaRecord\", {\n    dnsserver: \"ns.mycompany.priv\",\n    dnsview: \"Internal\",\n    dnszone: \"mycompany.priv\",\n    type: \"PTR\",\n    value: \"myapp.mycompany.priv\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ipptr = solidserver.get_ip_ptr(address=solidserver_ip_address[\"myFirstIPAddress\"][\"address\"])\naa_record = solidserver.DnsRr(\"aaRecord\",\n    dnsserver=\"ns.mycompany.priv\",\n    dnsview=\"Internal\",\n    dnszone=\"mycompany.priv\",\n    type=\"PTR\",\n    value=\"myapp.mycompany.priv\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPPTR = Solidserver.GetIpPtr.Invoke(new()\n    {\n        Address = solidserver_ip_address.MyFirstIPAddress.Address,\n    });\n\n    var aaRecord = new Solidserver.DnsRr(\"aaRecord\", new()\n    {\n        Dnsserver = \"ns.mycompany.priv\",\n        Dnsview = \"Internal\",\n        Dnszone = \"mycompany.priv\",\n        Type = \"PTR\",\n        Value = \"myapp.mycompany.priv\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.GetIpPtr(ctx, \u0026solidserver.GetIpPtrArgs{\n\t\t\tAddress: solidserver_ip_address.MyFirstIPAddress.Address,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = solidserver.NewDnsRr(ctx, \"aaRecord\", \u0026solidserver.DnsRrArgs{\n\t\t\tDnsserver: pulumi.String(\"ns.mycompany.priv\"),\n\t\t\tDnsview:   pulumi.String(\"Internal\"),\n\t\t\tDnszone:   pulumi.String(\"mycompany.priv\"),\n\t\t\tType:      pulumi.String(\"PTR\"),\n\t\t\tValue:     pulumi.String(\"myapp.mycompany.priv\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIpPtrArgs;\nimport com.pulumi.solidserver.DnsRr;\nimport com.pulumi.solidserver.DnsRrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstIPPTR = SolidserverFunctions.getIpPtr(GetIpPtrArgs.builder()\n            .address(solidserver_ip_address.myFirstIPAddress().address())\n            .build());\n\n        var aaRecord = new DnsRr(\"aaRecord\", DnsRrArgs.builder()        \n            .dnsserver(\"ns.mycompany.priv\")\n            .dnsview(\"Internal\")\n            .dnszone(\"mycompany.priv\")\n            .type(\"PTR\")\n            .value(\"myapp.mycompany.priv\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  aaRecord:\n    type: solidserver:DnsRr\n    properties:\n      dnsserver: ns.mycompany.priv\n      dnsview: Internal\n      dnszone: mycompany.priv\n      type: PTR\n      value: myapp.mycompany.priv\nvariables:\n  myFirstIPPTR:\n    fn::invoke:\n      Function: solidserver:getIpPtr\n      Arguments:\n        address: ${solidserver_ip_address.myFirstIPAddress.address}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS view.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the view.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The managed SMART DNS server name, or DNS server name hosting the RR's zone.\n"
                },
                "dnsview": {
                    "type": "string",
                    "description": "The View name of the RR to create.\n"
                },
                "dnszone": {
                    "type": "string",
                    "description": "The Zone name of the RR to create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name of the RR to create.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The DNS Time To Live of the RR to create.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the RR to create (Supported: A, AAAA, PTR, CNAME, DNAME and NS).\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value od the RR to create.\n"
                }
            },
            "required": [
                "dnsserver",
                "name",
                "type",
                "value"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS view.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the view.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The managed SMART DNS server name, or DNS server name hosting the RR's zone.\n",
                    "willReplaceOnChanges": true
                },
                "dnsview": {
                    "type": "string",
                    "description": "The View name of the RR to create.\n",
                    "willReplaceOnChanges": true
                },
                "dnszone": {
                    "type": "string",
                    "description": "The Zone name of the RR to create.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The Fully Qualified Domain Name of the RR to create.\n",
                    "willReplaceOnChanges": true
                },
                "ttl": {
                    "type": "integer",
                    "description": "The DNS Time To Live of the RR to create.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the RR to create (Supported: A, AAAA, PTR, CNAME, DNAME and NS).\n",
                    "willReplaceOnChanges": true
                },
                "value": {
                    "type": "string",
                    "description": "The value od the RR to create.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dnsserver",
                "type",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsRr resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS view.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the view.\n"
                    },
                    "dnsserver": {
                        "type": "string",
                        "description": "The managed SMART DNS server name, or DNS server name hosting the RR's zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "dnsview": {
                        "type": "string",
                        "description": "The View name of the RR to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "dnszone": {
                        "type": "string",
                        "description": "The Zone name of the RR to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The Fully Qualified Domain Name of the RR to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "ttl": {
                        "type": "integer",
                        "description": "The DNS Time To Live of the RR to create.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the RR to create (Supported: A, AAAA, PTR, CNAME, DNAME and NS).\n",
                        "willReplaceOnChanges": true
                    },
                    "value": {
                        "type": "string",
                        "description": "The value od the RR to create.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/dnsServer:DnsServer": {
            "description": "DNS Server resource allows to register and configure DNS servers.\nMost of the time, they are just added to a SMART, but they can remain standalone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstDnsServer = new solidserver.DnsServer(\"myFirstDnsServer\", {\n    address: \"127.0.0.1\",\n    allowQueries: [\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    allowRecursions: [\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    comment: \"My First DNS Server Autmatically created\",\n    forward: \"first\",\n    forwarders: [\n        \"10.0.0.42\",\n        \"10.0.0.43\",\n    ],\n    login: \"admin\",\n    password: \"admin\",\n    smart: solidserver_dns_smart.myFirstDnsSMART.name,\n    smartRole: \"master\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_dns_server = solidserver.DnsServer(\"myFirstDnsServer\",\n    address=\"127.0.0.1\",\n    allow_queries=[\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    allow_recursions=[\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    comment=\"My First DNS Server Autmatically created\",\n    forward=\"first\",\n    forwarders=[\n        \"10.0.0.42\",\n        \"10.0.0.43\",\n    ],\n    login=\"admin\",\n    password=\"admin\",\n    smart=solidserver_dns_smart[\"myFirstDnsSMART\"][\"name\"],\n    smart_role=\"master\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstDnsServer = new Solidserver.DnsServer(\"myFirstDnsServer\", new()\n    {\n        Address = \"127.0.0.1\",\n        AllowQueries = new[]\n        {\n            \"172.16.0.0/12\",\n            \"10.0.0.0/8\",\n            \"192.168.0.0/24\",\n        },\n        AllowRecursions = new[]\n        {\n            \"172.16.0.0/12\",\n            \"10.0.0.0/8\",\n            \"192.168.0.0/24\",\n        },\n        Comment = \"My First DNS Server Autmatically created\",\n        Forward = \"first\",\n        Forwarders = new[]\n        {\n            \"10.0.0.42\",\n            \"10.0.0.43\",\n        },\n        Login = \"admin\",\n        Password = \"admin\",\n        Smart = solidserver_dns_smart.MyFirstDnsSMART.Name,\n        SmartRole = \"master\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewDnsServer(ctx, \"myFirstDnsServer\", \u0026solidserver.DnsServerArgs{\n\t\t\tAddress: pulumi.String(\"127.0.0.1\"),\n\t\t\tAllowQueries: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"172.16.0.0/12\"),\n\t\t\t\tpulumi.String(\"10.0.0.0/8\"),\n\t\t\t\tpulumi.String(\"192.168.0.0/24\"),\n\t\t\t},\n\t\t\tAllowRecursions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"172.16.0.0/12\"),\n\t\t\t\tpulumi.String(\"10.0.0.0/8\"),\n\t\t\t\tpulumi.String(\"192.168.0.0/24\"),\n\t\t\t},\n\t\t\tComment: pulumi.String(\"My First DNS Server Autmatically created\"),\n\t\t\tForward: pulumi.String(\"first\"),\n\t\t\tForwarders: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.42\"),\n\t\t\t\tpulumi.String(\"10.0.0.43\"),\n\t\t\t},\n\t\t\tLogin:     pulumi.String(\"admin\"),\n\t\t\tPassword:  pulumi.String(\"admin\"),\n\t\t\tSmart:     pulumi.Any(solidserver_dns_smart.MyFirstDnsSMART.Name),\n\t\t\tSmartRole: pulumi.String(\"master\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.DnsServer;\nimport com.pulumi.solidserver.DnsServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstDnsServer = new DnsServer(\"myFirstDnsServer\", DnsServerArgs.builder()        \n            .address(\"127.0.0.1\")\n            .allowQueries(            \n                \"172.16.0.0/12\",\n                \"10.0.0.0/8\",\n                \"192.168.0.0/24\")\n            .allowRecursions(            \n                \"172.16.0.0/12\",\n                \"10.0.0.0/8\",\n                \"192.168.0.0/24\")\n            .comment(\"My First DNS Server Autmatically created\")\n            .forward(\"first\")\n            .forwarders(            \n                \"10.0.0.42\",\n                \"10.0.0.43\")\n            .login(\"admin\")\n            .password(\"admin\")\n            .smart(solidserver_dns_smart.myFirstDnsSMART().name())\n            .smartRole(\"master\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstDnsServer:\n    type: solidserver:DnsServer\n    properties:\n      address: 127.0.0.1\n      allowQueries:\n        - 172.16.0.0/12\n        - 10.0.0.0/8\n        - 192.168.0.0/24\n      allowRecursions:\n        - 172.16.0.0/12\n        - 10.0.0.0/8\n        - 192.168.0.0/24\n      comment: My First DNS Server Autmatically created\n      forward: first\n      forwarders:\n        - 10.0.0.42\n        - 10.0.0.43\n      login: admin\n      password: admin\n      smart: ${solidserver_dns_smart.myFirstDnsSMART.name}\n      smartRole: master\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address of the DNS server to create.\n"
                },
                "allowQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowRecursions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowTransfers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS server.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the DNS server.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Custom information about the DNS server.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the DNS server (Supported: none, first, only; Default: none).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of forwarders' IP address to be used by the DNS server.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The login to use for enrolling of the DNS server.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS server to create.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to use the enrolling of the DNS server.\n"
                },
                "recursion": {
                    "type": "boolean",
                    "description": "The recursion mode of the DNS server (Default: true).\n"
                },
                "smart": {
                    "type": "string",
                    "description": "The DNS SMART the DNS server must join.\n"
                },
                "smartRole": {
                    "type": "string",
                    "description": "The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of DNS server (Supported: ipm (SOLIDserver or Linux Package); Default: ipm).\n"
                }
            },
            "required": [
                "address",
                "login",
                "name",
                "password",
                "type"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IPv4 address of the DNS server to create.\n",
                    "willReplaceOnChanges": true
                },
                "allowQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowRecursions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowTransfers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS server.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the DNS server.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Custom information about the DNS server.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the DNS server (Supported: none, first, only; Default: none).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of forwarders' IP address to be used by the DNS server.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The login to use for enrolling of the DNS server.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS server to create.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password to use the enrolling of the DNS server.\n",
                    "willReplaceOnChanges": true
                },
                "recursion": {
                    "type": "boolean",
                    "description": "The recursion mode of the DNS server (Default: true).\n"
                },
                "smart": {
                    "type": "string",
                    "description": "The DNS SMART the DNS server must join.\n",
                    "willReplaceOnChanges": true
                },
                "smartRole": {
                    "type": "string",
                    "description": "The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "address",
                "login",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsServer resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv4 address of the DNS server to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "allowQueries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "allowRecursions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "allowTransfers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS server.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the DNS server.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Custom information about the DNS server.\n"
                    },
                    "forward": {
                        "type": "string",
                        "description": "The forwarding mode of the DNS server (Supported: none, first, only; Default: none).\n"
                    },
                    "forwarders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of forwarders' IP address to be used by the DNS server.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The login to use for enrolling of the DNS server.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS server to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password to use the enrolling of the DNS server.\n",
                        "willReplaceOnChanges": true
                    },
                    "recursion": {
                        "type": "boolean",
                        "description": "The recursion mode of the DNS server (Default: true).\n"
                    },
                    "smart": {
                        "type": "string",
                        "description": "The DNS SMART the DNS server must join.\n",
                        "willReplaceOnChanges": true
                    },
                    "smartRole": {
                        "type": "string",
                        "description": "The role the DNS server will play within the SMART (Supported: master, slave; Default: slave).\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of DNS server (Supported: ipm (SOLIDserver or Linux Package); Default: ipm).\n"
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/dnsSmart:DnsSmart": {
            "description": "DNS SMART resource allows to create and manage DNS SMART architectures,\nSMART(s) are abstratc containers managing several DNS servers as a unique entity.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstDnsSMART = new solidserver.DnsSmart(\"myFirstDnsSMART\", {\n    allowQueries: [\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    allowRecursions: [\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    arch: \"multimaster\",\n    comment: \"My First DNS SMART Autmatically created\",\n    forward: \"first\",\n    forwarders: [\n        \"10.0.0.42\",\n        \"10.0.0.43\",\n    ],\n    recursion: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_dns_smart = solidserver.DnsSmart(\"myFirstDnsSMART\",\n    allow_queries=[\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    allow_recursions=[\n        \"172.16.0.0/12\",\n        \"10.0.0.0/8\",\n        \"192.168.0.0/24\",\n    ],\n    arch=\"multimaster\",\n    comment=\"My First DNS SMART Autmatically created\",\n    forward=\"first\",\n    forwarders=[\n        \"10.0.0.42\",\n        \"10.0.0.43\",\n    ],\n    recursion=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstDnsSMART = new Solidserver.DnsSmart(\"myFirstDnsSMART\", new()\n    {\n        AllowQueries = new[]\n        {\n            \"172.16.0.0/12\",\n            \"10.0.0.0/8\",\n            \"192.168.0.0/24\",\n        },\n        AllowRecursions = new[]\n        {\n            \"172.16.0.0/12\",\n            \"10.0.0.0/8\",\n            \"192.168.0.0/24\",\n        },\n        Arch = \"multimaster\",\n        Comment = \"My First DNS SMART Autmatically created\",\n        Forward = \"first\",\n        Forwarders = new[]\n        {\n            \"10.0.0.42\",\n            \"10.0.0.43\",\n        },\n        Recursion = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewDnsSmart(ctx, \"myFirstDnsSMART\", \u0026solidserver.DnsSmartArgs{\n\t\t\tAllowQueries: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"172.16.0.0/12\"),\n\t\t\t\tpulumi.String(\"10.0.0.0/8\"),\n\t\t\t\tpulumi.String(\"192.168.0.0/24\"),\n\t\t\t},\n\t\t\tAllowRecursions: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"172.16.0.0/12\"),\n\t\t\t\tpulumi.String(\"10.0.0.0/8\"),\n\t\t\t\tpulumi.String(\"192.168.0.0/24\"),\n\t\t\t},\n\t\t\tArch:    pulumi.String(\"multimaster\"),\n\t\t\tComment: pulumi.String(\"My First DNS SMART Autmatically created\"),\n\t\t\tForward: pulumi.String(\"first\"),\n\t\t\tForwarders: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"10.0.0.42\"),\n\t\t\t\tpulumi.String(\"10.0.0.43\"),\n\t\t\t},\n\t\t\tRecursion: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.DnsSmart;\nimport com.pulumi.solidserver.DnsSmartArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstDnsSMART = new DnsSmart(\"myFirstDnsSMART\", DnsSmartArgs.builder()        \n            .allowQueries(            \n                \"172.16.0.0/12\",\n                \"10.0.0.0/8\",\n                \"192.168.0.0/24\")\n            .allowRecursions(            \n                \"172.16.0.0/12\",\n                \"10.0.0.0/8\",\n                \"192.168.0.0/24\")\n            .arch(\"multimaster\")\n            .comment(\"My First DNS SMART Autmatically created\")\n            .forward(\"first\")\n            .forwarders(            \n                \"10.0.0.42\",\n                \"10.0.0.43\")\n            .recursion(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstDnsSMART:\n    type: solidserver:DnsSmart\n    properties:\n      allowQueries:\n        - 172.16.0.0/12\n        - 10.0.0.0/8\n        - 192.168.0.0/24\n      allowRecursions:\n        - 172.16.0.0/12\n        - 10.0.0.0/8\n        - 192.168.0.0/24\n      arch: multimaster\n      comment: My First DNS SMART Autmatically created\n      forward: first\n      forwarders:\n        - 10.0.0.42\n        - 10.0.0.43\n      recursion: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowRecursions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowTransfers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS erver for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "arch": {
                    "type": "string",
                    "description": "The DNS SMART architecture (Suported: multimaster, masterslave, single; Default: masterslave).\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS SMART.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the DNS SMART.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Custom information about the DNS SMART.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP address list of the forwarder(s) configured to configure on the DNS SMART.\n"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The name of the DNS SMART members.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS SMART to create.\n"
                },
                "recursion": {
                    "type": "boolean",
                    "description": "The recursion mode of the DNS SMART (Default: true).\n"
                }
            },
            "required": [
                "members",
                "name"
            ],
            "inputProperties": {
                "allowQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowRecursions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowTransfers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the DNS erver for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "arch": {
                    "type": "string",
                    "description": "The DNS SMART architecture (Suported: multimaster, masterslave, single; Default: masterslave).\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS SMART.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the DNS SMART.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Custom information about the DNS SMART.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP address list of the forwarder(s) configured to configure on the DNS SMART.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS SMART to create.\n",
                    "willReplaceOnChanges": true
                },
                "recursion": {
                    "type": "boolean",
                    "description": "The recursion mode of the DNS SMART (Default: true).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsSmart resources.\n",
                "properties": {
                    "allowQueries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "allowRecursions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "allowTransfers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS erver for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "arch": {
                        "type": "string",
                        "description": "The DNS SMART architecture (Suported: multimaster, masterslave, single; Default: masterslave).\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS SMART.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the DNS SMART.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Custom information about the DNS SMART.\n"
                    },
                    "forward": {
                        "type": "string",
                        "description": "The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).\n"
                    },
                    "forwarders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP address list of the forwarder(s) configured to configure on the DNS SMART.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name of the DNS SMART members.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS SMART to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "recursion": {
                        "type": "boolean",
                        "description": "The recursion mode of the DNS SMART (Default: true).\n"
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/dnsView:DnsView": {
            "description": "DNS View resource allows to create and configure DNS views.\nView(s) are virutal containers mostly used to implement DNS split horizon\nproviding different answers depending on matching criterias.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstDnsView = new solidserver.DnsView(\"myFirstDnsView\", {\n    dnsserver: solidserver_dns_server.myFirstDnsServer.name,\n    recursion: true,\n    forward: \"first\",\n    forwarders: [\n        \"8.8.8.8\",\n        \"8.8.4.4\",\n    ],\n    matchClients: [\n        \"172.16.0.0/12\",\n        \"192.168.0.0/24\",\n    ],\n}, {\n    dependsOn: [solidserver_dns_server.myFirstDnsServer],\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_dns_view = solidserver.DnsView(\"myFirstDnsView\",\n    dnsserver=solidserver_dns_server[\"myFirstDnsServer\"][\"name\"],\n    recursion=True,\n    forward=\"first\",\n    forwarders=[\n        \"8.8.8.8\",\n        \"8.8.4.4\",\n    ],\n    match_clients=[\n        \"172.16.0.0/12\",\n        \"192.168.0.0/24\",\n    ],\n    opts=pulumi.ResourceOptions(depends_on=[solidserver_dns_server[\"myFirstDnsServer\"]]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstDnsView = new Solidserver.DnsView(\"myFirstDnsView\", new()\n    {\n        Dnsserver = solidserver_dns_server.MyFirstDnsServer.Name,\n        Recursion = true,\n        Forward = \"first\",\n        Forwarders = new[]\n        {\n            \"8.8.8.8\",\n            \"8.8.4.4\",\n        },\n        MatchClients = new[]\n        {\n            \"172.16.0.0/12\",\n            \"192.168.0.0/24\",\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            solidserver_dns_server.MyFirstDnsServer,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewDnsView(ctx, \"myFirstDnsView\", \u0026solidserver.DnsViewArgs{\n\t\t\tDnsserver: pulumi.Any(solidserver_dns_server.MyFirstDnsServer.Name),\n\t\t\tRecursion: pulumi.Bool(true),\n\t\t\tForward:   pulumi.String(\"first\"),\n\t\t\tForwarders: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"8.8.8.8\"),\n\t\t\t\tpulumi.String(\"8.8.4.4\"),\n\t\t\t},\n\t\t\tMatchClients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"172.16.0.0/12\"),\n\t\t\t\tpulumi.String(\"192.168.0.0/24\"),\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tsolidserver_dns_server.MyFirstDnsServer,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.DnsView;\nimport com.pulumi.solidserver.DnsViewArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstDnsView = new DnsView(\"myFirstDnsView\", DnsViewArgs.builder()        \n            .dnsserver(solidserver_dns_server.myFirstDnsServer().name())\n            .recursion(true)\n            .forward(\"first\")\n            .forwarders(            \n                \"8.8.8.8\",\n                \"8.8.4.4\")\n            .matchClients(            \n                \"172.16.0.0/12\",\n                \"192.168.0.0/24\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(solidserver_dns_server.myFirstDnsServer())\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstDnsView:\n    type: solidserver:DnsView\n    properties:\n      dnsserver: ${solidserver_dns_server.myFirstDnsServer.name}\n      recursion: true\n      forward: first\n      forwarders:\n        - 8.8.8.8\n        - 8.8.4.4\n      matchClients:\n        - 172.16.0.0/12\n        - 192.168.0.0/24\n    options:\n      dependson:\n        - ${solidserver_dns_server.myFirstDnsServer}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "allowQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowRecursions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowTransfers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS view.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the view.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The name of DNS server or DNS SMART hosting the DNS view to create.\n"
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP address list of the forwarder(s) configured to configure on the DNS SMART.\n"
                },
                "matchClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "matchTos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS view to create.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The level of the DNS view, where 0 represents the highest level in the views hierarchy.\n"
                },
                "recursion": {
                    "type": "boolean",
                    "description": "The recursion mode of the DNS view (Default: true).\n"
                }
            },
            "required": [
                "dnsserver",
                "name",
                "order"
            ],
            "inputProperties": {
                "allowQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowRecursions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "allowTransfers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the DNS view.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the view.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The name of DNS server or DNS SMART hosting the DNS view to create.\n",
                    "willReplaceOnChanges": true
                },
                "forward": {
                    "type": "string",
                    "description": "The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).\n"
                },
                "forwarders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The IP address list of the forwarder(s) configured to configure on the DNS SMART.\n"
                },
                "matchClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "matchTos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the DNS view to create.\n",
                    "willReplaceOnChanges": true
                },
                "recursion": {
                    "type": "boolean",
                    "description": "The recursion mode of the DNS view (Default: true).\n"
                }
            },
            "requiredInputs": [
                "dnsserver"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsView resources.\n",
                "properties": {
                    "allowQueries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "allowRecursions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the view for recursion (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "allowTransfers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the view for zone transfert (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS view.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the view.\n"
                    },
                    "dnsserver": {
                        "type": "string",
                        "description": "The name of DNS server or DNS SMART hosting the DNS view to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "forward": {
                        "type": "string",
                        "description": "The forwarding mode of the DNS SMART (Supported: none, first, only; Default: none).\n"
                    },
                    "forwarders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP address list of the forwarder(s) configured to configure on the DNS SMART.\n"
                    },
                    "matchClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "matchTos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).  Use '!' to negate an entry.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS view to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "order": {
                        "type": "integer",
                        "description": "The level of the DNS view, where 0 represents the highest level in the views hierarchy.\n"
                    },
                    "recursion": {
                        "type": "boolean",
                        "description": "The recursion mode of the DNS view (Default: true).\n"
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/dnsZone:DnsZone": {
            "description": "DNS Zone resource allows to create and configure DNS zones.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstZone = new solidserver.DnsZone(\"myFirstZone\", {\n    createptr: false,\n    dnsserver: \"ns.priv\",\n    space: solidserver_ip_space.myFirstSpace.name,\n    type: \"master\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_zone = solidserver.DnsZone(\"myFirstZone\",\n    createptr=False,\n    dnsserver=\"ns.priv\",\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"],\n    type=\"master\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstZone = new Solidserver.DnsZone(\"myFirstZone\", new()\n    {\n        Createptr = false,\n        Dnsserver = \"ns.priv\",\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n        Type = \"master\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewDnsZone(ctx, \"myFirstZone\", \u0026solidserver.DnsZoneArgs{\n\t\t\tCreateptr: pulumi.Bool(false),\n\t\t\tDnsserver: pulumi.String(\"ns.priv\"),\n\t\t\tSpace:     pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t\tType:      pulumi.String(\"master\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.DnsZone;\nimport com.pulumi.solidserver.DnsZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstZone = new DnsZone(\"myFirstZone\", DnsZoneArgs.builder()        \n            .createptr(false)\n            .dnsserver(\"ns.priv\")\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .type(\"master\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstZone:\n    type: solidserver:DnsZone\n    properties:\n      createptr: false\n      dnsserver: ns.priv\n      space: ${solidserver_ip_space.myFirstSpace.name}\n      type: master\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "alsoNotifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP addresses (Format \\n\\n:\\n\\n) that will receive zone change notifications in addition to the NS listed in the SOA\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the zone.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the zone.\n"
                },
                "createptr": {
                    "type": "boolean",
                    "description": "Automaticaly create PTR records for the zone.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The name of DNS server or DNS SMART hosting the DNS zone to create.\n"
                },
                "dnsview": {
                    "type": "string",
                    "description": "The name of DNS view hosting the DNS zone to create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Domain Name to be hosted by the zone.\n"
                },
                "notify": {
                    "type": "string",
                    "description": "The expected notify behavior (Supported: empty (Inherited), Yes, No, Explicit; Default: empty (Inherited).\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of a space associated to the zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the zone to create (Supported: Master).\n"
                }
            },
            "required": [
                "dnsserver",
                "name"
            ],
            "inputProperties": {
                "alsoNotifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of IP addresses (Format \\n\\n:\\n\\n) that will receive zone change notifications in addition to the NS listed in the SOA\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the zone.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the zone.\n"
                },
                "createptr": {
                    "type": "boolean",
                    "description": "Automaticaly create PTR records for the zone.\n"
                },
                "dnsserver": {
                    "type": "string",
                    "description": "The name of DNS server or DNS SMART hosting the DNS zone to create.\n",
                    "willReplaceOnChanges": true
                },
                "dnsview": {
                    "type": "string",
                    "description": "The name of DNS view hosting the DNS zone to create.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The Domain Name to be hosted by the zone.\n",
                    "willReplaceOnChanges": true
                },
                "notify": {
                    "type": "string",
                    "description": "The expected notify behavior (Supported: empty (Inherited), Yes, No, Explicit; Default: empty (Inherited).\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of a space associated to the zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the zone to create (Supported: Master).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dnsserver"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DnsZone resources.\n",
                "properties": {
                    "alsoNotifies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of IP addresses (Format \\n\\n:\\n\\n) that will receive zone change notifications in addition to the NS listed in the SOA\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the zone.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the zone.\n"
                    },
                    "createptr": {
                        "type": "boolean",
                        "description": "Automaticaly create PTR records for the zone.\n"
                    },
                    "dnsserver": {
                        "type": "string",
                        "description": "The name of DNS server or DNS SMART hosting the DNS zone to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "dnsview": {
                        "type": "string",
                        "description": "The name of DNS view hosting the DNS zone to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The Domain Name to be hosted by the zone.\n",
                        "willReplaceOnChanges": true
                    },
                    "notify": {
                        "type": "string",
                        "description": "The expected notify behavior (Supported: empty (Inherited), Yes, No, Explicit; Default: empty (Inherited).\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of a space associated to the zone.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the zone to create (Supported: Master).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ip6Address:Ip6Address": {
            "description": "IPv6 address resource allows to create and manage reserved addresses for specific devices, apps or users.\nMore importantly it allows to store useful meta-data for both tracking and automation purposes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Ip6Address;\nimport com.pulumi.solidserver.Ip6AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIP6Address = new Ip6Address(\"myFirstIP6Address\", Ip6AddressArgs.builder()        \n            .lifecycle(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .subnet(solidserver_ip6_subnet.myFirstIP6Subnet().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # When using IPv6-MAC association, consider using the lifecycle property on the associated IPv6 address for statefull management of the MAC address.\n  myFirstIP6Address:\n    type: solidserver:Ip6Address\n    properties:\n      lifecycle:\n        ignoreChanges:\n          - mac\n      space: ${solidserver_ip_space.myFirstSpace.name}\n      subnet: ${solidserver_ip6_subnet.myFirstIP6Subnet.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The provisionned IPv6 address.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the IPv6 address.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IPv6 address.\n"
                },
                "device": {
                    "type": "string",
                    "description": "Device Name to associate with the IPv6 address (Require a 'Device Manager' license).\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address of the IPv6 address to create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name or FQDN of the IPv6 address to create.\n"
                },
                "pool": {
                    "type": "string",
                    "description": "The name of the pool into which creating the IPv6 address.\n"
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested IPv6 address.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IPv6 address.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the subnet into which creating the IPv6 address.\n"
                }
            },
            "required": [
                "address",
                "name",
                "space",
                "subnet"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IPv6 address.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IPv6 address.\n"
                },
                "device": {
                    "type": "string",
                    "description": "Device Name to associate with the IPv6 address (Require a 'Device Manager' license).\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address of the IPv6 address to create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name or FQDN of the IPv6 address to create.\n"
                },
                "pool": {
                    "type": "string",
                    "description": "The name of the pool into which creating the IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the subnet into which creating the IPv6 address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "space",
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ip6Address resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The provisionned IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IPv6 address.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the IPv6 address.\n"
                    },
                    "device": {
                        "type": "string",
                        "description": "Device Name to associate with the IPv6 address (Require a 'Device Manager' license).\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC Address of the IPv6 address to create.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name or FQDN of the IPv6 address to create.\n"
                    },
                    "pool": {
                        "type": "string",
                        "description": "The name of the pool into which creating the IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "requestIp": {
                        "type": "string",
                        "description": "The optionally requested IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which creating the IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The name of the subnet into which creating the IPv6 address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ip6Alias:Ip6Alias": {
            "description": "IPv6 aliases resource allows to create and manage multiple names for a single IP address.\nThey are pretty useful to keep IPAM in sync with the DNS handling CNAME(s) from a single repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIP6Alias = new solidserver.Ip6Alias(\"myFirstIP6Alias\", {\n    address: solidserver_ip6_address.myFirstIP6Address.address,\n    space: solidserver_ip_space.myFirstSpace.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip6_alias = solidserver.Ip6Alias(\"myFirstIP6Alias\",\n    address=solidserver_ip6_address[\"myFirstIP6Address\"][\"address\"],\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIP6Alias = new Solidserver.Ip6Alias(\"myFirstIP6Alias\", new()\n    {\n        Address = solidserver_ip6_address.MyFirstIP6Address.Address,\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewIp6Alias(ctx, \"myFirstIP6Alias\", \u0026solidserver.Ip6AliasArgs{\n\t\t\tAddress: pulumi.Any(solidserver_ip6_address.MyFirstIP6Address.Address),\n\t\t\tSpace:   pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Ip6Alias;\nimport com.pulumi.solidserver.Ip6AliasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIP6Alias = new Ip6Alias(\"myFirstIP6Alias\", Ip6AliasArgs.builder()        \n            .address(solidserver_ip6_address.myFirstIP6Address().address())\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstIP6Alias:\n    type: solidserver:Ip6Alias\n    properties:\n      address: ${solidserver_ip6_address.myFirstIP6Address.address}\n      space: ${solidserver_ip_space.myFirstSpace.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address for which the alias will be associated to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The FQDN of the IPv6 address alias to create.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space to which the address belong to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Alias to create (Supported: A, CNAME; Default: CNAME).\n"
                }
            },
            "required": [
                "address",
                "name",
                "space"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address for which the alias will be associated to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The FQDN of the IPv6 address alias to create.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space to which the address belong to.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Alias to create (Supported: A, CNAME; Default: CNAME).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "address",
                "space"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ip6Alias resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv6 address for which the alias will be associated to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The FQDN of the IPv6 address alias to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space to which the address belong to.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Alias to create (Supported: A, CNAME; Default: CNAME).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ip6Mac:Ip6Mac": {
            "description": "IPv6 MAC resource allows to map an IP address with a MAC address.\nIt does not reflect any object within SOLIDserver, it is useful when provisioning\nIP addresses for VM(s) for which the MAC address is unknown until deployed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIP6MacAassoc = new solidserver.Ip6Mac(\"myFirstIP6MacAassoc\", {\n    address: solidserver_ip6_address.myFirstIP6Address.address,\n    mac: \"06:16:26:36:46:56\",\n    space: solidserver_ip_space.myFirstSpace.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip6_mac_aassoc = solidserver.Ip6Mac(\"myFirstIP6MacAassoc\",\n    address=solidserver_ip6_address[\"myFirstIP6Address\"][\"address\"],\n    mac=\"06:16:26:36:46:56\",\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIP6MacAassoc = new Solidserver.Ip6Mac(\"myFirstIP6MacAassoc\", new()\n    {\n        Address = solidserver_ip6_address.MyFirstIP6Address.Address,\n        Mac = \"06:16:26:36:46:56\",\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewIp6Mac(ctx, \"myFirstIP6MacAassoc\", \u0026solidserver.Ip6MacArgs{\n\t\t\tAddress: pulumi.Any(solidserver_ip6_address.MyFirstIP6Address.Address),\n\t\t\tMac:     pulumi.String(\"06:16:26:36:46:56\"),\n\t\t\tSpace:   pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Ip6Mac;\nimport com.pulumi.solidserver.Ip6MacArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIP6MacAassoc = new Ip6Mac(\"myFirstIP6MacAassoc\", Ip6MacArgs.builder()        \n            .address(solidserver_ip6_address.myFirstIP6Address().address())\n            .mac(\"06:16:26:36:46:56\")\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstIP6MacAassoc:\n    type: solidserver:Ip6Mac\n    properties:\n      address: ${solidserver_ip6_address.myFirstIP6Address.address}\n      mac: 06:16:26:36:46:56\n      space: ${solidserver_ip_space.myFirstSpace.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address to map with the MAC address.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address o map with the IPv6 address.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which mapping the IP and the MAC address.\n"
                }
            },
            "required": [
                "address",
                "mac",
                "space"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IPv6 address to map with the MAC address.\n",
                    "willReplaceOnChanges": true
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address o map with the IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which mapping the IP and the MAC address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "address",
                "mac",
                "space"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ip6Mac resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv6 address to map with the MAC address.\n",
                        "willReplaceOnChanges": true
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC Address o map with the IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which mapping the IP and the MAC address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ip6Pool:Ip6Pool": {
            "description": "IPv6 Pool resource allows to create and manage ranges of IPv6 addresses for specific usage such as: provisioning,\nplanning or migrations. IPv6 Pools can also be used to delegate one or several ranges of IPv6 addresses to groups\nof administrators or to restrict access to some users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Ip6Pool;\nimport com.pulumi.solidserver.Ip6PoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIPPool = new Ip6Pool(\"myFirstIPPool\", Ip6PoolArgs.builder()        \n            .size(2)\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .start(solidserver_ip6_subnet.mySecondIP6Subnet().address())\n            .subnet(solidserver_ip6_subnet.mySecondIP6Subnet().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstIPPool:\n    type: solidserver:Ip6Pool\n    properties:\n      size: 2\n      space: ${solidserver_ip_space.myFirstSpace.name}\n      start: ${solidserver_ip6_subnet.mySecondIP6Subnet.address}\n      subnet: ${solidserver_ip6_subnet.mySecondIP6Subnet.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IPv6 pool.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IPv6 pool.\n"
                },
                "dhcpRange": {
                    "type": "boolean",
                    "description": "Specify wether to create the equivalent DHCP v6 range, or not (Default: false).\n"
                },
                "end": {
                    "type": "string",
                    "description": "The IPv6 pool's higher IPv6 address.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IPv6 pool to create.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix of the parent subnet of the pool.\n"
                },
                "prefixSize": {
                    "type": "integer",
                    "description": "The size prefix of the parent subnet of the pool.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IPv6 pool.\n"
                },
                "start": {
                    "type": "string",
                    "description": "The IPv6 pool's lower IPv6 address.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the parent IP subnet into which creating the IPv6 pool.\n"
                }
            },
            "required": [
                "end",
                "name",
                "prefix",
                "prefixSize",
                "space",
                "start",
                "subnet"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IPv6 pool.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IPv6 pool.\n"
                },
                "dhcpRange": {
                    "type": "boolean",
                    "description": "Specify wether to create the equivalent DHCP v6 range, or not (Default: false).\n"
                },
                "end": {
                    "type": "string",
                    "description": "The IPv6 pool's higher IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IPv6 pool to create.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IPv6 pool.\n",
                    "willReplaceOnChanges": true
                },
                "start": {
                    "type": "string",
                    "description": "The IPv6 pool's lower IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the parent IP subnet into which creating the IPv6 pool.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "end",
                "space",
                "start",
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ip6Pool resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IPv6 pool.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the IPv6 pool.\n"
                    },
                    "dhcpRange": {
                        "type": "boolean",
                        "description": "Specify wether to create the equivalent DHCP v6 range, or not (Default: false).\n"
                    },
                    "end": {
                        "type": "string",
                        "description": "The IPv6 pool's higher IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IPv6 pool to create.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The prefix of the parent subnet of the pool.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The size prefix of the parent subnet of the pool.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which creating the IPv6 pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "start": {
                        "type": "string",
                        "description": "The IPv6 pool's lower IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The name of the parent IP subnet into which creating the IPv6 pool.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ip6Subnet:Ip6Subnet": {
            "description": "IPv6 Subnet resource allows to create and manage IPAM networks that are key to organize the IP space\nSubnet can be blocks or subnets. Blocks reflect the assigned IP ranges (RFC1918 or public prefixes).\nSubnets reflect the internal sub-division of your network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIP6Block = new solidserver.Ip6Subnet(\"myFirstIP6Block\", {\n    prefixSize: 48,\n    requestIp: \"2a00:2381:126d:0:0:0:0:0\",\n    space: solidserver_ip_space.myFirstSpace.name,\n    terminal: false,\n});\nconst myFirstIP6Subnet = new solidserver.Ip6Subnet(\"myFirstIP6Subnet\", {\n    block: myFirstIP6Block.name,\n    \"class\": \"VIRTUAL\",\n    classParameters: {\n        vnid: \"12666\",\n    },\n    gatewayOffset: 1,\n    prefixSize: 64,\n    space: solidserver_ip_space.myFirstSpace.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip6_block = solidserver.Ip6Subnet(\"myFirstIP6Block\",\n    prefix_size=48,\n    request_ip=\"2a00:2381:126d:0:0:0:0:0\",\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"],\n    terminal=False)\nmy_first_ip6_subnet = solidserver.Ip6Subnet(\"myFirstIP6Subnet\",\n    block=my_first_ip6_block.name,\n    class_=\"VIRTUAL\",\n    class_parameters={\n        \"vnid\": \"12666\",\n    },\n    gateway_offset=1,\n    prefix_size=64,\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIP6Block = new Solidserver.Ip6Subnet(\"myFirstIP6Block\", new()\n    {\n        PrefixSize = 48,\n        RequestIp = \"2a00:2381:126d:0:0:0:0:0\",\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n        Terminal = false,\n    });\n\n    var myFirstIP6Subnet = new Solidserver.Ip6Subnet(\"myFirstIP6Subnet\", new()\n    {\n        Block = myFirstIP6Block.Name,\n        Class = \"VIRTUAL\",\n        ClassParameters = \n        {\n            { \"vnid\", \"12666\" },\n        },\n        GatewayOffset = 1,\n        PrefixSize = 64,\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyFirstIP6Block, err := solidserver.NewIp6Subnet(ctx, \"myFirstIP6Block\", \u0026solidserver.Ip6SubnetArgs{\n\t\t\tPrefixSize: pulumi.Int(48),\n\t\t\tRequestIp:  pulumi.String(\"2a00:2381:126d:0:0:0:0:0\"),\n\t\t\tSpace:      pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t\tTerminal:   pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = solidserver.NewIp6Subnet(ctx, \"myFirstIP6Subnet\", \u0026solidserver.Ip6SubnetArgs{\n\t\t\tBlock: myFirstIP6Block.Name,\n\t\t\tClass: pulumi.String(\"VIRTUAL\"),\n\t\t\tClassParameters: pulumi.StringMap{\n\t\t\t\t\"vnid\": pulumi.String(\"12666\"),\n\t\t\t},\n\t\t\tGatewayOffset: pulumi.Int(1),\n\t\t\tPrefixSize:    pulumi.Int(64),\n\t\t\tSpace:         pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Ip6Subnet;\nimport com.pulumi.solidserver.Ip6SubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIP6Block = new Ip6Subnet(\"myFirstIP6Block\", Ip6SubnetArgs.builder()        \n            .prefixSize(48)\n            .requestIp(\"2a00:2381:126d:0:0:0:0:0\")\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .terminal(false)\n            .build());\n\n        var myFirstIP6Subnet = new Ip6Subnet(\"myFirstIP6Subnet\", Ip6SubnetArgs.builder()        \n            .block(myFirstIP6Block.name())\n            .class_(\"VIRTUAL\")\n            .classParameters(Map.of(\"vnid\", \"12666\"))\n            .gatewayOffset(1)\n            .prefixSize(64)\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstIP6Block:\n    type: solidserver:Ip6Subnet\n    properties:\n      prefixSize: 48\n      requestIp: 2a00:2381:126d:0:0:0:0:0\n      space: ${solidserver_ip_space.myFirstSpace.name}\n      terminal: false\n  myFirstIP6Subnet:\n    type: solidserver:Ip6Subnet\n    properties:\n      block: ${myFirstIP6Block.name}\n      class: VIRTUAL\n      classParameters:\n        vnid: '12666'\n      gatewayOffset: 1\n      prefixSize: 64\n      space: ${solidserver_ip_space.myFirstSpace.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The provisionned IPv6 network address.\n"
                },
                "block": {
                    "type": "string",
                    "description": "The name of the block intyo which creating the IPv6 subnet.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the IPv6 subnet.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IPv6 subnet.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The subnet's computed gateway.\n"
                },
                "gatewayOffset": {
                    "type": "integer",
                    "description": "Offset for creating the gateway. Default is 0 (No gateway).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IPv6 subnet to create.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The provisionned IPv6 prefix.\n"
                },
                "prefixSize": {
                    "type": "integer",
                    "description": "The expected IPv6 subnet's prefix length (ex: 24 for a '/24').\n"
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested subnet IPv6 address.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IPv6 subnet.\n"
                },
                "terminal": {
                    "type": "boolean",
                    "description": "The terminal property of the IPv6 subnet.\n"
                }
            },
            "required": [
                "address",
                "gateway",
                "name",
                "prefix",
                "prefixSize",
                "space"
            ],
            "inputProperties": {
                "block": {
                    "type": "string",
                    "description": "The name of the block intyo which creating the IPv6 subnet.\n",
                    "willReplaceOnChanges": true
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the IPv6 subnet.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IPv6 subnet.\n"
                },
                "gatewayOffset": {
                    "type": "integer",
                    "description": "Offset for creating the gateway. Default is 0 (No gateway).\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IPv6 subnet to create.\n"
                },
                "prefixSize": {
                    "type": "integer",
                    "description": "The expected IPv6 subnet's prefix length (ex: 24 for a '/24').\n",
                    "willReplaceOnChanges": true
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested subnet IPv6 address.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IPv6 subnet.\n",
                    "willReplaceOnChanges": true
                },
                "terminal": {
                    "type": "boolean",
                    "description": "The terminal property of the IPv6 subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "prefixSize",
                "space"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Ip6Subnet resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The provisionned IPv6 network address.\n",
                        "willReplaceOnChanges": true
                    },
                    "block": {
                        "type": "string",
                        "description": "The name of the block intyo which creating the IPv6 subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IPv6 subnet.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the IPv6 subnet.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The subnet's computed gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "gatewayOffset": {
                        "type": "integer",
                        "description": "Offset for creating the gateway. Default is 0 (No gateway).\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IPv6 subnet to create.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The provisionned IPv6 prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The expected IPv6 subnet's prefix length (ex: 24 for a '/24').\n",
                        "willReplaceOnChanges": true
                    },
                    "requestIp": {
                        "type": "string",
                        "description": "The optionally requested subnet IPv6 address.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which creating the IPv6 subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "terminal": {
                        "type": "boolean",
                        "description": "The terminal property of the IPv6 subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ipAddress:IpAddress": {
            "description": "IP address resource allows to create and manage reserved addresses for specific devices, apps or users.\nMore importantly it allows to store useful meta-data for both tracking and automation purposes.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.IpAddress;\nimport com.pulumi.solidserver.IpAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIPAddress = new IpAddress(\"myFirstIPAddress\", IpAddressArgs.builder()        \n            .lifecycle(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .subnet(solidserver_ip_subnet.myFirstIPSubnet().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # When using IP-MAC association, consider using the lifecycle property on the associated IP address for statefull management of the MAC address.\n  myFirstIPAddress:\n    type: solidserver:IpAddress\n    properties:\n      lifecycle:\n        ignoreChanges:\n          - mac\n      space: ${solidserver_ip_space.myFirstSpace.name}\n      subnet: ${solidserver_ip_subnet.myFirstIPSubnet.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The provisionned IP address.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP address.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IP address.\n"
                },
                "device": {
                    "type": "string",
                    "description": "Device Name to associate with the IP address (Require a 'Device Manager' license).\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address of the IP address to create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name or FQDN of the IP address to create.\n"
                },
                "pool": {
                    "type": "string",
                    "description": "The name of the pool into which creating the IP address.\n"
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested IP address.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IP address.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the subnet into which creating the IP address.\n"
                }
            },
            "required": [
                "address",
                "name",
                "space",
                "subnet"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP address.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IP address.\n"
                },
                "device": {
                    "type": "string",
                    "description": "Device Name to associate with the IP address (Require a 'Device Manager' license).\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address of the IP address to create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The short name or FQDN of the IP address to create.\n"
                },
                "pool": {
                    "type": "string",
                    "description": "The name of the pool into which creating the IP address.\n",
                    "willReplaceOnChanges": true
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested IP address.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IP address.\n",
                    "willReplaceOnChanges": true
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the subnet into which creating the IP address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "space",
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpAddress resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The provisionned IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP address.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the IP address.\n"
                    },
                    "device": {
                        "type": "string",
                        "description": "Device Name to associate with the IP address (Require a 'Device Manager' license).\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC Address of the IP address to create.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name or FQDN of the IP address to create.\n"
                    },
                    "pool": {
                        "type": "string",
                        "description": "The name of the pool into which creating the IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "requestIp": {
                        "type": "string",
                        "description": "The optionally requested IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which creating the IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The name of the subnet into which creating the IP address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ipAlias:IpAlias": {
            "description": "IP aliases resource allows to create and manage multiple names for a single IP address.\nThey are pretty useful to keep IPAM in sync with the DNS handling CNAME(s) from a single repository.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPAlias = new solidserver.IpAlias(\"myFirstIPAlias\", {\n    address: solidserver_ip_address.myFirstIPAddress.address,\n    space: solidserver_ip_space.myFirstSpace.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip_alias = solidserver.IpAlias(\"myFirstIPAlias\",\n    address=solidserver_ip_address[\"myFirstIPAddress\"][\"address\"],\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPAlias = new Solidserver.IpAlias(\"myFirstIPAlias\", new()\n    {\n        Address = solidserver_ip_address.MyFirstIPAddress.Address,\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewIpAlias(ctx, \"myFirstIPAlias\", \u0026solidserver.IpAliasArgs{\n\t\t\tAddress: pulumi.Any(solidserver_ip_address.MyFirstIPAddress.Address),\n\t\t\tSpace:   pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.IpAlias;\nimport com.pulumi.solidserver.IpAliasArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIPAlias = new IpAlias(\"myFirstIPAlias\", IpAliasArgs.builder()        \n            .address(solidserver_ip_address.myFirstIPAddress().address())\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstIPAlias:\n    type: solidserver:IpAlias\n    properties:\n      address: ${solidserver_ip_address.myFirstIPAddress.address}\n      space: ${solidserver_ip_space.myFirstSpace.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address for which the alias will be associated to.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The FQDN of the IP address alias to create.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space to which the address belong to.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Alias to create (Supported: A, CNAME; Default: CNAME).\n"
                }
            },
            "required": [
                "address",
                "name",
                "space"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IP address for which the alias will be associated to.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The FQDN of the IP address alias to create.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space to which the address belong to.\n",
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "The type of the Alias to create (Supported: A, CNAME; Default: CNAME).\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "address",
                "space"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpAlias resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address for which the alias will be associated to.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The FQDN of the IP address alias to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space to which the address belong to.\n",
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the Alias to create (Supported: A, CNAME; Default: CNAME).\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ipMac:IpMac": {
            "description": "IP MAC resource allows to map an IP address with a MAC address.\nIt does not reflect any object within SOLIDserver, it is useful when provisioning\nIP addresses for VM(s) for which the MAC address is unknown until deployed.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPMacAassoc = new solidserver.IpMac(\"myFirstIPMacAassoc\", {\n    address: solidserver_ip_address.myFirstIPAddress.address,\n    mac: \"00:11:22:33:44:55\",\n    space: solidserver_ip_space.myFirstSpace.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip_mac_aassoc = solidserver.IpMac(\"myFirstIPMacAassoc\",\n    address=solidserver_ip_address[\"myFirstIPAddress\"][\"address\"],\n    mac=\"00:11:22:33:44:55\",\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPMacAassoc = new Solidserver.IpMac(\"myFirstIPMacAassoc\", new()\n    {\n        Address = solidserver_ip_address.MyFirstIPAddress.Address,\n        Mac = \"00:11:22:33:44:55\",\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewIpMac(ctx, \"myFirstIPMacAassoc\", \u0026solidserver.IpMacArgs{\n\t\t\tAddress: pulumi.Any(solidserver_ip_address.MyFirstIPAddress.Address),\n\t\t\tMac:     pulumi.String(\"00:11:22:33:44:55\"),\n\t\t\tSpace:   pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.IpMac;\nimport com.pulumi.solidserver.IpMacArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIPMacAassoc = new IpMac(\"myFirstIPMacAassoc\", IpMacArgs.builder()        \n            .address(solidserver_ip_address.myFirstIPAddress().address())\n            .mac(\"00:11:22:33:44:55\")\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstIPMacAassoc:\n    type: solidserver:IpMac\n    properties:\n      address: ${solidserver_ip_address.myFirstIPAddress.address}\n      mac: 00:11:22:33:44:55\n      space: ${solidserver_ip_space.myFirstSpace.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The IP address to map with the MAC address.\n"
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address o map with the IP address.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which mapping the IP and the MAC address.\n"
                }
            },
            "required": [
                "address",
                "mac",
                "space"
            ],
            "inputProperties": {
                "address": {
                    "type": "string",
                    "description": "The IP address to map with the MAC address.\n",
                    "willReplaceOnChanges": true
                },
                "mac": {
                    "type": "string",
                    "description": "The MAC Address o map with the IP address.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which mapping the IP and the MAC address.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "address",
                "mac",
                "space"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpMac resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address to map with the MAC address.\n",
                        "willReplaceOnChanges": true
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC Address o map with the IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which mapping the IP and the MAC address.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ipPool:IpPool": {
            "description": "IP Pool resource allows to create and manage ranges of IP addresses for specific usage such as: provisioning,\nplanning or migrations. IP Pools can also be used to delegate one or several ranges of IPv6 addresses to groups\nof administrators or to restrict access to some users.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPPool = new solidserver.IpPool(\"myFirstIPPool\", {\n    size: 2,\n    space: solidserver_ip_space.myFirstSpace.name,\n    start: solidserver_ip_subnet.mySecondIPSubnet.address,\n    subnet: solidserver_ip_subnet.mySecondIPSubnet.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip_pool = solidserver.IpPool(\"myFirstIPPool\",\n    size=2,\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"],\n    start=solidserver_ip_subnet[\"mySecondIPSubnet\"][\"address\"],\n    subnet=solidserver_ip_subnet[\"mySecondIPSubnet\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPPool = new Solidserver.IpPool(\"myFirstIPPool\", new()\n    {\n        Size = 2,\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n        Start = solidserver_ip_subnet.MySecondIPSubnet.Address,\n        Subnet = solidserver_ip_subnet.MySecondIPSubnet.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewIpPool(ctx, \"myFirstIPPool\", \u0026solidserver.IpPoolArgs{\n\t\t\tSize:   pulumi.Int(2),\n\t\t\tSpace:  pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t\tStart:  pulumi.Any(solidserver_ip_subnet.MySecondIPSubnet.Address),\n\t\t\tSubnet: pulumi.Any(solidserver_ip_subnet.MySecondIPSubnet.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.IpPool;\nimport com.pulumi.solidserver.IpPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstIPPool = new IpPool(\"myFirstIPPool\", IpPoolArgs.builder()        \n            .size(2)\n            .space(solidserver_ip_space.myFirstSpace().name())\n            .start(solidserver_ip_subnet.mySecondIPSubnet().address())\n            .subnet(solidserver_ip_subnet.mySecondIPSubnet().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstIPPool:\n    type: solidserver:IpPool\n    properties:\n      size: 2\n      space: ${solidserver_ip_space.myFirstSpace.name}\n      start: ${solidserver_ip_subnet.mySecondIPSubnet.address}\n      subnet: ${solidserver_ip_subnet.mySecondIPSubnet.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP pool.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IP pool.\n"
                },
                "dhcpRange": {
                    "type": "boolean",
                    "description": "Specify wether to create the equivalent DHCP range, or not (Default: false).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP pool to create.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix of the parent subnet of the pool.\n"
                },
                "prefixSize": {
                    "type": "integer",
                    "description": "The size prefix of the parent subnet of the pool.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the IP pool to create.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IP pool.\n"
                },
                "start": {
                    "type": "string",
                    "description": "The IP pool lower IP address.\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the parent IP subnet into which creating the IP pool.\n"
                }
            },
            "required": [
                "name",
                "prefix",
                "prefixSize",
                "size",
                "space",
                "start",
                "subnet"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP pool.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IP pool.\n"
                },
                "dhcpRange": {
                    "type": "boolean",
                    "description": "Specify wether to create the equivalent DHCP range, or not (Default: false).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP pool to create.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the IP pool to create.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the IP pool.\n",
                    "willReplaceOnChanges": true
                },
                "start": {
                    "type": "string",
                    "description": "The IP pool lower IP address.\n",
                    "willReplaceOnChanges": true
                },
                "subnet": {
                    "type": "string",
                    "description": "The name of the parent IP subnet into which creating the IP pool.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "size",
                "space",
                "start",
                "subnet"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpPool resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP pool.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the IP pool.\n"
                    },
                    "dhcpRange": {
                        "type": "boolean",
                        "description": "Specify wether to create the equivalent DHCP range, or not (Default: false).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP pool to create.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The prefix of the parent subnet of the pool.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The size prefix of the parent subnet of the pool.\n"
                    },
                    "size": {
                        "type": "integer",
                        "description": "The size of the IP pool to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which creating the IP pool.\n",
                        "willReplaceOnChanges": true
                    },
                    "start": {
                        "type": "string",
                        "description": "The IP pool lower IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The name of the parent IP subnet into which creating the IP pool.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ipSpace:IpSpace": {
            "description": "Space resource allows to create and manage the highest level objets in the SOLIDserver's IPAM module\norganization, the entry point of any IPv4 or IPv6 addressing plan. Spaces allow to manage unique ranges\nof IP addresses.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstSpace = new solidserver.IpSpace(\"myFirstSpace\", {\n    \"class\": \"CUSTOM_SPACE\",\n    classParameters: {\n        LOCATION: \"PARIS\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_space = solidserver.IpSpace(\"myFirstSpace\",\n    class_=\"CUSTOM_SPACE\",\n    class_parameters={\n        \"LOCATION\": \"PARIS\",\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstSpace = new Solidserver.IpSpace(\"myFirstSpace\", new()\n    {\n        Class = \"CUSTOM_SPACE\",\n        ClassParameters = \n        {\n            { \"LOCATION\", \"PARIS\" },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewIpSpace(ctx, \"myFirstSpace\", \u0026solidserver.IpSpaceArgs{\n\t\t\tClass: pulumi.String(\"CUSTOM_SPACE\"),\n\t\t\tClassParameters: pulumi.StringMap{\n\t\t\t\t\"LOCATION\": pulumi.String(\"PARIS\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.IpSpace;\nimport com.pulumi.solidserver.IpSpaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstSpace = new IpSpace(\"myFirstSpace\", IpSpaceArgs.builder()        \n            .class_(\"CUSTOM_SPACE\")\n            .classParameters(Map.of(\"LOCATION\", \"PARIS\"))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstSpace:\n    type: solidserver:IpSpace\n    properties:\n      class: CUSTOM_SPACE\n      classParameters:\n        LOCATION: PARIS\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP space.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to IP space.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP space to create.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP space.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to IP space.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP space to create.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpSpace resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP space.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to IP space.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP space to create.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/ipSubnet:IpSubnet": {
            "description": "IP Subnet resource allows to create and manage IPAM networks that are key to organize the IP space\nSubnet can be blocks or subnets. Blocks reflect the assigned IP ranges (RFC1918 or public prefixes).\nSubnets reflect the internal sub-division of your network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPBlock = new solidserver.IpSubnet(\"myFirstIPBlock\", {\n    prefixSize: 8,\n    requestIp: \"10.0.0.0\",\n    space: solidserver_ip_space.myFirstSpace.name,\n    terminal: false,\n});\nconst myFirstIPSubnet = new solidserver.IpSubnet(\"myFirstIPSubnet\", {\n    block: myFirstIPBlock.name,\n    \"class\": \"VIRTUAL\",\n    classParameters: {\n        vnid: \"12666\",\n    },\n    gatewayOffset: -1,\n    prefixSize: 24,\n    space: solidserver_ip_space.myFirstSpace.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip_block = solidserver.IpSubnet(\"myFirstIPBlock\",\n    prefix_size=8,\n    request_ip=\"10.0.0.0\",\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"],\n    terminal=False)\nmy_first_ip_subnet = solidserver.IpSubnet(\"myFirstIPSubnet\",\n    block=my_first_ip_block.name,\n    class_=\"VIRTUAL\",\n    class_parameters={\n        \"vnid\": \"12666\",\n    },\n    gateway_offset=-1,\n    prefix_size=24,\n    space=solidserver_ip_space[\"myFirstSpace\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPBlock = new Solidserver.IpSubnet(\"myFirstIPBlock\", new()\n    {\n        PrefixSize = 8,\n        RequestIp = \"10.0.0.0\",\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n        Terminal = false,\n    });\n\n    var myFirstIPSubnet = new Solidserver.IpSubnet(\"myFirstIPSubnet\", new()\n    {\n        Block = myFirstIPBlock.Name,\n        Class = \"VIRTUAL\",\n        ClassParameters = \n        {\n            { \"vnid\", \"12666\" },\n        },\n        GatewayOffset = -1,\n        PrefixSize = 24,\n        Space = solidserver_ip_space.MyFirstSpace.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyFirstIPBlock, err := solidserver.NewIpSubnet(ctx, \"myFirstIPBlock\", \u0026solidserver.IpSubnetArgs{\n\t\t\tPrefixSize: pulumi.Int(8),\n\t\t\tRequestIp:  pulumi.String(\"10.0.0.0\"),\n\t\t\tSpace:      pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t\tTerminal:   pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = solidserver.NewIpSubnet(ctx, \"myFirstIPSubnet\", \u0026solidserver.IpSubnetArgs{\n\t\t\tBlock: myFirstIPBlock.Name,\n\t\t\tClass: pulumi.String(\"VIRTUAL\"),\n\t\t\tClassParameters: pulumi.StringMap{\n\t\t\t\t\"vnid\": pulumi.String(\"12666\"),\n\t\t\t},\n\t\t\tGatewayOffset: -1,\n\t\t\tPrefixSize:    pulumi.Int(24),\n\t\t\tSpace:         pulumi.Any(solidserver_ip_space.MyFirstSpace.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The provisionned IP network address.\n"
                },
                "block": {
                    "type": "string",
                    "description": "The name of the parent IP block/subnet into which creating the IP subnet.\n"
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP subnet.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IP subnet.\n"
                },
                "gateway": {
                    "type": "string",
                    "description": "The subnet's computed gateway.\n"
                },
                "gatewayOffset": {
                    "type": "integer",
                    "description": "Offset for creating the gateway. Default is 0 (No gateway).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP subnet to create.\n"
                },
                "netmask": {
                    "type": "string",
                    "description": "The provisionned IP address netmask.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The provisionned IP prefix.\n"
                },
                "prefixSize": {
                    "type": "integer",
                    "description": "The expected IP subnet's prefix length (ex: 24 for a '/24').\n"
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested subnet IP address.\n"
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the subnet.\n"
                },
                "terminal": {
                    "type": "boolean",
                    "description": "The terminal property of the IP subnet.\n"
                }
            },
            "required": [
                "address",
                "gateway",
                "name",
                "netmask",
                "prefix",
                "prefixSize",
                "space"
            ],
            "inputProperties": {
                "block": {
                    "type": "string",
                    "description": "The name of the parent IP block/subnet into which creating the IP subnet.\n",
                    "willReplaceOnChanges": true
                },
                "class": {
                    "type": "string",
                    "description": "The class associated to the IP subnet.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the IP subnet.\n"
                },
                "gatewayOffset": {
                    "type": "integer",
                    "description": "Offset for creating the gateway. Default is 0 (No gateway).\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the IP subnet to create.\n"
                },
                "prefixSize": {
                    "type": "integer",
                    "description": "The expected IP subnet's prefix length (ex: 24 for a '/24').\n",
                    "willReplaceOnChanges": true
                },
                "requestIp": {
                    "type": "string",
                    "description": "The optionally requested subnet IP address.\n",
                    "willReplaceOnChanges": true
                },
                "space": {
                    "type": "string",
                    "description": "The name of the space into which creating the subnet.\n",
                    "willReplaceOnChanges": true
                },
                "terminal": {
                    "type": "boolean",
                    "description": "The terminal property of the IP subnet.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "prefixSize",
                "space"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpSubnet resources.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The provisionned IP network address.\n",
                        "willReplaceOnChanges": true
                    },
                    "block": {
                        "type": "string",
                        "description": "The name of the parent IP block/subnet into which creating the IP subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP subnet.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the IP subnet.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The subnet's computed gateway.\n",
                        "willReplaceOnChanges": true
                    },
                    "gatewayOffset": {
                        "type": "integer",
                        "description": "Offset for creating the gateway. Default is 0 (No gateway).\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP subnet to create.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The provisionned IP address netmask.\n",
                        "willReplaceOnChanges": true
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The provisionned IP prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The expected IP subnet's prefix length (ex: 24 for a '/24').\n",
                        "willReplaceOnChanges": true
                    },
                    "requestIp": {
                        "type": "string",
                        "description": "The optionally requested subnet IP address.\n",
                        "willReplaceOnChanges": true
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space into which creating the subnet.\n",
                        "willReplaceOnChanges": true
                    },
                    "terminal": {
                        "type": "boolean",
                        "description": "The terminal property of the IP subnet.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/user:User": {
            "description": "User resource allows to creat and manage local SOLIDserver users who\ncan connect through Web GUI and use API(s).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstUser = new solidserver.User(\"myFirstUser\", {\n    description: \"My Very First User Resource\",\n    email: \"j.smith@efficientip.com\",\n    firstName: \"John\",\n    groups: [solidserver_usergroup.grp_admin.name],\n    lastName: \"Smith\",\n    login: \"jsmith\",\n    password: \"a_very_c0mpl3x_P@ssw0rd\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_user = solidserver.User(\"myFirstUser\",\n    description=\"My Very First User Resource\",\n    email=\"j.smith@efficientip.com\",\n    first_name=\"John\",\n    groups=[solidserver_usergroup[\"grp_admin\"][\"name\"]],\n    last_name=\"Smith\",\n    login=\"jsmith\",\n    password=\"a_very_c0mpl3x_P@ssw0rd\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstUser = new Solidserver.User(\"myFirstUser\", new()\n    {\n        Description = \"My Very First User Resource\",\n        Email = \"j.smith@efficientip.com\",\n        FirstName = \"John\",\n        Groups = new[]\n        {\n            solidserver_usergroup.Grp_admin.Name,\n        },\n        LastName = \"Smith\",\n        Login = \"jsmith\",\n        Password = \"a_very_c0mpl3x_P@ssw0rd\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewUser(ctx, \"myFirstUser\", \u0026solidserver.UserArgs{\n\t\t\tDescription: pulumi.String(\"My Very First User Resource\"),\n\t\t\tEmail:       pulumi.String(\"j.smith@efficientip.com\"),\n\t\t\tFirstName:   pulumi.String(\"John\"),\n\t\t\tGroups: pulumi.StringArray{\n\t\t\t\tsolidserver_usergroup.Grp_admin.Name,\n\t\t\t},\n\t\t\tLastName: pulumi.String(\"Smith\"),\n\t\t\tLogin:    pulumi.String(\"jsmith\"),\n\t\t\tPassword: pulumi.String(\"a_very_c0mpl3x_P@ssw0rd\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.User;\nimport com.pulumi.solidserver.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstUser = new User(\"myFirstUser\", UserArgs.builder()        \n            .description(\"My Very First User Resource\")\n            .email(\"j.smith@efficientip.com\")\n            .firstName(\"John\")\n            .groups(solidserver_usergroup.grp_admin().name())\n            .lastName(\"Smith\")\n            .login(\"jsmith\")\n            .password(\"a_very_c0mpl3x_P@ssw0rd\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstUser:\n    type: solidserver:User\n    properties:\n      description: My Very First User Resource\n      email: j.smith@efficientip.com\n      firstName: John\n      groups:\n        - ${solidserver_usergroup.grp_admin.name}\n      lastName: Smith\n      login: jsmith\n      password: a_very_c0mpl3x_P@ssw0rd\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the user\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The first name of the user\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The group id set for this user\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the user\n"
                },
                "login": {
                    "type": "string",
                    "description": "The login of the user\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user\n"
                }
            },
            "required": [
                "groups",
                "login",
                "password"
            ],
            "inputProperties": {
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to the user.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the user\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the user\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "The first name of the user\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The group id set for this user\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "The last name of the user\n"
                },
                "login": {
                    "type": "string",
                    "description": "The login of the user\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user\n"
                }
            },
            "requiredInputs": [
                "groups",
                "login",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to the user.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the user\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email address of the user\n"
                    },
                    "firstName": {
                        "type": "string",
                        "description": "The first name of the user\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The group id set for this user\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "The last name of the user\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The login of the user\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user\n"
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/usergroup:Usergroup": {
            "description": "User resource allows to associate users with groups managing\nSOLIDserver permissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst tGroup01 = new solidserver.Usergroup(\"tGroup01\", {description: \"descr01\"});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nt_group01 = solidserver.Usergroup(\"tGroup01\", description=\"descr01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var tGroup01 = new Solidserver.Usergroup(\"tGroup01\", new()\n    {\n        Description = \"descr01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewUsergroup(ctx, \"tGroup01\", \u0026solidserver.UsergroupArgs{\n\t\t\tDescription: pulumi.String(\"descr01\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Usergroup;\nimport com.pulumi.solidserver.UsergroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var tGroup01 = new Usergroup(\"tGroup01\", UsergroupArgs.builder()        \n            .description(\"descr01\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  tGroup01:\n    type: solidserver:Usergroup\n    properties:\n      description: descr01\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the group\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Usergroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the group\n"
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/vlan:Vlan": {
            "description": "VLANresource allows to create and manage VLAN(s) and VxLAN(s).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstVxlan = new solidserver.Vlan(\"myFirstVxlan\", {vlanDomain: solidserver_vlan_domain.myFirstVxlanDomain.name});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_vxlan = solidserver.Vlan(\"myFirstVxlan\", vlan_domain=solidserver_vlan_domain[\"myFirstVxlanDomain\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstVxlan = new Solidserver.Vlan(\"myFirstVxlan\", new()\n    {\n        VlanDomain = solidserver_vlan_domain.MyFirstVxlanDomain.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewVlan(ctx, \"myFirstVxlan\", \u0026solidserver.VlanArgs{\n\t\t\tVlanDomain: pulumi.Any(solidserver_vlan_domain.MyFirstVxlanDomain.Name),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.Vlan;\nimport com.pulumi.solidserver.VlanArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstVxlan = new Vlan(\"myFirstVxlan\", VlanArgs.builder()        \n            .vlanDomain(solidserver_vlan_domain.myFirstVxlanDomain().name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstVxlan:\n    type: solidserver:Vlan\n    properties:\n      vlanDomain: ${solidserver_vlan_domain.myFirstVxlanDomain.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the vlan.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to vlan.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the vlan to create.\n"
                },
                "requestId": {
                    "type": "integer",
                    "description": "The optionally requested vlan ID.\n"
                },
                "vlanDomain": {
                    "type": "string",
                    "description": "The name of the vlan Domain.\n"
                },
                "vlanId": {
                    "type": "integer",
                    "description": "The vlan ID.\n"
                },
                "vlanRange": {
                    "type": "string",
                    "description": "The name of the vlan Range.\n"
                }
            },
            "required": [
                "name",
                "vlanDomain",
                "vlanId"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the vlan.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to vlan.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the vlan to create.\n"
                },
                "requestId": {
                    "type": "integer",
                    "description": "The optionally requested vlan ID.\n",
                    "willReplaceOnChanges": true
                },
                "vlanDomain": {
                    "type": "string",
                    "description": "The name of the vlan Domain.\n",
                    "willReplaceOnChanges": true
                },
                "vlanRange": {
                    "type": "string",
                    "description": "The name of the vlan Range.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "vlanDomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Vlan resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the vlan.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to vlan.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the vlan to create.\n"
                    },
                    "requestId": {
                        "type": "integer",
                        "description": "The optionally requested vlan ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanDomain": {
                        "type": "string",
                        "description": "The name of the vlan Domain.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "The vlan ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanRange": {
                        "type": "string",
                        "description": "The name of the vlan Range.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/vlanDomain:VlanDomain": {
            "description": "VLAN Domain resource allows to create and manage VLAN and VxLAN domains.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstVxlanDomain = new solidserver.VlanDomain(\"myFirstVxlanDomain\", {\n    \"class\": \"CUSTOM_VXLAN_DOMAIN\",\n    classParameters: {\n        LOCATION: \"PARIS\",\n    },\n    vxlan: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_vxlan_domain = solidserver.VlanDomain(\"myFirstVxlanDomain\",\n    class_=\"CUSTOM_VXLAN_DOMAIN\",\n    class_parameters={\n        \"LOCATION\": \"PARIS\",\n    },\n    vxlan=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstVxlanDomain = new Solidserver.VlanDomain(\"myFirstVxlanDomain\", new()\n    {\n        Class = \"CUSTOM_VXLAN_DOMAIN\",\n        ClassParameters = \n        {\n            { \"LOCATION\", \"PARIS\" },\n        },\n        Vxlan = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.NewVlanDomain(ctx, \"myFirstVxlanDomain\", \u0026solidserver.VlanDomainArgs{\n\t\t\tClass: pulumi.String(\"CUSTOM_VXLAN_DOMAIN\"),\n\t\t\tClassParameters: pulumi.StringMap{\n\t\t\t\t\"LOCATION\": pulumi.String(\"PARIS\"),\n\t\t\t},\n\t\t\tVxlan: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.VlanDomain;\nimport com.pulumi.solidserver.VlanDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myFirstVxlanDomain = new VlanDomain(\"myFirstVxlanDomain\", VlanDomainArgs.builder()        \n            .class_(\"CUSTOM_VXLAN_DOMAIN\")\n            .classParameters(Map.of(\"LOCATION\", \"PARIS\"))\n            .vxlan(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myFirstVxlanDomain:\n    type: solidserver:VlanDomain\n    properties:\n      class: CUSTOM_VXLAN_DOMAIN\n      classParameters:\n        LOCATION: PARIS\n      vxlan: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the VLAN Domain.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to VLAN Domain.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VLAN Domain to create.\n"
                },
                "vxlan": {
                    "type": "boolean",
                    "description": "Specify if the VLAN Domain is a VXLAN Domain.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the VLAN Domain.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to VLAN Domain.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VLAN Domain to create.\n",
                    "willReplaceOnChanges": true
                },
                "vxlan": {
                    "type": "boolean",
                    "description": "Specify if the VLAN Domain is a VXLAN Domain.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VlanDomain resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the VLAN Domain.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to VLAN Domain.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VLAN Domain to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "vxlan": {
                        "type": "boolean",
                        "description": "Specify if the VLAN Domain is a VXLAN Domain.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "solidserver:index/vlanRange:VlanRange": {
            "description": "VLAN Range resource allows to create and manage VLAN and VxLAN ranges.\n",
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the VLAN Range.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to VLAN Range.\n"
                },
                "end": {
                    "type": "integer",
                    "description": "The vlan range's higher vlan ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VLAN Range to create.\n"
                },
                "start": {
                    "type": "integer",
                    "description": "The vlan range's lower vlan ID.\n"
                },
                "vlanDomain": {
                    "type": "string",
                    "description": "The name of the vlan Domain.\n"
                }
            },
            "required": [
                "end",
                "name",
                "start",
                "vlanDomain"
            ],
            "inputProperties": {
                "class": {
                    "type": "string",
                    "description": "The class associated to the VLAN Range.\n"
                },
                "classParameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The class parameters associated to VLAN Range.\n"
                },
                "end": {
                    "type": "integer",
                    "description": "The vlan range's higher vlan ID.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the VLAN Range to create.\n",
                    "willReplaceOnChanges": true
                },
                "start": {
                    "type": "integer",
                    "description": "The vlan range's lower vlan ID.\n",
                    "willReplaceOnChanges": true
                },
                "vlanDomain": {
                    "type": "string",
                    "description": "The name of the vlan Domain.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "end",
                "start",
                "vlanDomain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VlanRange resources.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the VLAN Range.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to VLAN Range.\n"
                    },
                    "end": {
                        "type": "integer",
                        "description": "The vlan range's higher vlan ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VLAN Range to create.\n",
                        "willReplaceOnChanges": true
                    },
                    "start": {
                        "type": "integer",
                        "description": "The vlan range's lower vlan ID.\n",
                        "willReplaceOnChanges": true
                    },
                    "vlanDomain": {
                        "type": "string",
                        "description": "The name of the vlan Domain.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "solidserver:index/getCdb:getCdb": {
            "description": "Custom DB data-source allows to retrieve information about custom database stored within SOLIDserver.\nThis custom database entries can be leveraged within object classes and wizards in order to store custom meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstCustomDB = solidserver.getCdb({\n    name: \"myFirstCustomDB\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_custom_db = solidserver.get_cdb(name=\"myFirstCustomDB\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstCustomDB = Solidserver.GetCdb.Invoke(new()\n    {\n        Name = \"myFirstCustomDB\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupCdb(ctx, \u0026solidserver.LookupCdbArgs{\n\t\t\tName: \"myFirstCustomDB\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetCdbArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstCustomDB = SolidserverFunctions.getCdb(GetCdbArgs.builder()\n            .name(\"myFirstCustomDB\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstCustomDB:\n    fn::invoke:\n      Function: solidserver:getCdb\n      Arguments:\n        name: myFirstCustomDB\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCdb.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the custom DB.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCdb.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "label1": {
                        "type": "string",
                        "description": "The name of the label 1\n"
                    },
                    "label10": {
                        "type": "string",
                        "description": "The name of the label 10\n"
                    },
                    "label2": {
                        "type": "string",
                        "description": "The name of the label 2\n"
                    },
                    "label3": {
                        "type": "string",
                        "description": "The name of the label 3\n"
                    },
                    "label4": {
                        "type": "string",
                        "description": "The name of the label 4\n"
                    },
                    "label5": {
                        "type": "string",
                        "description": "The name of the label 5\n"
                    },
                    "label6": {
                        "type": "string",
                        "description": "The name of the label 6\n"
                    },
                    "label7": {
                        "type": "string",
                        "description": "The name of the label 7\n"
                    },
                    "label8": {
                        "type": "string",
                        "description": "The name of the label 8\n"
                    },
                    "label9": {
                        "type": "string",
                        "description": "The name of the label 9\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the custom DB.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label1",
                    "label10",
                    "label2",
                    "label3",
                    "label4",
                    "label5",
                    "label6",
                    "label7",
                    "label8",
                    "label9",
                    "name",
                    "id"
                ]
            }
        },
        "solidserver:index/getCdbData:getCdbData": {
            "description": "Custom DB Data data-source allows to retrieve custom database entries stored within SOLIDserver.\nThis custom database entries can be leveraged within object classes and wizards in order to store custom meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myCustomData = solidserver.getCdbData({\n    customDb: \"myFirstCustomDB\",\n    value1: \"FR\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_custom_data = solidserver.get_cdb_data(custom_db=\"myFirstCustomDB\",\n    value1=\"FR\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myCustomData = Solidserver.GetCdbData.Invoke(new()\n    {\n        CustomDb = \"myFirstCustomDB\",\n        Value1 = \"FR\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupCdbData(ctx, \u0026solidserver.LookupCdbDataArgs{\n\t\t\tCustomDb: \"myFirstCustomDB\",\n\t\t\tValue1:   \"FR\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetCdbDataArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myCustomData = SolidserverFunctions.getCdbData(GetCdbDataArgs.builder()\n            .customDb(\"myFirstCustomDB\")\n            .value1(\"FR\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myCustomData:\n    fn::invoke:\n      Function: solidserver:getCdbData\n      Arguments:\n        customDb: myFirstCustomDB\n        value1: FR\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCdbData.\n",
                "properties": {
                    "customDb": {
                        "type": "string",
                        "description": "The name of the custom DB.\n"
                    },
                    "value1": {
                        "type": "string",
                        "description": "The name of the value 1\n"
                    }
                },
                "type": "object",
                "required": [
                    "customDb",
                    "value1"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCdbData.\n",
                "properties": {
                    "customDb": {
                        "type": "string",
                        "description": "The name of the custom DB.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "value1": {
                        "type": "string",
                        "description": "The name of the value 1\n"
                    },
                    "value10": {
                        "type": "string",
                        "description": "The name of the value 10\n"
                    },
                    "value2": {
                        "type": "string",
                        "description": "The name of the value 2\n"
                    },
                    "value3": {
                        "type": "string",
                        "description": "The name of the value 3\n"
                    },
                    "value4": {
                        "type": "string",
                        "description": "The name of the value 4\n"
                    },
                    "value5": {
                        "type": "string",
                        "description": "The name of the value 5\n"
                    },
                    "value6": {
                        "type": "string",
                        "description": "The name of the value 6\n"
                    },
                    "value7": {
                        "type": "string",
                        "description": "The name of the value 7\n"
                    },
                    "value8": {
                        "type": "string",
                        "description": "The name of the value 8\n"
                    },
                    "value9": {
                        "type": "string",
                        "description": "The name of the value 9\n"
                    }
                },
                "type": "object",
                "required": [
                    "customDb",
                    "value1",
                    "value10",
                    "value2",
                    "value3",
                    "value4",
                    "value5",
                    "value6",
                    "value7",
                    "value8",
                    "value9",
                    "id"
                ]
            }
        },
        "solidserver:index/getDnsServer:getDnsServer": {
            "description": "DNS server data-source allows to retrieve information about DNS servers.\nMost of the time, they are just added to a SMART, but they can remain standalone.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst dnsServerData = solidserver.getDnsServer({\n    name: \"ns.local\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\ndns_server_data = solidserver.get_dns_server(name=\"ns.local\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dnsServerData = Solidserver.GetDnsServer.Invoke(new()\n    {\n        Name = \"ns.local\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupDnsServer(ctx, \u0026solidserver.LookupDnsServerArgs{\n\t\t\tName: \"ns.local\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetDnsServerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dnsServerData = SolidserverFunctions.getDnsServer(GetDnsServerArgs.builder()\n            .name(\"ns.local\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dnsServerData:\n    fn::invoke:\n      Function: solidserver:getDnsServer\n      Arguments:\n        name: ns.local\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsServer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS server.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsServer.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "IPv4 address of the DNS server.\n"
                    },
                    "allowQueries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).\n"
                    },
                    "allowRecursions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).\n"
                    },
                    "allowTransfers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS server.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to the DNS server.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Custom information about the DNS server.\n"
                    },
                    "forward": {
                        "type": "string",
                        "description": "The forwarding mode of the DNS server (disabled if empty).\n"
                    },
                    "forwarders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP address list of the forwarder(s) configured on the DNS server.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS server.\n"
                    },
                    "recursion": {
                        "type": "boolean",
                        "description": "The recursion status of the DNS server.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of DNS server (ipm (SOLIDserver DNS)|msdaemon (Microsoft DNS)|ans (Nominum)|aws (AWS Route-53)|other (Other DNS)).\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "DNS Engine Version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "allowQueries",
                    "allowRecursions",
                    "allowTransfers",
                    "class",
                    "classParameters",
                    "comment",
                    "forward",
                    "forwarders",
                    "name",
                    "recursion",
                    "type",
                    "version",
                    "id"
                ]
            }
        },
        "solidserver:index/getDnsSmart:getDnsSmart": {
            "description": "DNS SMART data-source allows to retrieve information about DNS SMART architectures.\nSMART(s) are abstratc containers managing several DNS servers as a unique entity.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst dnsSMARTData = solidserver.getDnsSmart({\n    name: ssmart.local,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\ndns_smart_data = solidserver.get_dns_smart(name=ssmart[\"local\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dnsSMARTData = Solidserver.GetDnsSmart.Invoke(new()\n    {\n        Name = ssmart.Local,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupDnsSmart(ctx, \u0026solidserver.LookupDnsSmartArgs{\n\t\t\tName: ssmart.Local,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetDnsSmartArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dnsSMARTData = SolidserverFunctions.getDnsSmart(GetDnsSmartArgs.builder()\n            .name(ssmart.local())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dnsSMARTData:\n    fn::invoke:\n      Function: solidserver:getDnsSmart\n      Arguments:\n        name: ${ssmart.local}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsSmart.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS SMART.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsSmart.\n",
                "properties": {
                    "allowQueries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server (named ACL(s) are not supported using this provider).\n"
                    },
                    "allowRecursions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server for recursion (named ACL(s) are not supported using this provider).\n"
                    },
                    "allowTransfers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS server for zone transfert (named ACL(s) are not supported using this provider).\n"
                    },
                    "arch": {
                        "type": "string",
                        "description": "The SMART architecture type (masterslave|stealth|multimaster|single|farm).\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS server.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to the DNS SMART\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Custom information about the DNS SMART.\n"
                    },
                    "forward": {
                        "type": "string",
                        "description": "The forwarding mode of the DNS SMART (Disabled if empty).\n"
                    },
                    "forwarders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP address list of the forwarder(s) configured on the DNS SMART.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The name of the DNS SMART members.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS SMART.\n"
                    },
                    "recursion": {
                        "type": "boolean",
                        "description": "The recursion status of the DNS SMART.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowQueries",
                    "allowRecursions",
                    "allowTransfers",
                    "arch",
                    "class",
                    "classParameters",
                    "comment",
                    "forward",
                    "forwarders",
                    "members",
                    "name",
                    "recursion",
                    "id"
                ]
            }
        },
        "solidserver:index/getDnsView:getDnsView": {
            "description": "DNS view data-source allows to retrieve information about DNS views.\nView(s) are virutal containers mostly used to implement DNS split horizon\nproviding different answers depending on matching criterias.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst dnsViewData = solidserver.getDnsView({\n    dnsserver: \"ns.local\",\n    name: \"testview\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\ndns_view_data = solidserver.get_dns_view(dnsserver=\"ns.local\",\n    name=\"testview\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dnsViewData = Solidserver.GetDnsView.Invoke(new()\n    {\n        Dnsserver = \"ns.local\",\n        Name = \"testview\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupDnsView(ctx, \u0026solidserver.LookupDnsViewArgs{\n\t\t\tDnsserver: \"ns.local\",\n\t\t\tName:      \"testview\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetDnsViewArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dnsViewData = SolidserverFunctions.getDnsView(GetDnsViewArgs.builder()\n            .dnsserver(\"ns.local\")\n            .name(\"testview\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dnsViewData:\n    fn::invoke:\n      Function: solidserver:getDnsView\n      Arguments:\n        dnsserver: ns.local\n        name: testview\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsView.\n",
                "properties": {
                    "dnsserver": {
                        "type": "string",
                        "description": "The name of DNS server or DNS SMART hosting the DNS view to create.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS view.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dnsserver",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsView.\n",
                "properties": {
                    "allowQueries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS view (named ACL(s) are not supported using this provider).\n"
                    },
                    "allowRecursions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS view for recursion (named ACL(s) are not supported using this provider).\n"
                    },
                    "allowTransfers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes allowed to query the DNS view for zone transfert (named ACL(s) are not supported using this provider).\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS view.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to the DNS view.\n"
                    },
                    "dnsserver": {
                        "type": "string",
                        "description": "The name of DNS server or DNS SMART hosting the DNS view to create.\n"
                    },
                    "forward": {
                        "type": "string",
                        "description": "The forwarding mode of the DNS view (disabled if empty).\n"
                    },
                    "forwarders": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IP address list of the forwarder(s) configured on the DNS view.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "matchClients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes used to match the clients of the view (named ACL(s) are not supported using this provider).\n"
                    },
                    "matchTos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of network prefixes used to match the traffic to the view (named ACL(s) are not supported using this provider).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the DNS view.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The level of the DNS view, where 0 represents the highest level in the views hierarchy.\n"
                    },
                    "recursion": {
                        "type": "boolean",
                        "description": "The recursion status of the DNS view.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowQueries",
                    "allowRecursions",
                    "allowTransfers",
                    "class",
                    "classParameters",
                    "dnsserver",
                    "forward",
                    "forwarders",
                    "matchClients",
                    "matchTos",
                    "name",
                    "order",
                    "recursion",
                    "id"
                ]
            }
        },
        "solidserver:index/getDnsZone:getDnsZone": {
            "description": "DNS Zone data-source allows to retrieve information about DNS zones.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstDnsZoneData = solidserver.getDnsZone({\n    name: solidserver_dns_zone.myFirstZone.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_dns_zone_data = solidserver.get_dns_zone(name=solidserver_dns_zone[\"myFirstZone\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstDnsZoneData = Solidserver.GetDnsZone.Invoke(new()\n    {\n        Name = solidserver_dns_zone.MyFirstZone.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupDnsZone(ctx, \u0026solidserver.LookupDnsZoneArgs{\n\t\t\tName: solidserver_dns_zone.MyFirstZone.Name,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetDnsZoneArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstDnsZoneData = SolidserverFunctions.getDnsZone(GetDnsZoneArgs.builder()\n            .name(solidserver_dns_zone.myFirstZone().name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstDnsZoneData:\n    fn::invoke:\n      Function: solidserver:getDnsZone\n      Arguments:\n        name: ${solidserver_dns_zone.myFirstZone.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDnsZone.\n",
                "properties": {
                    "dnsview": {
                        "type": "string",
                        "description": "The name of DNS view hosting the DNS zone.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Domain Name served by the DNS zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDnsZone.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the DNS zone.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to IP space.\n"
                    },
                    "createptr": {
                        "type": "boolean",
                        "description": "Automaticaly create PTR records for the DNS zone.\n"
                    },
                    "dnsserver": {
                        "type": "string",
                        "description": "The name of DNS server or DNS SMART hosting the DNS zone.\n"
                    },
                    "dnsview": {
                        "type": "string",
                        "description": "The name of DNS view hosting the DNS zone.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Domain Name served by the DNS zone.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of a space associated to the DNS zone.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The Type of the DNS zone.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "classParameters",
                    "createptr",
                    "dnsserver",
                    "name",
                    "space",
                    "type",
                    "id"
                ]
            }
        },
        "solidserver:index/getIp6Address:getIp6Address": {
            "description": "IPv6 address data-source allows to retrieve information about reserved IPv6 addresses including meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIp6AddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstIPv6AddressData = SolidserverFunctions.getIp6Address(GetIp6AddressArgs.builder()\n            .name(solidserver_ip6_address.myFirstIPv6Address().name())\n            .space(solidserver_ip6_address.myFirstIPv6Address().space())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstIPv6AddressData:\n    fn::invoke:\n      Function: solidserver:getIp6Address\n      Arguments:\n        name: ${solidserver_ip6_address.myFirstIPv6Address.name}\n        space: ${solidserver_ip6_address.myFirstIPv6Address.space}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIp6Address.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv6 address.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space of the IPv6 address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "space"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIp6Address.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv6 address.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IPv6 address.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to the IPv6 address.\n"
                    },
                    "device": {
                        "type": "string",
                        "description": "Device Name associated to the IPv6 address (Require a 'Device Manager' license).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC Address of the IPv6 address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name or FQDN of the IPv6 address.\n"
                    },
                    "pool": {
                        "type": "string",
                        "description": "The name of the pool of the IPv6 address.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IPv6 address prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The prefix_length associated to the IPv6 address.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space of the IPv6 address.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The name of the subnet of the IPv6 address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "class",
                    "classParameters",
                    "device",
                    "mac",
                    "name",
                    "pool",
                    "prefix",
                    "prefixSize",
                    "space",
                    "subnet",
                    "id"
                ]
            }
        },
        "solidserver:index/getIp6Pool:getIp6Pool": {
            "description": "IPv6 pool data-source allows to retrieve information about reserved IPv6 pools including meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPv6PoolData = solidserver.getIp6Pool({\n    name: solidserver_ip6_subnet.myFirstIPv6Pool.name,\n    subnet: solidserver_ip6_subnet.myFirstIPv6Pool.subnet,\n    space: solidserver_ip6_subnet.myFirstIPv6Pool.space,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_i_pv6_pool_data = solidserver.get_ip6_pool(name=solidserver_ip6_subnet[\"myFirstIPv6Pool\"][\"name\"],\n    subnet=solidserver_ip6_subnet[\"myFirstIPv6Pool\"][\"subnet\"],\n    space=solidserver_ip6_subnet[\"myFirstIPv6Pool\"][\"space\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPv6PoolData = Solidserver.GetIp6Pool.Invoke(new()\n    {\n        Name = solidserver_ip6_subnet.MyFirstIPv6Pool.Name,\n        Subnet = solidserver_ip6_subnet.MyFirstIPv6Pool.Subnet,\n        Space = solidserver_ip6_subnet.MyFirstIPv6Pool.Space,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupIp6Pool(ctx, \u0026solidserver.LookupIp6PoolArgs{\n\t\t\tName:   solidserver_ip6_subnet.MyFirstIPv6Pool.Name,\n\t\t\tSubnet: solidserver_ip6_subnet.MyFirstIPv6Pool.Subnet,\n\t\t\tSpace:  solidserver_ip6_subnet.MyFirstIPv6Pool.Space,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIp6PoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstIPv6PoolData = SolidserverFunctions.getIp6Pool(GetIp6PoolArgs.builder()\n            .name(solidserver_ip6_subnet.myFirstIPv6Pool().name())\n            .subnet(solidserver_ip6_subnet.myFirstIPv6Pool().subnet())\n            .space(solidserver_ip6_subnet.myFirstIPv6Pool().space())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstIPv6PoolData:\n    fn::invoke:\n      Function: solidserver:getIp6Pool\n      Arguments:\n        name: ${solidserver_ip6_subnet.myFirstIPv6Pool.name}\n        subnet: ${solidserver_ip6_subnet.myFirstIPv6Pool.subnet}\n        space: ${solidserver_ip6_subnet.myFirstIPv6Pool.space}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIp6Pool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the IPv6 pool.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IPv6 pool.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The parent subnet of the IPv6 pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "space",
                    "subnet"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIp6Pool.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IPv6 pool.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to the IPv6 pool.\n"
                    },
                    "end": {
                        "type": "string",
                        "description": "The last address of the IPv6 pool.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IPv6 pool.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The prefix of the parent subnet of the IPv6 pool.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The size prefix of the parent subnet of the IPv6 pool.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IPv6 pool.\n"
                    },
                    "start": {
                        "type": "string",
                        "description": "The fisrt address of the IPv6 pool.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The parent subnet of the IPv6 pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "classParameters",
                    "end",
                    "name",
                    "prefix",
                    "prefixSize",
                    "space",
                    "start",
                    "subnet",
                    "id"
                ]
            }
        },
        "solidserver:index/getIp6Ptr:getIp6Ptr": {
            "description": "IPv6 PTR data-source allows to easily convert an IPv6 address into a DNS PTR format.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIp6Ptr.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv6 address to convert into PTR domain name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIp6Ptr.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IPv6 address to convert into PTR domain name.\n"
                    },
                    "dname": {
                        "type": "string",
                        "description": "The PTR record FQDN associated to the IPv6 address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "dname",
                    "id"
                ]
            }
        },
        "solidserver:index/getIp6Subnet:getIp6Subnet": {
            "description": "IPv6 subnet data-source allows to retrieve information about reserved IPv6 subnets, including meta-data.\nIPv6 Subnet are key to organize the IP space, they can be blocks or subnets. Blocks reflect assigned IP\nranges (RFC1918 or public prefixes). Subnets reflect the internal sub-division of your network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIP6SubnetData = solidserver.getIp6Subnet({\n    name: solidserver_ip6_subnet.myFirstIP6Subnet.name,\n    space: solidserver_ip6_subnet.myFirstIP6Subnet.space,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip6_subnet_data = solidserver.get_ip6_subnet(name=solidserver_ip6_subnet[\"myFirstIP6Subnet\"][\"name\"],\n    space=solidserver_ip6_subnet[\"myFirstIP6Subnet\"][\"space\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIP6SubnetData = Solidserver.GetIp6Subnet.Invoke(new()\n    {\n        Name = solidserver_ip6_subnet.MyFirstIP6Subnet.Name,\n        Space = solidserver_ip6_subnet.MyFirstIP6Subnet.Space,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupIp6Subnet(ctx, \u0026solidserver.LookupIp6SubnetArgs{\n\t\t\tName:  solidserver_ip6_subnet.MyFirstIP6Subnet.Name,\n\t\t\tSpace: solidserver_ip6_subnet.MyFirstIP6Subnet.Space,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIp6SubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstIP6SubnetData = SolidserverFunctions.getIp6Subnet(GetIp6SubnetArgs.builder()\n            .name(solidserver_ip6_subnet.myFirstIP6Subnet().name())\n            .space(solidserver_ip6_subnet.myFirstIP6Subnet().space())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstIP6SubnetData:\n    fn::invoke:\n      Function: solidserver:getIp6Subnet\n      Arguments:\n        name: ${solidserver_ip6_subnet.myFirstIP6Subnet.name}\n        space: ${solidserver_ip6_subnet.myFirstIP6Subnet.space}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIp6Subnet.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the IPv6 subnet.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IPv6 subnet.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "space"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIp6Subnet.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP subnet address.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IPv6 subnet.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to IPv6 subnet.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The  IPv6 subnet's computed gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IPv6 subnet.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IPv6 subnet prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The IPv6 subnet's prefix length (ex: 64 for a '/64').\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IPv6 subnet.\n"
                    },
                    "terminal": {
                        "type": "boolean",
                        "description": "The terminal property of the IPv6 subnet.\n"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "The optional vlan ID associated with the subnet.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "class",
                    "classParameters",
                    "gateway",
                    "name",
                    "prefix",
                    "prefixSize",
                    "space",
                    "terminal",
                    "vlanId",
                    "id"
                ]
            }
        },
        "solidserver:index/getIp6SubnetQuery:getIp6SubnetQuery": {
            "description": "IPv6 subnet query data-source allows to retrieve information about the first IPv6 subnet matching given criterias, including its meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst mySecondIPv6SubnetQueriedData = solidserver.getIp6SubnetQuery({\n    query: \"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n    tags: \"network.vnid\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_second_i_pv6_subnet_queried_data = solidserver.get_ip6_subnet_query(query=\"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n    tags=\"network.vnid\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySecondIPv6SubnetQueriedData = Solidserver.GetIp6SubnetQuery.Invoke(new()\n    {\n        Query = \"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n        Tags = \"network.vnid\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.GetIp6SubnetQuery(ctx, \u0026solidserver.GetIp6SubnetQueryArgs{\n\t\t\tQuery: \"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n\t\t\tTags:  pulumi.StringRef(\"network.vnid\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIp6SubnetQueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySecondIPv6SubnetQueriedData = SolidserverFunctions.getIp6SubnetQuery(GetIp6SubnetQueryArgs.builder()\n            .query(\"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\")\n            .tags(\"network.vnid\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySecondIPv6SubnetQueriedData:\n    fn::invoke:\n      Function: solidserver:getIp6SubnetQuery\n      Arguments:\n        query: tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\n        tags: network.vnid\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIp6SubnetQuery.\n",
                "properties": {
                    "orderby": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "The tags to be used to find the first matching subnet in the query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIp6SubnetQuery.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP subnet address.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IPv6 subnet.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to IPv6 subnet.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The  IPv6 subnet's computed gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IPv6 subnet.\n"
                    },
                    "orderby": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IPv6 subnet prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The IPv6 subnet's prefix length (ex: 64 for a '/64').\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IPv6 subnet.\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "The tags to be used to find the first matching subnet in the query.\n"
                    },
                    "terminal": {
                        "type": "boolean",
                        "description": "The terminal property of the IPv6 subnet.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "class",
                    "classParameters",
                    "gateway",
                    "name",
                    "prefix",
                    "prefixSize",
                    "query",
                    "space",
                    "terminal",
                    "id"
                ]
            }
        },
        "solidserver:index/getIpAddress:getIpAddress": {
            "description": "IP address data-source allows to retrieve information about reserved IPv4 addresses including meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIpAddressArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstIPAddressData = SolidserverFunctions.getIpAddress(GetIpAddressArgs.builder()\n            .name(solidserver_ip_address.myFirstIPAddress().name())\n            .space(solidserver_ip_address.myFirstIPAddress().space())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstIPAddressData:\n    fn::invoke:\n      Function: solidserver:getIpAddress\n      Arguments:\n        name: ${solidserver_ip_address.myFirstIPAddress.name}\n        space: ${solidserver_ip_address.myFirstIPAddress.space}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpAddress.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space of the IP address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "space"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpAddress.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP address.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to the IP address.\n"
                    },
                    "device": {
                        "type": "string",
                        "description": "Device Name associated to the IP address (Require a 'Device Manager' license).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "mac": {
                        "type": "string",
                        "description": "The MAC Address of the IP address.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The short name or FQDN of the IP address.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The provisionned IP address netmask.\n"
                    },
                    "pool": {
                        "type": "string",
                        "description": "The name of the pool of the IP address.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IP address prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The prefix_length associated to the IP address.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The name of the space of the IP address.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The name of the subnet of the IP address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "class",
                    "classParameters",
                    "device",
                    "mac",
                    "name",
                    "netmask",
                    "pool",
                    "prefix",
                    "prefixSize",
                    "space",
                    "subnet",
                    "id"
                ]
            }
        },
        "solidserver:index/getIpPool:getIpPool": {
            "description": "IP pool data-source allows to retrieve information about reserved IPv4 pools including meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPPoolData = solidserver.getIpPool({\n    name: solidserver_ip_subnet.myFirstIPPool.name,\n    subnet: solidserver_ip_subnet.myFirstIPPool.subnet,\n    space: solidserver_ip_subnet.myFirstIPPool.space,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip_pool_data = solidserver.get_ip_pool(name=solidserver_ip_subnet[\"myFirstIPPool\"][\"name\"],\n    subnet=solidserver_ip_subnet[\"myFirstIPPool\"][\"subnet\"],\n    space=solidserver_ip_subnet[\"myFirstIPPool\"][\"space\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPPoolData = Solidserver.GetIpPool.Invoke(new()\n    {\n        Name = solidserver_ip_subnet.MyFirstIPPool.Name,\n        Subnet = solidserver_ip_subnet.MyFirstIPPool.Subnet,\n        Space = solidserver_ip_subnet.MyFirstIPPool.Space,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupIpPool(ctx, \u0026solidserver.LookupIpPoolArgs{\n\t\t\tName:   solidserver_ip_subnet.MyFirstIPPool.Name,\n\t\t\tSubnet: solidserver_ip_subnet.MyFirstIPPool.Subnet,\n\t\t\tSpace:  solidserver_ip_subnet.MyFirstIPPool.Space,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIpPoolArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstIPPoolData = SolidserverFunctions.getIpPool(GetIpPoolArgs.builder()\n            .name(solidserver_ip_subnet.myFirstIPPool().name())\n            .subnet(solidserver_ip_subnet.myFirstIPPool().subnet())\n            .space(solidserver_ip_subnet.myFirstIPPool().space())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstIPPoolData:\n    fn::invoke:\n      Function: solidserver:getIpPool\n      Arguments:\n        name: ${solidserver_ip_subnet.myFirstIPPool.name}\n        subnet: ${solidserver_ip_subnet.myFirstIPPool.subnet}\n        space: ${solidserver_ip_subnet.myFirstIPPool.space}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpPool.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the IP pool.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IP pool.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The parent subnet of the IP pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "space",
                    "subnet"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpPool.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP pool.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to the IP pool.\n"
                    },
                    "end": {
                        "type": "string",
                        "description": "The last address of the IP pool.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP pool.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The prefix of the parent subnet of the IP pool.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The size prefix of the parent subnet of the IP pool.\n"
                    },
                    "size": {
                        "type": "string",
                        "description": "The size of the IP pool.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IP pool.\n"
                    },
                    "start": {
                        "type": "string",
                        "description": "The fisrt address of the IP pool.\n"
                    },
                    "subnet": {
                        "type": "string",
                        "description": "The parent subnet of the IP pool.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "classParameters",
                    "end",
                    "name",
                    "prefix",
                    "prefixSize",
                    "size",
                    "space",
                    "start",
                    "subnet",
                    "id"
                ]
            }
        },
        "solidserver:index/getIpPtr:getIpPtr": {
            "description": "IP PTR data-source allows to easily convert an IPv4 address into a DNS PTR format.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIpPtr.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address to convert into PTR domain name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpPtr.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP address to convert into PTR domain name.\n"
                    },
                    "dname": {
                        "type": "string",
                        "description": "The PTR record FQDN associated to the IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "dname",
                    "id"
                ]
            }
        },
        "solidserver:index/getIpSpace:getIpSpace": {
            "description": "Space data-source allows to retrieve information about reserved IP spaces, including meta-data.\nSpaces are the highest level objets in the SOLIDserver's IPAM module organization,\nthe entry point of any IPv4 or IPv6 addressing plan. It allows to manage unique ranges\nof IP addresses.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstSpaceData = solidserver.getIpSpace({\n    name: solidserver_ip_space.myFirstSpace.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_space_data = solidserver.get_ip_space(name=solidserver_ip_space[\"myFirstSpace\"][\"name\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstSpaceData = Solidserver.GetIpSpace.Invoke(new()\n    {\n        Name = solidserver_ip_space.MyFirstSpace.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupIpSpace(ctx, \u0026solidserver.LookupIpSpaceArgs{\n\t\t\tName: solidserver_ip_space.MyFirstSpace.Name,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIpSpaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstSpaceData = SolidserverFunctions.getIpSpace(GetIpSpaceArgs.builder()\n            .name(solidserver_ip_space.myFirstSpace().name())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstSpaceData:\n    fn::invoke:\n      Function: solidserver:getIpSpace\n      Arguments:\n        name: ${solidserver_ip_space.myFirstSpace.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpSpace.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the IP space.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpSpace.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP space.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to IP space.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP space.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "classParameters",
                    "name",
                    "id"
                ]
            }
        },
        "solidserver:index/getIpSubnet:getIpSubnet": {
            "description": "IP subnet data-source allows to retrieve information about reserved IPv4 subnets, including meta-data.\nIP Subnet are key to organize the IP space, they can be blocks or subnets. Blocks reflect assigned IP\nranges (RFC1918 or public prefixes). Subnets reflect the internal sub-division of your network.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst myFirstIPSubnetData = solidserver.getIpSubnet({\n    name: solidserver_ip_subnet.myFirstIPSubnet.name,\n    space: solidserver_ip_subnet.myFirstIPSubnet.space,\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_first_ip_subnet_data = solidserver.get_ip_subnet(name=solidserver_ip_subnet[\"myFirstIPSubnet\"][\"name\"],\n    space=solidserver_ip_subnet[\"myFirstIPSubnet\"][\"space\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myFirstIPSubnetData = Solidserver.GetIpSubnet.Invoke(new()\n    {\n        Name = solidserver_ip_subnet.MyFirstIPSubnet.Name,\n        Space = solidserver_ip_subnet.MyFirstIPSubnet.Space,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.LookupIpSubnet(ctx, \u0026solidserver.LookupIpSubnetArgs{\n\t\t\tName:  solidserver_ip_subnet.MyFirstIPSubnet.Name,\n\t\t\tSpace: solidserver_ip_subnet.MyFirstIPSubnet.Space,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIpSubnetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var myFirstIPSubnetData = SolidserverFunctions.getIpSubnet(GetIpSubnetArgs.builder()\n            .name(solidserver_ip_subnet.myFirstIPSubnet().name())\n            .space(solidserver_ip_subnet.myFirstIPSubnet().space())\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  myFirstIPSubnetData:\n    fn::invoke:\n      Function: solidserver:getIpSubnet\n      Arguments:\n        name: ${solidserver_ip_subnet.myFirstIPSubnet.name}\n        space: ${solidserver_ip_subnet.myFirstIPSubnet.space}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpSubnet.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the IP subnet.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IP subnet.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "space"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpSubnet.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP subnet address.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP subnet.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to IP subnet.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The subnet's computed gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP subnet.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The IP subnet netmask.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IP subnet prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The IP subnet's prefix length (ex: 24 for a '/24').\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IP subnet.\n"
                    },
                    "terminal": {
                        "type": "boolean",
                        "description": "The terminal property of the IP subnet.\n"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "The optional vlan ID associated with the subnet.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "class",
                    "classParameters",
                    "gateway",
                    "name",
                    "netmask",
                    "prefix",
                    "prefixSize",
                    "space",
                    "terminal",
                    "vlanId",
                    "id"
                ]
            }
        },
        "solidserver:index/getIpSubnetQuery:getIpSubnetQuery": {
            "description": "IP subnet query data-source allows to retrieve information about the first IPv4 subnet matching given criterias, including its meta-data.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as solidserver from \"@pulumi/solidserver\";\n\nconst mySecondIPSubnetQueriedData = solidserver.getIpSubnetQuery({\n    query: \"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n    tags: \"network.vnid\",\n});\n```\n```python\nimport pulumi\nimport pulumi_solidserver as solidserver\n\nmy_second_ip_subnet_queried_data = solidserver.get_ip_subnet_query(query=\"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n    tags=\"network.vnid\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Solidserver = Pulumi.Solidserver;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var mySecondIPSubnetQueriedData = Solidserver.GetIpSubnetQuery.Invoke(new()\n    {\n        Query = \"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n        Tags = \"network.vnid\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/AthenaWolfe/pulumi-solidserver/sdk/go/solidserver\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := solidserver.GetIpSubnetQuery(ctx, \u0026solidserver.GetIpSubnetQueryArgs{\n\t\t\tQuery: \"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\",\n\t\t\tTags:  pulumi.StringRef(\"network.vnid\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.solidserver.SolidserverFunctions;\nimport com.pulumi.solidserver.inputs.GetIpSubnetQueryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var mySecondIPSubnetQueriedData = SolidserverFunctions.getIpSubnetQuery(GetIpSubnetQueryArgs.builder()\n            .query(\"tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\")\n            .tags(\"network.vnid\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  mySecondIPSubnetQueriedData:\n    fn::invoke:\n      Function: solidserver:getIpSubnetQuery\n      Arguments:\n        query: tag_network_vnid = '12666' AND subnet_allocated_percent \u003c '90.0'\n        tags: network.vnid\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIpSubnetQuery.\n",
                "properties": {
                    "orderby": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "The tags to be used to find the first matching subnet in the query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIpSubnetQuery.\n",
                "properties": {
                    "address": {
                        "type": "string",
                        "description": "The IP subnet address.\n"
                    },
                    "class": {
                        "type": "string",
                        "description": "The class associated to the IP subnet.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The class parameters associated to IP subnet.\n"
                    },
                    "gateway": {
                        "type": "string",
                        "description": "The subnet's computed gateway.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the IP subnet.\n"
                    },
                    "netmask": {
                        "type": "string",
                        "description": "The IP subnet netmask.\n"
                    },
                    "orderby": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The IP subnet prefix.\n"
                    },
                    "prefixSize": {
                        "type": "integer",
                        "description": "The IP subnet's prefix length (ex: 24 for a '/24').\n"
                    },
                    "query": {
                        "type": "string",
                        "description": "The query used to find the first matching subnet.\n"
                    },
                    "space": {
                        "type": "string",
                        "description": "The space associated to the IP subnet.\n"
                    },
                    "tags": {
                        "type": "string",
                        "description": "The tags to be used to find the first matching subnet in the query.\n"
                    }
                },
                "type": "object",
                "required": [
                    "address",
                    "class",
                    "classParameters",
                    "gateway",
                    "name",
                    "netmask",
                    "prefix",
                    "prefixSize",
                    "query",
                    "space",
                    "id"
                ]
            }
        },
        "solidserver:index/getUsergroup:getUsergroup": {
            "description": "User group data-source allows to retrieve information about groups used to manage\npermissions within SOLIDserver.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUsergroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getUsergroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the user group.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "solidserver:index/getVlan:getVlan": {
            "description": "VLAN data-source allows to retrieve information about vlans, including meta-data.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVlan.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the vlan.\n"
                    },
                    "vlanDomain": {
                        "type": "string",
                        "description": "The name of the vlan Domain.\n"
                    },
                    "vlanRange": {
                        "type": "string",
                        "description": "The name of the vlan Range.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "vlanDomain"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVlan.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the vlan.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to vlan.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the vlan.\n"
                    },
                    "vlanDomain": {
                        "type": "string",
                        "description": "The name of the vlan Domain.\n"
                    },
                    "vlanId": {
                        "type": "integer",
                        "description": "The vlan ID.\n"
                    },
                    "vlanRange": {
                        "type": "string",
                        "description": "The name of the vlan Range.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "classParameters",
                    "name",
                    "vlanDomain",
                    "vlanId",
                    "id"
                ]
            }
        },
        "solidserver:index/getVlanDomain:getVlanDomain": {
            "description": "VLAN domain data-source allows to retrieve information about VLAN Domains, including meta-data.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVlanDomain.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the VLAN Domain.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVlanDomain.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the VLAN Domain.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to VLAN Domain.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VLAN Domain.\n"
                    },
                    "vxlan": {
                        "type": "boolean",
                        "description": "Specify if the VLAN Domain is a VXLAN Domain.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "classParameters",
                    "name",
                    "vxlan",
                    "id"
                ]
            }
        },
        "solidserver:index/getVlanRange:getVlanRange": {
            "description": "VLAN range data-source allows to retrieve information about VLAN ranges, including meta-data.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getVlanRange.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the VLAN Range.\n"
                    },
                    "vlanDomain": {
                        "type": "string",
                        "description": "The name of the vlan Domain.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "vlanDomain"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVlanRange.\n",
                "properties": {
                    "class": {
                        "type": "string",
                        "description": "The class associated to the VLAN Range.\n"
                    },
                    "classParameters": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The class parameters associated to VLAN Range.\n"
                    },
                    "end": {
                        "type": "integer",
                        "description": "The vlan range's higher vlan ID.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the VLAN Range.\n"
                    },
                    "start": {
                        "type": "integer",
                        "description": "The vlan range's lower vlan ID.\n"
                    },
                    "vlanDomain": {
                        "type": "string",
                        "description": "The name of the vlan Domain.\n"
                    }
                },
                "type": "object",
                "required": [
                    "class",
                    "classParameters",
                    "end",
                    "name",
                    "start",
                    "vlanDomain",
                    "id"
                ]
            }
        }
    }
}